'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();/*
 * AvaTax Software Development Kit for JavaScript
 *
 * (c) 2004-2018 Avalara, Inc.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * @author     Justin Soliz <justin.soliz@avalara.com>
 * @author     Ted Spence <ted.spence@avalara.com>
 * @copyright  2004-2018 Avalara, Inc.
 * @license    https://www.apache.org/licenses/LICENSE-2.0
 * @version    19.12.0
 * @link       https://github.com/avadev/AvaTax-REST-V2-JS-SDK
 */var _isomorphicFetch=require('isomorphic-fetch');var _isomorphicFetch2=_interopRequireDefault(_isomorphicFetch);var _basic_auth=require('./utils/basic_auth');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _objectDestructuringEmpty(obj){if(obj==null)throw new TypeError("Cannot destructure undefined");}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var AvaTaxClient=function(){/**
   * Construct a new AvaTaxClient 
   * 
   * @constructor
   * @param string appName      Specify the name of your application here.  Should not contain any semicolons.
   * @param string appVersion   Specify the version number of your application here.  Should not contain any semicolons.
   * @param string machineName  Specify the machine name of the machine on which this code is executing here.  Should not contain any semicolons.
   * @param string environment  Indicates which server to use; acceptable values are "sandbox" or "production", or the full URL of your AvaTax instance.
   */function AvaTaxClient(_ref){var appName=_ref.appName,appVersion=_ref.appVersion,machineName=_ref.machineName,environment=_ref.environment;_classCallCheck(this,AvaTaxClient);this.baseUrl='https://rest.avatax.com';if(environment=='sandbox'){this.baseUrl='https://sandbox-rest.avatax.com';}else if(environment.substring(0,8)=='https://'||environment.substring(0,7)=='http://'){this.baseUrl=environment;}this.clientId=appName+'; '+appVersion+'; JavascriptSdk; 19.12.1; '+machineName;}/**
   * Configure this client to use the specified username/password security settings
   *
   * @param  string          username        The username for your AvaTax user account
   * @param  string          password        The password for your AvaTax user account
   * @param  int             accountId       The account ID of your avatax account
   * @param  string          licenseKey      The license key of your avatax account
   * @param  string          bearerToken     The OAuth 2.0 token provided by Avalara Identity
   * @return AvaTaxClient
   */_createClass(AvaTaxClient,[{key:'withSecurity',value:function withSecurity(_ref2){var username=_ref2.username,password=_ref2.password,accountId=_ref2.accountId,licenseKey=_ref2.licenseKey,bearerToken=_ref2.bearerToken;if(username!=null&&password!=null){this.auth=(0,_basic_auth.createBasicAuthHeader)(username,password);}else if(accountId!=null&&licenseKey!=null){this.auth=(0,_basic_auth.createBasicAuthHeader)(accountId,licenseKey);}else if(bearerToken!=null){this.auth='Bearer '+bearerToken;}return this;}/**
   * Make a single REST call to the AvaTax v2 API server
   *
   * @param   string  url        The relative path of the API on the server
   * @param   string  verb       The HTTP verb being used in this request
   * @param   string  payload    The request body, if this is being sent to a POST/PUT API call
   */},{key:'restCall',value:function restCall(_ref3){var url=_ref3.url,verb=_ref3.verb,payload=_ref3.payload;return(0,_isomorphicFetch2.default)(url,{method:verb,headers:{Accept:'application/json','Content-Type':'application/json',Authorization:this.auth,'X-Avalara-Client':this.clientId},body:JSON.stringify(payload)}).then(function(res){var contentType=res.headers._headers['content-type'][0];if(contentType==='application/vnd.ms-excel'||contentType==='text/csv'){return res;}return res.json();}).then(function(json){// handle error
if(json.error){var ex=new Error(json.error.message);ex.code=json.error.code;ex.target=json.error.target;ex.details=json.error.details;throw ex;}else{return json;}});}/**
   * Construct a URL with query string parameters
   *
   * @param   string  url            The root URL of the API being called
   * @param   string  parameters     A list of name-value pairs in a javascript object to create as query string parameters
   */},{key:'buildUrl',value:function buildUrl(_ref4){var url=_ref4.url,parameters=_ref4.parameters;var qs='';for(var key in parameters){var value=parameters[key];if(value){qs+=encodeURIComponent(key)+'='+encodeURIComponent(value)+'&';}}if(qs.length>0){qs=qs.substring(0,qs.length-1);//chop off last "&"
url=url+'?'+qs;}return this.baseUrl+url;}/**
   * Reset this account's license key
   *
   * Resets the existing license key for this account to a new key.
     *  
     * To reset your account, you must specify the ID of the account you wish to reset and confirm the action.
     *  
     * This API is only available to account administrators for the account in question, and may only be called after
     * an account has been activated by reading and accepting Avalara's terms and conditions. To activate your account
     * please log onto the AvaTax website or call the `ActivateAccount` API.
     *  
     * Resetting a license key cannot be undone. Any previous license keys will immediately cease to work when a new key is created.
     *  
     * When you call this API, all account administrators for this account will receive an email with the newly updated license key.
     * The email will specify which user reset the license key and it will contain the new key to use to update your connectors.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int id The ID of the account you wish to update.
     * @param object model A request confirming that you wish to reset the license key of this account.
   * @return object
   */},{key:'accountResetLicenseKey',value:function accountResetLicenseKey(){var _ref5=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref5.id,model=_ref5.model;var path=this.buildUrl({url:'/api/v2/accounts/'+id+'/resetlicensekey',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Activate an account by accepting terms and conditions
   *
   * Activate the account specified by the unique accountId number.
     *  
     * This activation request can only be called by account administrators. You must indicate
     * that you have read and accepted Avalara's terms and conditions to call this API.
     *  
     * Once you have activated your account, use the `AccountResetLicenseKey` API to generate
     * a license key for your account.
     *  
     * If you have not read or accepted the terms and conditions, this API call will return the
     * unchanged account model.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, FirmAdmin, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int id The ID of the account to activate
     * @param object model The activation request
   * @return object
   */},{key:'activateAccount',value:function activateAccount(){var _ref6=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref6.id,model=_ref6.model;var path=this.buildUrl({url:'/api/v2/accounts/'+id+'/activate',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Retrieve audit history for an account.
   *
   * Retrieve audit trace history for an account.
     *  
     * Your audit trace history contains a record of all API calls made against the AvaTax REST API. You can use this API to investigate
     * problems and see exactly what information was sent back and forth between your code and AvaTax.
     *  
     * When specifying a start and end datetime, please include a valid timezone indicator, such as the "Z" present in the examples for the start and end query parameters.
     * You can learn more about valid time zone designators at https://en.wikipedia.org/wiki/ISO_8601#Time_zone_designators.
     *  
     * This API enforces limits to the amount of data retrieved. These limits are subject to change.
     *  
     * * You may request data from a maximum of a one-hour time period.
     * * The amount of data and number of API calls returned by this API are limited and may be adjusted at any time.
     * * Old records may be migrated out of immediately available storage. To request older data, please contact your account manager.
     * * New records must migrate to available storage before they can be retrieved. You may need to wait a period of time before newly created records can be fetched.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param int id The ID of the account you wish to audit.
     * @param string start The start datetime of audit history you with to retrieve, e.g. "2018-06-08T17:00:00Z". Defaults to the past 15 minutes.
     * @param string end The end datetime of audit history you with to retrieve, e.g. "2018-06-08T17:15:00Z. Defaults to the current time. Maximum of an hour after the start time.
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
   * @return FetchResult
   */},{key:'auditAccount',value:function auditAccount(){var _ref7=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref7.id,start=_ref7.start,end=_ref7.end,top=_ref7.top,skip=_ref7.skip;var path=this.buildUrl({url:'/api/v2/accounts/'+id+'/audit',parameters:{start:start,end:end,$top:top,$skip:skip}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve a single account
   *
   * Get the account object identified by this URL.
     * You may use the '$include' parameter to fetch additional nested data:
     *  
     * * Subscriptions
     * * Users
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param int id The ID of the account to retrieve
     * @param string include A comma separated list of special fetch options
   * @return object
   */},{key:'getAccount',value:function getAccount(){var _ref8=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref8.id,include=_ref8.include;var path=this.buildUrl({url:'/api/v2/accounts/'+id,parameters:{$include:include}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Get configuration settings for this account
   *
   * Retrieve a list of all configuration settings tied to this account.
     *  
     * Configuration settings provide you with the ability to control features of your account and of your
     * tax software. The category names `TaxServiceConfig` and `AddressServiceConfig` are reserved for
     * Avalara internal software configuration values; to store your own account-level settings, please
     * create a new category name that begins with `X-`, for example, `X-MyCustomCategory`.
     *  
     * Account settings are permanent settings that cannot be deleted. You can set the value of an
     * account setting to null if desired.
     *  
     * Avalara-based account settings for `TaxServiceConfig` and `AddressServiceConfig` affect your account's
     * tax calculation and address resolution, and should only be changed with care.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param int id 
   * @return object[]
   */},{key:'getAccountConfiguration',value:function getAccountConfiguration(){var _ref9=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref9.id;var path=this.buildUrl({url:'/api/v2/accounts/'+id+'/configuration',parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve all accounts
   *
   * List all account objects that can be seen by the current user.
     *  
     * This API lists all accounts you are allowed to see. In general, most users will only be able to see their own account.
     *  
     * Search for specific objects using the criteria in the `$filter` parameter; full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .
     * Paginate your results using the `$top`, `$skip`, and `$orderby` parameters.
     * You may specify one or more of the following values in the `$include` parameter to fetch additional nested data, using commas to separate multiple values:
     *  
     * * Subscriptions
     * * Users
     *  
     * For more information about filtering in REST, please see the documentation at http://developer.avalara.com/avatax/filtering-in-rest/ .
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param string include A comma separated list of objects to fetch underneath this account. Any object with a URL path underneath this account can be fetched by specifying its name.
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* subscriptions, users
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'queryAccounts',value:function queryAccounts(){var _ref10=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},include=_ref10.include,filter=_ref10.filter,top=_ref10.top,skip=_ref10.skip,orderBy=_ref10.orderBy;var path=this.buildUrl({url:'/api/v2/accounts',parameters:{$include:include,$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Change configuration settings for this account
   *
   * Update configuration settings tied to this account.
     *  
     * Configuration settings provide you with the ability to control features of your account and of your
     * tax software. The category names `TaxServiceConfig` and `AddressServiceConfig` are reserved for
     * Avalara internal software configuration values; to store your own account-level settings, please
     * create a new category name that begins with `X-`, for example, `X-MyCustomCategory`.
     *  
     * Account settings are permanent settings that cannot be deleted. You can set the value of an
     * account setting to null if desired.
     *  
     * Avalara-based account settings for `TaxServiceConfig` and `AddressServiceConfig` affect your account's
     * tax calculation and address resolution, and should only be changed with care.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int id 
     * @param object[] model 
   * @return object[]
   */},{key:'setAccountConfiguration',value:function setAccountConfiguration(){var _ref11=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref11.id,model=_ref11.model;var path=this.buildUrl({url:'/api/v2/accounts/'+id+'/configuration',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Retrieve geolocation information for a specified address
   *
   * Resolve an address against Avalara's address-validation system. If the address can be resolved, this API
     * provides the latitude and longitude of the resolved location. The value 'resolutionQuality' can be used
     * to identify how closely this address can be located. If the address cannot be clearly located, use the
     * 'messages' structure to learn more about problems with this address.
     * This is the same API as the POST /api/v2/addresses/resolve endpoint.
     * Both verbs are supported to provide for flexible implementation.
     *  
     * Inorder to get any evaluation for an address please provide atleast one of the following fields/pairs:
     * 1. postal code
     * 2. line1 + city + region
     * 3. line1 + postal code
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AutoAddress.
   *
   * 
     * @param string line1 Line 1
     * @param string line2 Line 2
     * @param string line3 Line 3
     * @param string city City
     * @param string region State / Province / Region
     * @param string postalCode Postal Code / Zip Code
     * @param string country Two character ISO 3166 Country Code (see /api/v2/definitions/countries for a full list)
     * @param string textCase selectable text case for address validation (See TextCase::* for a list of allowable values)
   * @return object
   */},{key:'resolveAddress',value:function resolveAddress(){var _ref12=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},line1=_ref12.line1,line2=_ref12.line2,line3=_ref12.line3,city=_ref12.city,region=_ref12.region,postalCode=_ref12.postalCode,country=_ref12.country,textCase=_ref12.textCase;var path=this.buildUrl({url:'/api/v2/addresses/resolve',parameters:{line1:line1,line2:line2,line3:line3,city:city,region:region,postalCode:postalCode,country:country,textCase:textCase}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve geolocation information for a specified address
   *
   * Resolve an address against Avalara's address-validation system. If the address can be resolved, this API
     * provides the latitude and longitude of the resolved location. The value 'resolutionQuality' can be used
     * to identify how closely this address can be located. If the address cannot be clearly located, use the
     * 'messages' structure to learn more about problems with this address.
     * This is the same API as the GET /api/v2/addresses/resolve endpoint.
     * Both verbs are supported to provide for flexible implementation.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AutoAddress.
   *
   * 
     * @param object model The address to resolve
   * @return object
   */},{key:'resolveAddressPost',value:function resolveAddressPost(){var _ref13=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},model=_ref13.model;var path=this.buildUrl({url:'/api/v2/addresses/resolve',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Create a new AvaFileForm
   *
   * Create one or more AvaFileForms
     * A 'AvaFileForm' represents a form supported by our returns team
     * 
     * ### Security Policies
     * 
     * * This API requires the user role Compliance Root User.
     * * This API depends on the following active services<br />*Returns* (at least one of): Mrs, MRSComplianceManager, AvaTaxCsp.<br />*Firm Managed* (for accounts managed by a firm): ARA, ARAManaged.
   *
   * 
     * @param object[] model The AvaFileForm you wish to create.
   * @return object[]
   */},{key:'createAvaFileForms',value:function createAvaFileForms(){var _ref14=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},model=_ref14.model;var path=this.buildUrl({url:'/api/v2/avafileforms',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Delete a single AvaFileForm
   *
   * Marks the existing AvaFileForm object at this URL as deleted.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: Compliance Root User, ComplianceUser, FirmAdmin.
     * * This API depends on the following active services<br />*Returns* (at least one of): Mrs, MRSComplianceManager, AvaTaxCsp.<br />*Firm Managed* (for accounts managed by a firm): ARA, ARAManaged.
   *
   * 
     * @param int id The ID of the AvaFileForm you wish to delete.
   * @return object[]
   */},{key:'deleteAvaFileForm',value:function deleteAvaFileForm(){var _ref15=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref15.id;var path=this.buildUrl({url:'/api/v2/avafileforms/'+id,parameters:{}});return this.restCall({url:path,verb:'delete',payload:null});}/**
   * Retrieve a single AvaFileForm
   *
   * Get the AvaFileForm object identified by this URL.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, CompanyAdmin, CompanyUser, Compliance Root User, Compliance Temp User, ComplianceAdmin, ComplianceUser, FirmAdmin, FirmUser, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin.
     * * This API depends on the following active services<br />*Returns* (at least one of): Mrs, MRSComplianceManager, AvaTaxCsp.<br />*Firm Managed* (for accounts managed by a firm): ARA, ARAManaged.
   *
   * 
     * @param int id The primary key of this AvaFileForm
   * @return object
   */},{key:'getAvaFileForm',value:function getAvaFileForm(){var _ref16=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref16.id;var path=this.buildUrl({url:'/api/v2/avafileforms/'+id,parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve all AvaFileForms
   *
   * Search for specific objects using the criteria in the `$filter` parameter; full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .
     * Paginate your results using the `$top`, `$skip`, and `$orderby` parameters.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, CompanyAdmin, CompanyUser, Compliance Root User, Compliance Temp User, ComplianceAdmin, ComplianceUser, FirmAdmin, FirmUser, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin.
     * * This API depends on the following active services<br />*Returns* (at least one of): Mrs, MRSComplianceManager, AvaTaxCsp.<br />*Firm Managed* (for accounts managed by a firm): ARA, ARAManaged.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* outletTypeId
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'queryAvaFileForms',value:function queryAvaFileForms(){var _ref17=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref17.filter,top=_ref17.top,skip=_ref17.skip,orderBy=_ref17.orderBy;var path=this.buildUrl({url:'/api/v2/avafileforms',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Update a AvaFileForm
   *
   * All data from the existing object will be replaced with data in the object you PUT.
     * To set a field's value to null, you may either set its value to null or omit that field from the object you post.
     * 
     * ### Security Policies
     * 
     * * This API requires the user role Compliance Root User.
     * * This API depends on the following active services<br />*Returns* (at least one of): Mrs, MRSComplianceManager, AvaTaxCsp.<br />*Firm Managed* (for accounts managed by a firm): ARA, ARAManaged.
   *
   * 
     * @param int id The ID of the AvaFileForm you wish to update
     * @param object model The AvaFileForm model you wish to update.
   * @return object
   */},{key:'updateAvaFileForm',value:function updateAvaFileForm(){var _ref18=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref18.id,model=_ref18.model;var path=this.buildUrl({url:'/api/v2/avafileforms/'+id,parameters:{}});return this.restCall({url:path,verb:'put',payload:model});}/**
   * Create a new batch
   *
   * Create one or more new batch objects attached to this company.
     *  
     * Each batch object may have one or more file objects (currently only one file is supported).
     *  
     * When a batch is created, it is added to the AvaTax Batch Queue and will be
     * processed as quickly as possible in the order it was received. To check the
     * status of a batch, fetch the batch and retrieve the results of the batch
     * operation.
     *  
     * Because the batch system processes with a degree of concurrency, and
     * because of batch sizes in the queue vary, AvaTax API is unable to accurately
     * predict when a batch will complete. If high performance processing is
     * required, please use the
     * [CreateTransaction API](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Transactions/CreateTransaction/).
     *  
     * The maximum content length of the request body is limited to 28.6 MB. If this limit
     * is exceeded, a 404 Not Found status will be returned (possibly with a CORS error if
     * the API is called from a browser). In this situation, please split the request into
     * smaller batches.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, CompanyAdmin, CSPTester, SSTAdmin, SystemAdmin, SystemOperator, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The ID of the company that owns this batch.
     * @param object[] model The batch you wish to create.
   * @return object[]
   */},{key:'createBatches',value:function createBatches(){var _ref19=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref19.companyId,model=_ref19.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/batches',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Delete a single batch
   *
   * Marks the batch identified by this URL as deleted.
     *  
     * If you attempt to delete a batch that is being processed, you will receive an error message.
     * Deleting a batch does not delete any transactions that were created by importing the batch.
     *  
     * Because the batch system processes with a degree of concurrency, and
     * because of batch sizes in the queue vary, AvaTax API is unable to accurately
     * predict when a batch will complete. If high performance processing is
     * required, please use the
     * [CreateTransaction API](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Transactions/CreateTransaction/).
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: CSPAdmin, CSPTester, SSTAdmin, SystemAdmin, SystemOperator, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The ID of the company that owns this batch.
     * @param int id The ID of the batch to delete.
   * @return object[]
   */},{key:'deleteBatch',value:function deleteBatch(){var _ref20=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref20.companyId,id=_ref20.id;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/batches/'+id,parameters:{}});return this.restCall({url:path,verb:'delete',payload:null});}/**
   * Download a single batch file
   *
   * Download a single batch file identified by this URL.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, SiteAdmin, SSTAdmin, SystemAdmin, SystemOperator, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param int companyId The ID of the company that owns this batch
     * @param int batchId The ID of the batch object
     * @param int id The primary key of this batch file object
   * @return object
   */},{key:'downloadBatch',value:function downloadBatch(){var _ref21=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref21.companyId,batchId=_ref21.batchId,id=_ref21.id;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/batches/'+batchId+'/files/'+id+'/attachment',parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve a single batch
   *
   * Get the batch object identified by this URL. A batch object is a large
     * collection of API calls stored in a compact file.
     *  
     * Use this endpoint to retrieve the results or check the status of a batch.
     *  
     * When a batch is created, it is added to the AvaTax Batch Queue and will be
     * processed as quickly as possible in the order it was received. To check the
     * status of a batch, fetch the batch and retrieve the results of the batch
     * operation.
     *  
     * Because the batch system processes with a degree of concurrency, and
     * because of batch sizes in the queue vary, AvaTax API is unable to accurately
     * predict when a batch will complete. If high performance processing is
     * required, please use the
     * [CreateTransaction API](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Transactions/CreateTransaction/).
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, SiteAdmin, SSTAdmin, SystemAdmin, SystemOperator, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param int companyId The ID of the company that owns this batch
     * @param int id The primary key of this batch
   * @return object
   */},{key:'getBatch',value:function getBatch(){var _ref22=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref22.companyId,id=_ref22.id;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/batches/'+id,parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve all batches for this company
   *
   * List all batch objects attached to the specified company.
     *  
     * A batch object is a large collection of API calls stored in a compact file.
     *  
     * Search for specific objects using the criteria in the `$filter` parameter;
     * full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .
     * Paginate results using the `$top`, `$skip`, and `$orderby` parameters.
     *  
     * Use [GetBatch](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Batches/GetBatch/)
     * to retrieve the results, or check the status, of an individual batch.
     *  
     * When a batch is created, it is added to the AvaTax Batch Queue and will be
     * processed as quickly as possible in the order it was received. To check the
     * status of a batch, fetch the batch and retrieve the results of the batch
     * operation.
     *  
     * Because the batch system processes with a degree of concurrency, and
     * because of batch sizes in the queue vary, AvaTax API is unable to accurately
     * predict when a batch will complete. If high performance processing is
     * required, please use the
     * [CreateTransaction API](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Transactions/CreateTransaction/).
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, SiteAdmin, SSTAdmin, SystemAdmin, SystemOperator, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param int companyId The ID of the company that owns these batches
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* files
     * @param string include A comma separated list of additional data to retrieve.
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listBatchesByCompany',value:function listBatchesByCompany(){var _ref23=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref23.companyId,filter=_ref23.filter,include=_ref23.include,top=_ref23.top,skip=_ref23.skip,orderBy=_ref23.orderBy;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/batches',parameters:{$filter:filter,$include:include,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve all batches
   *
   * Get multiple batch objects across all companies.
     *  
     * A batch object is a large collection of API calls stored in a compact file.
     *  
     * Search for specific objects using the criteria in the `$filter` parameter;
     * full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .
     * Paginate results using the `$top`, `$skip`, and `$orderby` parameters.
     *  
     * When a batch is created, it is added to the AvaTax Batch Queue and will be
     * processed as quickly as possible in the order it was received. To check the
     * status of a batch, fetch the batch and retrieve the results of the batch
     * operation.
     *  
     * Because the batch system processes with a degree of concurrency, and
     * because of batch sizes in the queue vary, AvaTax API is unable to accurately
     * predict when a batch will complete. If high performance processing is
     * required, please use the
     * [CreateTransaction API](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Transactions/CreateTransaction/).
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, SiteAdmin, SSTAdmin, SystemAdmin, SystemOperator, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* files
     * @param string include A comma separated list of additional data to retrieve.
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'queryBatches',value:function queryBatches(){var _ref24=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref24.filter,include=_ref24.include,top=_ref24.top,skip=_ref24.skip,orderBy=_ref24.orderBy;var path=this.buildUrl({url:'/api/v2/batches',parameters:{$filter:filter,$include:include,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Create a CertExpress invitation
   *
   * Creates an invitation for a customer to self-report certificates using the CertExpress website.
     *  
     * This invitation is delivered by your choice of method, or you can present a hyperlink to the user
     * directly in your connector. Your customer will be redirected to https://app.certexpress.com/ where
     * they can follow a step-by-step guide to enter information about their exemption certificates. The
     * certificates entered will be recorded and automatically linked to their customer record.
     *  
     * The [CertExpress website](https://app.certexpress.com/home) is available for customers to use at any time.
     * Using CertExpress with this API will ensure that your certificates are automatically linked correctly into
     * your company so that they can be used for tax exemptions.
     *  
     * Using exemption certificates endpoints requires setup of an auditable document storage for each company that will use certificates.
     * Companies that do not have this storage system set up will receive the error `CertCaptureNotConfiguredError` when they call exemption
     * certificate related APIs. To check if this company is set up, call `GetCertificateSetup`. To request setup of the auditable document
     * storage for this company, call `RequestCertificateSetup`.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The unique ID number of the company that will record certificates
     * @param string customerCode The number of the customer where the request is sent to
     * @param object[] model the requests to send out to customers
   * @return object[]
   */},{key:'createCertExpressInvitation',value:function createCertExpressInvitation(){var _ref25=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref25.companyId,customerCode=_ref25.customerCode,model=_ref25.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/customers/'+customerCode+'/certexpressinvites',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Retrieve a single CertExpress invitation
   *
   * Retrieve an existing CertExpress invitation sent to a customer.
     *  
     * A CertExpression invitation allows a customer to follow a helpful step-by-step guide to provide information
     * about their certificates. This step by step guide allows the customer to complete and upload the full
     * certificate in a convenient, friendly web browser experience. When the customer completes their certificates,
     * they will automatically be recorded to your company and linked to the customer record.
     *  
     * The [CertExpress website](https://app.certexpress.com/home) is available for customers to use at any time.
     * Using CertExpress with this API will ensure that your certificates are automatically linked correctly into
     * your company so that they can be used for tax exemptions.
     *  
     * Using exemption certificates endpoints requires setup of an auditable document storage for each company that will use certificates.
     * Companies that do not have this storage system set up will receive the error `CertCaptureNotConfiguredError` when they call exemption
     * certificate related APIs. To check if this company is set up, call `GetCertificateSetup`. To request setup of the auditable document
     * storage for this company, call `RequestCertificateSetup`.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The unique ID number of the company that issued this invitation
     * @param string customerCode The number of the customer where the request is sent to
     * @param int id The unique ID number of this CertExpress invitation
     * @param string include OPTIONAL: A comma separated list of special fetch options. No options are defined at this time.
   * @return object
   */},{key:'getCertExpressInvitation',value:function getCertExpressInvitation(){var _ref26=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref26.companyId,customerCode=_ref26.customerCode,id=_ref26.id,include=_ref26.include;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/customers/'+customerCode+'/certexpressinvites/'+id,parameters:{$include:include}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * List CertExpress invitations
   *
   * Retrieve CertExpress invitations sent by this company.
     *  
     * A CertExpression invitation allows a customer to follow a helpful step-by-step guide to provide information
     * about their certificates. This step by step guide allows the customer to complete and upload the full
     * certificate in a convenient, friendly web browser experience. When the customer completes their certificates,
     * they will automatically be recorded to your company and linked to the customer record.
     *  
     * The [CertExpress website](https://app.certexpress.com/home) is available for customers to use at any time.
     * Using CertExpress with this API will ensure that your certificates are automatically linked correctly into
     * your company so that they can be used for tax exemptions.
     *  
     * Using exemption certificates endpoints requires setup of an auditable document storage for each company that will use certificates.
     * Companies that do not have this storage system set up will receive the error `CertCaptureNotConfiguredError` when they call exemption
     * certificate related APIs. To check if this company is set up, call `GetCertificateSetup`. To request setup of the auditable document
     * storage for this company, call `RequestCertificateSetup`.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The unique ID number of the company that issued this invitation
     * @param string include OPTIONAL: A comma separated list of special fetch options.      No options are defined at this time.
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* companyId, customer, coverLetter, exposureZones, exemptReasons, requestLink
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listCertExpressInvitations',value:function listCertExpressInvitations(){var _ref27=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref27.companyId,include=_ref27.include,filter=_ref27.filter,top=_ref27.top,skip=_ref27.skip,orderBy=_ref27.orderBy;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/certexpressinvites',parameters:{$include:include,$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Create certificates for this company
   *
   * Record one or more certificates document for this company.
     *  
     * A certificate is a document stored in either AvaTax Exemptions or CertCapture. The certificate document
     * can contain information about a customer's eligibility for exemption from sales or use taxes based on
     * criteria you specify when you store the certificate. To view or manage your certificates directly, please
     * log onto the administrative website for the product you purchased.
     *  
     * When you create a certificate, it will be processed by Avalara and will become available for use in
     * calculating tax exemptions when processing is complete. For a certificate to be used in calculating exemptions,
     * it must have the following:
     *  
     * * A list of exposure zones indicating where the certificate is valid
     * * A link to the customer that is allowed to use this certificate
     * * Your tax transaction must contain the correct customer code
     *  
     * Using exemption certificates endpoints requires setup of an auditable document storage for each company that will use certificates.
     * Companies that do not have this storage system set up will receive the error `CertCaptureNotConfiguredError` when they call exemption
     * certificate related APIs. To check if this company is set up, call `GetCertificateSetup`. To request setup of the auditable document
     * storage for this company, call `RequestCertificateSetup`.
     *  
     * If the users specified in the certificates do not exist, the API will create the user and link them to the certificate
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, ProStoresOperator, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The ID number of the company recording this certificate
     * @param boolean preValidatedExemptionReason If set to true, the certificate will bypass the human verification process.
     * @param object[] model Certificates to be created
   * @return object[]
   */},{key:'createCertificates',value:function createCertificates(){var _ref28=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref28.companyId,preValidatedExemptionReason=_ref28.preValidatedExemptionReason,model=_ref28.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/certificates',parameters:{$preValidatedExemptionReason:preValidatedExemptionReason}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Revoke and delete a certificate
   *
   * Revoke the certificate identified by this URL, then delete it.
     *  
     * A certificate is a document stored in either AvaTax Exemptions or CertCapture. The certificate document
     * can contain information about a customer's eligibility for exemption from sales or use taxes based on
     * criteria you specify when you store the certificate. To view or manage your certificates directly, please
     * log onto the administrative website for the product you purchased.
     *  
     * Revoked certificates can no longer be used.
     *  
     * Using exemption certificates endpoints requires setup of an auditable document storage for each company that will use certificates.
     * Companies that do not have this storage system set up will receive the error `CertCaptureNotConfiguredError` when they call exemption
     * certificate related APIs. To check if this company is set up, call `GetCertificateSetup`. To request setup of the auditable document
     * storage for this company, call `RequestCertificateSetup`.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The unique ID number of the company that recorded this certificate
     * @param int id The unique ID number of this certificate
   * @return object[]
   */},{key:'deleteCertificate',value:function deleteCertificate(){var _ref29=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref29.companyId,id=_ref29.id;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/certificates/'+id,parameters:{}});return this.restCall({url:path,verb:'delete',payload:null});}/**
   * Download an image for this certificate
   *
   * Download an image or PDF file for this certificate.
     *  
     * This API can be used to download either a single-page preview of the certificate or a full PDF document.
     * To retrieve a preview image, set the `$type` parameter to `Jpeg` and the `$page` parameter to `1`.
     *  
     * A certificate is a document stored in either AvaTax Exemptions or CertCapture. The certificate document
     * can contain information about a customer's eligibility for exemption from sales or use taxes based on
     * criteria you specify when you store the certificate. To view or manage your certificates directly, please
     * log onto the administrative website for the product you purchased.
     *  
     * Using exemption certificates endpoints requires setup of an auditable document storage for each company that will use certificates.
     * Companies that do not have this storage system set up will receive the error `CertCaptureNotConfiguredError` when they call exemption
     * certificate related APIs. To check if this company is set up, call `GetCertificateSetup`. To request setup of the auditable document
     * storage for this company, call `RequestCertificateSetup`.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The unique ID number of the company that recorded this certificate
     * @param int id The unique ID number of this certificate
     * @param int page If you choose `$type`=`Jpeg`, you must specify which page number to retrieve.
     * @param string type The data format in which to retrieve the certificate image (See CertificatePreviewType::* for a list of allowable values)
   * @return object
   */},{key:'downloadCertificateImage',value:function downloadCertificateImage(){var _ref30=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref30.companyId,id=_ref30.id,page=_ref30.page,type=_ref30.type;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/certificates/'+id+'/attachment',parameters:{$page:page,$type:type}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve a single certificate
   *
   * Get the current certificate identified by this URL.
     *  
     * A certificate is a document stored in either AvaTax Exemptions or CertCapture. The certificate document
     * can contain information about a customer's eligibility for exemption from sales or use taxes based on
     * criteria you specify when you store the certificate. To view or manage your certificates directly, please
     * log onto the administrative website for the product you purchased.
     *  
     * You can use the `$include` parameter to fetch the following additional objects for expansion:
     *  
     * * customers - Retrieves the list of customers linked to the certificate.
     * * po_numbers - Retrieves all PO numbers tied to the certificate.
     * * attributes - Retrieves all attributes applied to the certificate.
     *  
     * Using exemption certificates endpoints requires setup of an auditable document storage for each company that will use certificates.
     * Companies that do not have this storage system set up will receive the error `CertCaptureNotConfiguredError` when they call exemption
     * certificate related APIs. To check if this company is set up, call `GetCertificateSetup`. To request setup of the auditable document
     * storage for this company, call `RequestCertificateSetup`.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The ID number of the company that recorded this certificate
     * @param int id The unique ID number of this certificate
     * @param string include OPTIONAL: A comma separated list of special fetch options. You can specify one or more of the following:      * customers - Retrieves the list of customers linked to the certificate.   * po_numbers - Retrieves all PO numbers tied to the certificate.   * attributes - Retrieves all attributes applied to the certificate.
   * @return object
   */},{key:'getCertificate',value:function getCertificate(){var _ref31=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref31.companyId,id=_ref31.id,include=_ref31.include;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/certificates/'+id,parameters:{$include:include}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Check a company's exemption certificate status.
   *
   * Checks whether this company is configured to use exemption certificates in AvaTax.
     *  
     * Exemption certificates are tracked through a different auditable data store than the one that
     * holds AvaTax transactions. To use the AvaTax exemption certificate document store, please call
     * `GetCertificateSetup` to see if your company is configured to use the exemption certificate
     * document store. To request setup, please call `RequestCertificateSetup` and your company will
     * be configured with data storage in the auditable certificate system.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The company ID to check
   * @return object
   */},{key:'getCertificateSetup',value:function getCertificateSetup(){var _ref32=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref32.companyId;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/certificates/setup',parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Link attributes to a certificate
   *
   * Link one or many attributes to a certificate.
     *  
     * A certificate may have multiple attributes that control its behavior. You may link or unlink attributes to a
     * certificate at any time. The full list of defined attributes may be found using `ListCertificateAttributes`.
     *  
     * A certificate is a document stored in either AvaTax Exemptions or CertCapture. The certificate document
     * can contain information about a customer's eligibility for exemption from sales or use taxes based on
     * criteria you specify when you store the certificate. To view or manage your certificates directly, please
     * log onto the administrative website for the product you purchased.
     *  
     * Using exemption certificates endpoints requires setup of an auditable document storage for each company that will use certificates.
     * Companies that do not have this storage system set up will receive the error `CertCaptureNotConfiguredError` when they call exemption
     * certificate related APIs. To check if this company is set up, call `GetCertificateSetup`. To request setup of the auditable document
     * storage for this company, call `RequestCertificateSetup`.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The unique ID number of the company that recorded this certificate
     * @param int id The unique ID number of this certificate
     * @param object[] model The list of attributes to link to this certificate.
   * @return FetchResult
   */},{key:'linkAttributesToCertificate',value:function linkAttributesToCertificate(){var _ref33=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref33.companyId,id=_ref33.id,model=_ref33.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/certificates/'+id+'/attributes/link',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Link customers to a certificate
   *
   * Link one or more customers to an existing certificate.
     *  
     * Customers and certificates must be linked before a customer can make use of a certificate to obtain
     * a tax exemption in AvaTax. Since some certificates may cover more than one business entity, a certificate
     * can be connected to multiple customer records using the `LinkCustomersToCertificate` API.
     *  
     * A certificate is a document stored in either AvaTax Exemptions or CertCapture. The certificate document
     * can contain information about a customer's eligibility for exemption from sales or use taxes based on
     * criteria you specify when you store the certificate. To view or manage your certificates directly, please
     * log onto the administrative website for the product you purchased.
     *  
     * Using exemption certificates endpoints requires setup of an auditable document storage for each company that will use certificates.
     * Companies that do not have this storage system set up will receive the error `CertCaptureNotConfiguredError` when they call exemption
     * certificate related APIs. To check if this company is set up, call `GetCertificateSetup`. To request setup of the auditable document
     * storage for this company, call `RequestCertificateSetup`.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The unique ID number of the company that recorded this certificate
     * @param int id The unique ID number of this certificate
     * @param object model The list of customers needed be added to the Certificate for exemption
   * @return FetchResult
   */},{key:'linkCustomersToCertificate',value:function linkCustomersToCertificate(){var _ref34=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref34.companyId,id=_ref34.id,model=_ref34.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/certificates/'+id+'/customers/link',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * List all attributes applied to this certificate
   *
   * Retrieve the list of attributes that are linked to this certificate.
     *  
     * A certificate may have multiple attributes that control its behavior. You may link or unlink attributes to a
     * certificate at any time. The full list of defined attributes may be found using [ListCertificateAttributes](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Definitions/ListCertificateAttributes/) API.
     *  
     * A certificate is a document stored in either AvaTax Exemptions or CertCapture. The certificate document
     * can contain information about a customer's eligibility for exemption from sales or use taxes based on
     * criteria you specify when you store the certificate. To view or manage your certificates directly, please
     * log onto the administrative website for the product you purchased.
     *  
     * Using exemption certificates endpoints requires setup of an auditable document storage for each company that will use certificates.
     * Companies that do not have this storage system set up will receive the error `CertCaptureNotConfiguredError` when they call exemption
     * certificate related APIs. To check if this company is set up, call `GetCertificateSetup`. To request setup of the auditable document
     * storage for this company, call `RequestCertificateSetup`.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The unique ID number of the company that recorded this certificate
     * @param int id The unique ID number of this certificate
   * @return FetchResult
   */},{key:'listAttributesForCertificate',value:function listAttributesForCertificate(){var _ref35=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref35.companyId,id=_ref35.id;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/certificates/'+id+'/attributes',parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * List customers linked to this certificate
   *
   * List all customers linked to this certificate.
     *  
     * Customers must be linked to a certificate in order to make use of its tax exemption features. You
     * can link or unlink customers to a certificate at any time.
     *  
     * A certificate is a document stored in either AvaTax Exemptions or CertCapture. The certificate document
     * can contain information about a customer's eligibility for exemption from sales or use taxes based on
     * criteria you specify when you store the certificate. To view or manage your certificates directly, please
     * log onto the administrative website for the product you purchased.
     *  
     * Using exemption certificates endpoints requires setup of an auditable document storage for each company that will use certificates.
     * Companies that do not have this storage system set up will receive the error `CertCaptureNotConfiguredError` when they call exemption
     * certificate related APIs. To check if this company is set up, call `GetCertificateSetup`. To request setup of the auditable document
     * storage for this company, call `RequestCertificateSetup`.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The unique ID number of the company that recorded this certificate
     * @param int id The unique ID number of this certificate
     * @param string include OPTIONAL: A comma separated list of special fetch options.   No options are currently available when fetching customers.
   * @return FetchResult
   */},{key:'listCustomersForCertificate',value:function listCustomersForCertificate(){var _ref36=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref36.companyId,id=_ref36.id,include=_ref36.include;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/certificates/'+id+'/customers',parameters:{$include:include}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * List all certificates for a company
   *
   * List all certificates recorded by a company
     *  
     * A certificate is a document stored in either AvaTax Exemptions or CertCapture. The certificate document
     * can contain information about a customer's eligibility for exemption from sales or use taxes based on
     * criteria you specify when you store the certificate. To view or manage your certificates directly, please
     * log onto the administrative website for the product you purchased.
     *  
     * You can use the `$include` parameter to fetch the following additional objects for expansion:
     *  
     * * customers - Retrieves the list of customers linked to the certificate.
     * * po_numbers - Retrieves all PO numbers tied to the certificate.
     * * attributes - Retrieves all attributes applied to the certificate.
     *  
     * Using exemption certificates endpoints requires setup of an auditable document storage for each company that will use certificates.
     * Companies that do not have this storage system set up will receive the error `CertCaptureNotConfiguredError` when they call exemption
     * certificate related APIs. To check if this company is set up, call `GetCertificateSetup`. To request setup of the auditable document
     * storage for this company, call `RequestCertificateSetup`.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The ID number of the company to search
     * @param string include OPTIONAL: A comma separated list of special fetch options. You can specify one or more of the following:      * customers - Retrieves the list of customers linked to the certificate.   * po_numbers - Retrieves all PO numbers tied to the certificate.   * attributes - Retrieves all attributes applied to the certificate.
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* exemptionNumber, status, ecmsId, ecmsStatus, pdf, pages
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'queryCertificates',value:function queryCertificates(){var _ref37=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref37.companyId,include=_ref37.include,filter=_ref37.filter,top=_ref37.top,skip=_ref37.skip,orderBy=_ref37.orderBy;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/certificates',parameters:{$include:include,$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Request setup of exemption certificates for this company.
   *
   * Requests the setup of exemption certificates for this company.
     *  
     * Exemption certificates are tracked through a different auditable data store than the one that
     * holds AvaTax transactions. To use the AvaTax exemption certificate document store, please call
     * `GetCertificateSetup` to see if your company is configured to use the exemption certificate
     * document store. To request setup, please call `RequestCertificateSetup` and your company will
     * be configured with data storage in the auditable certificate system.
     *  
     * This API will return the current status of exemption certificate setup for this company.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId 
   * @return object
   */},{key:'requestCertificateSetup',value:function requestCertificateSetup(){var _ref38=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref38.companyId;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/certificates/setup',parameters:{}});return this.restCall({url:path,verb:'post',payload:null});}/**
   * Unlink attributes from a certificate
   *
   * Unlink one or many attributes from a certificate.
     *  
     * A certificate may have multiple attributes that control its behavior. You may link or unlink attributes to a
     * certificate at any time. The full list of defined attributes may be found using `ListCertificateAttributes`.
     *  
     * A certificate is a document stored in either AvaTax Exemptions or CertCapture. The certificate document
     * can contain information about a customer's eligibility for exemption from sales or use taxes based on
     * criteria you specify when you store the certificate. To view or manage your certificates directly, please
     * log onto the administrative website for the product you purchased.
     *  
     * Using exemption certificates endpoints requires setup of an auditable document storage for each company that will use certificates.
     * Companies that do not have this storage system set up will receive the error `CertCaptureNotConfiguredError` when they call exemption
     * certificate related APIs. To check if this company is set up, call `GetCertificateSetup`. To request setup of the auditable document
     * storage for this company, call `RequestCertificateSetup`.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The unique ID number of the company that recorded this certificate
     * @param int id The unique ID number of this certificate
     * @param object[] model The list of attributes to unlink from this certificate.
   * @return FetchResult
   */},{key:'unlinkAttributesFromCertificate',value:function unlinkAttributesFromCertificate(){var _ref39=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref39.companyId,id=_ref39.id,model=_ref39.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/certificates/'+id+'/attributes/unlink',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Unlink customers from a certificate
   *
   * Unlinks one or more customers from a certificate.
     *  
     * Unlinking a certificate from a customer will prevent the certificate from being used to generate
     * tax exemptions for the customer in the future. If any previous transactions for this customer had
     * used this linked certificate, those transactions will be unchanged and will still have a link to the
     * exemption certificate in question.
     *  
     * A certificate is a document stored in either AvaTax Exemptions or CertCapture. The certificate document
     * can contain information about a customer's eligibility for exemption from sales or use taxes based on
     * criteria you specify when you store the certificate. To view or manage your certificates directly, please
     * log onto the administrative website for the product you purchased.
     *  
     * Using exemption certificates endpoints requires setup of an auditable document storage for each company that will use certificates.
     * Companies that do not have this storage system set up will receive the error `CertCaptureNotConfiguredError` when they call exemption
     * certificate related APIs. To check if this company is set up, call `GetCertificateSetup`. To request setup of the auditable document
     * storage for this company, call `RequestCertificateSetup`.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The unique ID number of the company that recorded this certificate
     * @param int id The unique ID number of this certificate
     * @param object model The list of customers to unlink from this certificate
   * @return FetchResult
   */},{key:'unlinkCustomersFromCertificate',value:function unlinkCustomersFromCertificate(){var _ref40=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref40.companyId,id=_ref40.id,model=_ref40.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/certificates/'+id+'/customers/unlink',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Update a single certificate
   *
   * Replace the certificate identified by this URL with a new one.
     *  
     * A certificate is a document stored in either AvaTax Exemptions or CertCapture. The certificate document
     * can contain information about a customer's eligibility for exemption from sales or use taxes based on
     * criteria you specify when you store the certificate. To view or manage your certificates directly, please
     * log onto the administrative website for the product you purchased.
     *  
     * Using exemption certificates endpoints requires setup of an auditable document storage for each company that will use certificates.
     * Companies that do not have this storage system set up will receive the error `CertCaptureNotConfiguredError` when they call exemption
     * certificate related APIs. To check if this company is set up, call `GetCertificateSetup`. To request setup of the auditable document
     * storage for this company, call `RequestCertificateSetup`.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The ID number of the company that recorded this certificate
     * @param int id The unique ID number of this certificate
     * @param object model The new certificate object that will replace the existing one
   * @return object
   */},{key:'updateCertificate',value:function updateCertificate(){var _ref41=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref41.companyId,id=_ref41.id,model=_ref41.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/certificates/'+id,parameters:{}});return this.restCall({url:path,verb:'put',payload:model});}/**
   * Upload an image or PDF attachment for this certificate
   *
   * Upload an image or PDF attachment for this certificate.
     *  
     * Image attachments can be of the format `PDF`, `JPEG`, `TIFF`, or `PNG`. To upload a multi-page image, please
     * use the `PDF` data type.
     *  
     * A certificate is a document stored in either AvaTax Exemptions or CertCapture. The certificate document
     * can contain information about a customer's eligibility for exemption from sales or use taxes based on
     * criteria you specify when you store the certificate. To view or manage your certificates directly, please
     * log onto the administrative website for the product you purchased.
     *  
     * Using exemption certificates endpoints requires setup of an auditable document storage for each company that will use certificates.
     * Companies that do not have this storage system set up will receive the error `CertCaptureNotConfiguredError` when they call exemption
     * certificate related APIs. To check if this company is set up, call `GetCertificateSetup`. To request setup of the auditable document
     * storage for this company, call `RequestCertificateSetup`.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The unique ID number of the company that recorded this certificate
     * @param int id The unique ID number of this certificate
     * @param object file The exemption certificate file you wanted to upload. Accepted formats are: PDF, JPEG, TIFF, PNG.
   * @return string
   */},{key:'uploadCertificateImage',value:function uploadCertificateImage(){var _ref42=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref42.companyId,id=_ref42.id,file=_ref42.file;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/certificates/'+id+'/attachment',parameters:{}});return this.restCall({url:path,verb:'post',payload:null});}/**
   * Checks whether the integration being used to set up this company and run transactions onto this company is compliant to all requirements.
   *
   * Examines the most recent 100 transactions or data from the last month when verifying transaction-related integrations.
     * For partners who write integrations against AvaTax for many clients, this API is a way to do a quick self testing to verify whether the
     * written integrations for a company are sufficient enough to be delivered to the respective customers to start using it.
     *  
     * This API provides messages specific enough (through predefined checks) to guide the partner on what integrations are still missing from the company to get fully certified.
     * The API makes the following checks to conclude if the company is NOT fully certified:
     * 1. Any past month items contains generic tax code of P0000000.
     * 2. All the companies on the requesting account are test companies.
     * 3. No Voided/Cancelled documents in the past 30 days.
     * 4. There are less than 2 committed documents.
     * 5. Any documentCode is a generic GUID string.
     * 6. Any customerCode on document is a generic GUID string.
     * 7. No document has more than 1 documentLine.
     * 8. All of the documents have missing exemptionNo, customerUsageType, taxDateOverride or negative amount.
     * 9. Any document quantity is a negative number.
     * 10. Any document have repeated lines.
     * 11. No document has shipping charge.
     * 12. All documents have same ItemCodes, descriptions and taxCodes.
     * 13. Less than 2 addresses used across all documents.
     * 14. Whether locationCode was used in documents.
     * 15. Account with AvaGlobal subscription and no documents have VATBuyerId.
     * 16. Any document has currencyCode not being USD for accounts with AvaGlobal subscription.
     * 17. All documents have countryCode used for accounts with AvaGlobal subscription.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, ProStoresOperator, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param int id The ID of the company to check if its integration is certified.
   * @return string
   */},{key:'certifyIntegration',value:function certifyIntegration(){var _ref43=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref43.id;var path=this.buildUrl({url:'/api/v2/companies/'+id+'/certify',parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Change the filing status of this company
   *
   * Changes the current filing status of this company.
     *  
     * For customers using Avalara's Managed Returns Service, each company within their account can request
     * for Avalara to file tax returns on their behalf. Avalara compliance team members will review all
     * requested filing calendars prior to beginning filing tax returns on behalf of this company.
     *  
     * The following changes may be requested through this API:
     *  
     * * If a company is in `NotYetFiling` status, the customer may request this be changed to `FilingRequested`.
     * * Avalara compliance team members may change a company from `FilingRequested` to `FirstFiling`.
     * * Avalara compliance team members may change a company from `FirstFiling` to `Active`.
     *  
     * All other status changes must be requested through the Avalara customer support team.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, ProStoresOperator, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param int id 
     * @param object model 
   * @return string
   */},{key:'changeFilingStatus',value:function changeFilingStatus(){var _ref44=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref44.id,model=_ref44.model;var path=this.buildUrl({url:'/api/v2/companies/'+id+'/filingstatus',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Quick setup for a company with a single physical address
   *
   * Shortcut to quickly setup a single-physical-location company with critical information and activate it.
     * This API provides quick and simple company setup functionality and does the following things:
     *  
     * * Create a company object with its own tax profile
     * * Add a key contact person for the company
     * * Set up one physical location for the main office
     * * Declare nexus in all taxing jurisdictions for that main office address
     * * Activate the company
     *  
     * This API only provides a limited subset of functionality compared to the 'Create Company' API call.
     * If you need additional features or options not present in this 'Quick Setup' API call, please use the full 'Create Company' call instead.
     * Please allow 1 minute before making transactions using the company.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, FirmAdmin, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param object model Information about the company you wish to create.
   * @return object
   */},{key:'companyInitialize',value:function companyInitialize(){var _ref45=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},model=_ref45.model;var path=this.buildUrl({url:'/api/v2/companies/initialize',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Create new companies
   *
   * Create one or more new company objects.
     * A 'company' represents a single corporation or individual that is registered to handle transactional taxes.
     * You may attach nested data objects such as contacts, locations, and nexus with this CREATE call, and those objects will be created with the company.
     *  
     * NOTE: Please do not use these blacklisted characters in company name and code: ';', '\', '|'.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, FirmAdmin, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param object[] model Either a single company object or an array of companies to create
   * @return object[]
   */},{key:'createCompanies',value:function createCompanies(){var _ref46=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},model=_ref46.model;var path=this.buildUrl({url:'/api/v2/companies',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Request managed returns funding setup for a company
   *
   * This API is available by invitation only.
     * Companies that use the Avalara Managed Returns or the SST Certified Service Provider services are
     * required to setup their funding configuration before Avalara can begin filing tax returns on their
     * behalf.
     * Funding configuration for each company is set up by submitting a funding setup request, which can
     * be sent either via email or via an embedded HTML widget.
     * When the funding configuration is submitted to Avalara, it will be reviewed by treasury team members
     * before approval.
     * This API records that an ambedded HTML funding setup widget was activated.
     * This API requires a subscription to Avalara Managed Returns or SST Certified Service Provider.
     * 
     * ### Security Policies
     * 
     * * This API depends on the following active services<br />*Returns* (at least one of): Mrs, MRSComplianceManager, AvaTaxCsp.
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, ProStoresOperator, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param int id The unique identifier of the company
     * @param object model The funding initialization request
   * @return object
   */},{key:'createFundingRequest',value:function createFundingRequest(){var _ref47=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref47.id,model=_ref47.model;var path=this.buildUrl({url:'/api/v2/companies/'+id+'/funding/setup',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Delete a single company
   *
   * Deleting a company will delete all child companies, and all users attached to this company.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, FirmAdmin, SSTAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int id The ID of the company you wish to delete.
   * @return object[]
   */},{key:'deleteCompany',value:function deleteCompany(){var _ref48=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref48.id;var path=this.buildUrl({url:'/api/v2/companies/'+id,parameters:{}});return this.restCall({url:path,verb:'delete',payload:null});}/**
   * Check the funding configuration of a company
   *
   * This API is available by invitation only.
     * Requires a subscription to Avalara Managed Returns or SST Certified Service Provider.
     * Returns the funding configuration of the requested company.
     * .
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, ProStoresOperator, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
     * * This API depends on the following active services<br />*Returns* (at least one of): Mrs, MRSComplianceManager, AvaTaxCsp.<br />*Firm Managed* (for accounts managed by a firm): ARA, ARAManaged.
   *
   * 
     * @param int companyId The unique identifier of the company
   * @return object
   */},{key:'fundingConfigurationByCompany',value:function fundingConfigurationByCompany(){var _ref49=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref49.companyId;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/funding/configuration',parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Check the funding configuration of a company
   *
   * This API is available by invitation only.
     * Requires a subscription to Avalara Managed Returns or SST Certified Service Provider.
     * Returns the funding configuration of the requested company.
     * .
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, ProStoresOperator, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
     * * This API depends on the following active services<br />*Returns* (at least one of): Mrs, MRSComplianceManager, AvaTaxCsp.<br />*Firm Managed* (for accounts managed by a firm): ARA, ARAManaged.
   *
   * 
     * @param int companyId The unique identifier of the company
     * @param string currency The currency of the funding. USD and CAD are the only valid currencies
   * @return object[]
   */},{key:'fundingConfigurationsByCompanyAndCurrency',value:function fundingConfigurationsByCompanyAndCurrency(){var _ref50=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref50.companyId,currency=_ref50.currency;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/funding/configurations',parameters:{currency:currency}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve a single company
   *
   * Get the company object identified by this URL.
     * A 'company' represents a single corporation or individual that is registered to handle transactional taxes.
     * You may specify one or more of the following values in the '$include' parameter to fetch additional nested data, using commas to separate multiple values:
     *  
     *  * Contacts
     *  * Items
     *  * Locations
     *  * Nexus
     *  * Settings
     *  * TaxCodes
     *  * TaxRules
     *  * UPC
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, ProStoresOperator, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param int id The ID of the company to retrieve.
     * @param string include OPTIONAL: A comma separated list of special fetch options.      * Child objects - Specify one or more of the following to retrieve objects related to each company: "Contacts", "FilingCalendars", "Items", "Locations", "Nexus", "TaxCodes", "NonReportingChildren" or "TaxRules".   * Deleted objects - Specify "FetchDeleted" to retrieve information about previously deleted objects.
   * @return object
   */},{key:'getCompany',value:function getCompany(){var _ref51=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref51.id,include=_ref51.include;var path=this.buildUrl({url:'/api/v2/companies/'+id,parameters:{$include:include}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Get configuration settings for this company
   *
   * Retrieve a list of all configuration settings tied to this company.
     *  
     * Configuration settings provide you with the ability to control features of your account and of your
     * tax software. The category name `AvaCertServiceConfig` is reserved for
     * Avalara internal software configuration values; to store your own company-level settings, please
     * create a new category name that begins with `X-`, for example, `X-MyCustomCategory`.
     *  
     * Company settings are permanent settings that cannot be deleted. You can set the value of a
     * company setting to null if desired and if the particular setting supports it.
     *  
     * Avalara-based company settings for `AvaCertServiceConfig` affect your company's exemption certificate
     * processing, and should be changed with care.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param int id 
   * @return object[]
   */},{key:'getCompanyConfiguration',value:function getCompanyConfiguration(){var _ref52=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref52.id;var path=this.buildUrl({url:'/api/v2/companies/'+id+'/configuration',parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Get this company's filing status
   *
   * Retrieve the current filing status of this company.
     *  
     * For customers using Avalara's Managed Returns Service, each company within their account can request
     * for Avalara to file tax returns on their behalf. Avalara compliance team members will review all
     * requested filing calendars prior to beginning filing tax returns on behalf of this company.
     *  
     * A company's filing status can be one of the following values:
     *  
     * * `NoReporting` - This company is not configured to report tax returns; instead, it reports through a parent company.
     * * `NotYetFiling` - This company has not yet begun filing tax returns through Avalara's Managed Returns Service.
     * * `FilingRequested` - The company has requested to begin filing tax returns, but Avalara's compliance team has not yet begun filing.
     * * `FirstFiling` - The company has recently filing tax returns and is in a new status.
     * * `Active` - The company is currently active and is filing tax returns via Avalara Managed Returns.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, ProStoresOperator, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param int id 
   * @return string
   */},{key:'getFilingStatus',value:function getFilingStatus(){var _ref53=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref53.id;var path=this.buildUrl({url:'/api/v2/companies/'+id+'/filingstatus',parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Check managed returns funding status for a company
   *
   * This API is available by invitation only.
     * Requires a subscription to Avalara Managed Returns or SST Certified Service Provider.
     * Returns a list of funding setup requests and their current status.
     * Each object in the result is a request that was made to setup or adjust funding status for this company.
     * 
     * ### Security Policies
     * 
     * * This API depends on the following active services<br />*Returns* (at least one of): Mrs, MRSComplianceManager, AvaTaxCsp.
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, ProStoresOperator, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param int id The unique identifier of the company
   * @return object[]
   */},{key:'listFundingRequestsByCompany',value:function listFundingRequestsByCompany(){var _ref54=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref54.id;var path=this.buildUrl({url:'/api/v2/companies/'+id+'/funding',parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve a list of MRS Companies with account
   *
   * This API is available by invitation only.
     *  
     * Get a list of companies with an active MRS service.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, ProStoresOperator, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
   * @return FetchResult
   */},{key:'listMrsCompanies',value:function listMrsCompanies(){var _ref55=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_objectDestructuringEmpty(_ref55);var path=this.buildUrl({url:'/api/v2/companies/mrs',parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve all companies
   *
   * Get multiple company objects.
     *  
     * A `company` represents a single corporation or individual that is registered to handle transactional taxes.
     *  
     * Search for specific objects using the criteria in the `$filter` parameter; full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .
     * Paginate your results using the `$top`, `$skip`, and `$orderby` parameters.
     * You may specify one or more of the following values in the `$include` parameter to fetch additional nested data, using commas to separate multiple values:
     *  
     * * Contacts
     * * Items
     * * Locations
     * * Nexus
     * * Settings
     * * TaxCodes
     * * TaxRules
     * * UPC
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, ProStoresOperator, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param string include A comma separated list of objects to fetch underneath this company. Any object with a URL path underneath this company can be fetched by specifying its name.
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* IsFein, contacts, items, locations, nexus, settings, taxCodes, taxRules, upcs, nonReportingChildCompanies, exemptCerts
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'queryCompanies',value:function queryCompanies(){var _ref56=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},include=_ref56.include,filter=_ref56.filter,top=_ref56.top,skip=_ref56.skip,orderBy=_ref56.orderBy;var path=this.buildUrl({url:'/api/v2/companies',parameters:{$include:include,$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Change configuration settings for this company
   *
   * Update configuration settings tied to this company.
     *  
     * Configuration settings provide you with the ability to control features of your account and of your
     * tax software. The category names `AvaCertServiceConfig` is reserved for
     * Avalara internal software configuration values; to store your own company-level settings, please
     * create a new category name that begins with `X-`, for example, `X-MyCustomCategory`.
     *  
     * Company settings are permanent settings that cannot be deleted. You can set the value of a
     * company setting to null if desired and if the particular setting supports it.
     *  
     * Avalara-based company settings for `AvaCertServiceConfig` affect your company's exemption certificate
     * processing, and should be changed with care.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int id 
     * @param object[] model 
   * @return object[]
   */},{key:'setCompanyConfiguration',value:function setCompanyConfiguration(){var _ref57=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref57.id,model=_ref57.model;var path=this.buildUrl({url:'/api/v2/companies/'+id+'/configuration',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Update a single company
   *
   * Replace the existing company object at this URL with an updated object.
     *  
     * A `CompanyModel` represents a single corporation or individual that is registered to handle transactional taxes.
     * All data from the existing object will be replaced with data in the object you PUT.
     *  
     * When calling `UpdateCompany`, you are permitted to update the company itself. Updates to the nested objects
     * such as contacts, locations, or settings are not permitted. To update the nested objects
     *  
     * To set a field's value to `null`, you may either set its value to `null` or omit that field from the object you PUT.
     *  
     * NOTE: Please do not use these blacklisted characters in company name and code: ';', '\', '|'.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, FirmAdmin, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int id The ID of the company you wish to update.
     * @param object model The company object you wish to update.
   * @return object
   */},{key:'updateCompany',value:function updateCompany(){var _ref58=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref58.id,model=_ref58.model;var path=this.buildUrl({url:'/api/v2/companies/'+id,parameters:{}});return this.restCall({url:path,verb:'put',payload:model});}/**
   * API to modify the reference fields at the document and the line level.
   *
   * 
   *
   * 
     * @param int companyId 
     * @param object[] model 
   * @return FetchResult
   */},{key:'tagTransaction',value:function tagTransaction(){var _ref59=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref59.companyId,model=_ref59.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/transactions/tag',parameters:{}});return this.restCall({url:path,verb:'put',payload:model});}/**
   * Create a new contact
   *
   * Create one or more new contact objects.
     * A 'contact' is a person associated with a company who is designated to handle certain responsibilities of
     * a tax collecting and filing entity.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, FirmAdmin, SSTAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The ID of the company that owns this contact.
     * @param object[] model The contacts you wish to create.
   * @return object[]
   */},{key:'createContacts',value:function createContacts(){var _ref60=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref60.companyId,model=_ref60.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/contacts',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Delete a single contact
   *
   * Mark the existing contact object at this URL as deleted.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, FirmAdmin, SSTAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The ID of the company that owns this contact.
     * @param int id The ID of the contact you wish to delete.
   * @return object[]
   */},{key:'deleteContact',value:function deleteContact(){var _ref61=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref61.companyId,id=_ref61.id;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/contacts/'+id,parameters:{}});return this.restCall({url:path,verb:'delete',payload:null});}/**
   * Retrieve a single contact
   *
   * Get the contact object identified by this URL.
     * A 'contact' is a person associated with a company who is designated to handle certain responsibilities of
     * a tax collecting and filing entity.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, FirmAdmin, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param int companyId The ID of the company for this contact
     * @param int id The primary key of this contact
   * @return object
   */},{key:'getContact',value:function getContact(){var _ref62=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref62.companyId,id=_ref62.id;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/contacts/'+id,parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve contacts for this company
   *
   * List all contact objects assigned to this company.
     *  
     * Search for specific objects using the criteria in the `$filter` parameter; full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .
     * Paginate your results using the `$top`, `$skip`, and `$orderby` parameters.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, FirmAdmin, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param int companyId The ID of the company that owns these contacts
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listContactsByCompany',value:function listContactsByCompany(){var _ref63=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref63.companyId,filter=_ref63.filter,top=_ref63.top,skip=_ref63.skip,orderBy=_ref63.orderBy;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/contacts',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve all contacts
   *
   * Get multiple contact objects across all companies.
     * A 'contact' is a person associated with a company who is designated to handle certain responsibilities of
     * a tax collecting and filing entity.
     *  
     * Search for specific objects using the criteria in the `$filter` parameter; full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .
     * Paginate your results using the `$top`, `$skip`, and `$orderby` parameters.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, FirmAdmin, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'queryContacts',value:function queryContacts(){var _ref64=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref64.filter,top=_ref64.top,skip=_ref64.skip,orderBy=_ref64.orderBy;var path=this.buildUrl({url:'/api/v2/contacts',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Update a single contact
   *
   * Replace the existing contact object at this URL with an updated object.
     * A 'contact' is a person associated with a company who is designated to handle certain responsibilities of
     * a tax collecting and filing entity.
     * All data from the existing object will be replaced with data in the object you PUT.
     * To set a field's value to null, you may either set its value to null or omit that field from the object you post.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, FirmAdmin, SSTAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The ID of the company that this contact belongs to.
     * @param int id The ID of the contact you wish to update
     * @param object model The contact you wish to update.
   * @return object
   */},{key:'updateContact',value:function updateContact(){var _ref65=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref65.companyId,id=_ref65.id,model=_ref65.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/contacts/'+id,parameters:{}});return this.restCall({url:path,verb:'put',payload:model});}/**
   * Create customers for this company
   *
   * Create one or more customers for this company.
     *  
     * A customer object defines information about a person or business that purchases products from your
     * company. When you create a tax transaction in AvaTax, you can use the `customerCode` from this
     * record in your `CreateTransaction` API call. AvaTax will search for this `customerCode` value and
     * identify any certificates linked to this `customer` object. If any certificate applies to the transaction,
     * AvaTax will record the appropriate elements of the transaction as exempt and link it to the `certificate`.
     *  
     * A nested object such as CustomFields could be specified and created along with the customer object. To fetch the
     * nested object, please call 'GetCustomer' API with appropriate $include parameters.
     *  
     * Using exemption certificates endpoints requires setup of an auditable document storage for each company that will use certificates.
     * Companies that do not have this storage system set up will receive the error `CertCaptureNotConfiguredError` when they call exemption
     * certificate related APIs. To check if this company is set up, call `GetCertificateSetup`. To request setup of the auditable document
     * storage for this company, call `RequestCertificateSetup`.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The unique ID number of the company that recorded this customer
     * @param object[] model The list of customer objects to be created
   * @return object[]
   */},{key:'createCustomers',value:function createCustomers(){var _ref66=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref66.companyId,model=_ref66.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/customers',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Delete a customer record
   *
   * Deletes the customer object referenced by this URL.
     *  
     * A customer object defines information about a person or business that purchases products from your
     * company. When you create a tax transaction in AvaTax, you can use the `customerCode` from this
     * record in your `CreateTransaction` API call. AvaTax will search for this `customerCode` value and
     * identify any certificates linked to this `customer` object. If any certificate applies to the transaction,
     * AvaTax will record the appropriate elements of the transaction as exempt and link it to the `certificate`.
     *  
     * Using exemption certificates endpoints requires setup of an auditable document storage for each company that will use certificates.
     * Companies that do not have this storage system set up will receive the error `CertCaptureNotConfiguredError` when they call exemption
     * certificate related APIs. To check if this company is set up, call `GetCertificateSetup`. To request setup of the auditable document
     * storage for this company, call `RequestCertificateSetup`.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The unique ID number of the company that recorded this customer
     * @param string customerCode The unique code representing this customer
   * @return object
   */},{key:'deleteCustomer',value:function deleteCustomer(){var _ref67=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref67.companyId,customerCode=_ref67.customerCode;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/customers/'+customerCode,parameters:{}});return this.restCall({url:path,verb:'delete',payload:null});}/**
   * Retrieve a single customer
   *
   * Retrieve the customer identified by this URL.
     *  
     * A customer object defines information about a person or business that purchases products from your
     * company. When you create a tax transaction in AvaTax, you can use the `customerCode` from this
     * record in your `CreateTransaction` API call. AvaTax will search for this `customerCode` value and
     * identify any certificates linked to this customer object. If any certificate applies to the transaction,
     * AvaTax will record the appropriate elements of the transaction as exempt and link it to the `certificate`.
     *  
     * You can use the `$include` parameter to fetch the following additional objects for expansion:
     *  
     * * Certificates - Fetch a list of certificates linked to this customer.
     * * CustomFields - Fetch a list of custom fields associated to this customer.
     * * attributes - Retrieves all attributes applied to the customer.
     *  
     * Using exemption certificates endpoints requires setup of an auditable document storage for each company that will use certificates.
     * Companies that do not have this storage system set up will receive the error `CertCaptureNotConfiguredError` when they call exemption
     * certificate related APIs. To check if this company is set up, call `GetCertificateSetup`. To request setup of the auditable document
     * storage for this company, call `RequestCertificateSetup`.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The unique ID number of the company that recorded this customer
     * @param string customerCode The unique code representing this customer
     * @param string include Specify optional additional objects to include in this fetch request
   * @return object
   */},{key:'getCustomer',value:function getCustomer(){var _ref68=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref68.companyId,customerCode=_ref68.customerCode,include=_ref68.include;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/customers/'+customerCode,parameters:{$include:include}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Link attributes to a customer
   *
   * Link one or many attributes to a customer.
     *  
     * A customer may have multiple attributes that control its behavior. You may link or unlink attributes to a
     * customer at any time. The full list of defined attributes may be found using `QueryCompanyCustomerAttributes` API.
     *  
     * A customer object defines information about a person or business that purchases products from your
     * company. When you create a tax transaction in AvaTax, you can use the `customerCode` from this
     * record in your `CreateTransaction` API call. AvaTax will search for this `customerCode` value and
     * identify any certificates linked to this customer object. If any certificate applies to the transaction,
     * AvaTax will record the appropriate elements of the transaction as exempt and link it to the `certificate`.
     *  
     * Using exemption certificates endpoints requires setup of an auditable document storage for each company that will use certificates.
     * Companies that do not have this storage system set up will receive the error `CertCaptureNotConfiguredError` when they call exemption
     * certificate related APIs. To check if this company is set up, call `GetCertificateSetup`. To request setup of the auditable document
     * storage for this company, call `RequestCertificateSetup`.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The unique ID number of the company that recorded the provided customer
     * @param string customerCode The unique code representing the current customer
     * @param object[] model The list of attributes to link to the customer.
   * @return FetchResult
   */},{key:'linkAttributesToCustomer',value:function linkAttributesToCustomer(){var _ref69=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref69.companyId,customerCode=_ref69.customerCode,model=_ref69.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/customers/'+customerCode+'/attributes/link',parameters:{}});return this.restCall({url:path,verb:'put',payload:model});}/**
   * Link certificates to a customer
   *
   * Link one or more certificates to a customer.
     *  
     * A customer object defines information about a person or business that purchases products from your
     * company. When you create a tax transaction in AvaTax, you can use the `customerCode` from this
     * record in your `CreateTransaction` API call. AvaTax will search for this `customerCode` value and
     * identify any certificates linked to this `customer` object. If any certificate applies to the transaction,
     * AvaTax will record the appropriate elements of the transaction as exempt and link it to the `certificate`.
     *  
     * Using exemption certificates endpoints requires setup of an auditable document storage for each company that will use certificates.
     * Companies that do not have this storage system set up will receive the error `CertCaptureNotConfiguredError` when they call exemption
     * certificate related APIs. To check if this company is set up, call `GetCertificateSetup`. To request setup of the auditable document
     * storage for this company, call `RequestCertificateSetup`.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The unique ID number of the company that recorded this customer
     * @param string customerCode The unique code representing this customer
     * @param object model The list of certificates to link to this customer
   * @return FetchResult
   */},{key:'linkCertificatesToCustomer',value:function linkCertificatesToCustomer(){var _ref70=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref70.companyId,customerCode=_ref70.customerCode,model=_ref70.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/customers/'+customerCode+'/certificates/link',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Link two customer records together
   *
   * Links a Ship-To customer record with a Bill-To customer record.
     *  
     * Customer records represent businesses or individuals who can provide exemption certificates. Some customers
     * may have certificates that are linked to their shipping address or their billing address. To group these
     * customer records together, you may link multiple bill-to and ship-to addresses together to represent a single
     * entity that has multiple different addresses of different kinds.
     *  
     * In general, a customer will have only one primary billing address and multiple ship-to addresses, representing
     * all of the different locations where they receive goods. To facilitate this type of customer, you can send in
     * one bill-to customer code and multiple ship-to customer codes in a single API call.
     *  
     * Note that you can only link a ship-to customer record to a bill-to customer record. You may not link two customers
     * of the same kind together.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The unique ID number of the company defining customers.
     * @param string code The code of the bill-to customer to link.
     * @param object model A list of information about ship-to customers to link to this bill-to customer.
   * @return object
   */},{key:'linkShipToCustomersToBillCustomer',value:function linkShipToCustomersToBillCustomer(){var _ref71=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref71.companyId,code=_ref71.code,model=_ref71.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/customers/billto/'+code+'/shipto/link',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Retrieve a customer's attributes
   *
   * Retrieve the attributes linked to the customer identified by this URL.
     *  
     * A customer may have multiple attributes that control its behavior. You may link or unlink attributes to a
     * customer at any time. The full list of defined attributes may be found using `QueryCompanyCustomerAttributes` API.
     *  
     * A customer object defines information about a person or business that purchases products from your
     * company. When you create a tax transaction in AvaTax, you can use the `customerCode` from this
     * record in your `CreateTransaction` API call. AvaTax will search for this `customerCode` value and
     * identify any certificates linked to this customer object. If any certificate applies to the transaction,
     * AvaTax will record the appropriate elements of the transaction as exempt and link it to the `certificate`.
     *  
     * Using exemption certificates endpoints requires setup of an auditable document storage for each company that will use certificates.
     * Companies that do not have this storage system set up will receive the error `CertCaptureNotConfiguredError` when they call exemption
     * certificate related APIs. To check if this company is set up, call `GetCertificateSetup`. To request setup of the auditable document
     * storage for this company, call `RequestCertificateSetup`.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The unique ID number of the company that recorded the provided customer
     * @param string customerCode The unique code representing the current customer
   * @return FetchResult
   */},{key:'listAttributesForCustomer',value:function listAttributesForCustomer(){var _ref72=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref72.companyId,customerCode=_ref72.customerCode;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/customers/'+customerCode+'/attributes',parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * List certificates linked to a customer
   *
   * List all certificates linked to a customer.
     *  
     * A customer object defines information about a person or business that purchases products from your
     * company. When you create a tax transaction in AvaTax, you can use the `customerCode` from this
     * record in your `CreateTransaction` API call. AvaTax will search for this `customerCode` value and
     * identify any certificates linked to this `customer` object. If any certificate applies to the transaction,
     * AvaTax will record the appropriate elements of the transaction as exempt and link it to the `certificate`.
     *  
     * Using exemption certificates endpoints requires setup of an auditable document storage for each company that will use certificates.
     * Companies that do not have this storage system set up will receive the error `CertCaptureNotConfiguredError` when they call exemption
     * certificate related APIs. To check if this company is set up, call `GetCertificateSetup`. To request setup of the auditable document
     * storage for this company, call `RequestCertificateSetup`.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The unique ID number of the company that recorded this customer
     * @param string customerCode The unique code representing this customer
     * @param string include OPTIONAL: A comma separated list of special fetch options. You can specify one or more of the following:      * customers - Retrieves the list of customers linked to the certificate.   * po_numbers - Retrieves all PO numbers tied to the certificate.   * attributes - Retrieves all attributes applied to the certificate.
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* exemptionNumber, status, ecmsId, ecmsStatus, pdf, pages
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listCertificatesForCustomer',value:function listCertificatesForCustomer(){var _ref73=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref73.companyId,customerCode=_ref73.customerCode,include=_ref73.include,filter=_ref73.filter,top=_ref73.top,skip=_ref73.skip,orderBy=_ref73.orderBy;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/customers/'+customerCode+'/certificates',parameters:{$include:include,$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * List valid certificates for a location
   *
   * List valid certificates linked to a customer in a particular country and region.
     *  
     * This API is intended to help identify whether a customer has already provided a certificate that
     * applies to a particular country and region. This API is intended to help you remind a customer
     * when they have or have not provided copies of their exemption certificates to you during the sales
     * order process.
     *  
     * If a customer does not have a certificate on file and they wish to provide one, you should send the customer
     * a CertExpress invitation link so that the customer can upload proof of their exemption certificate. Please
     * see the `CreateCertExpressInvitation` API to create an invitation link for this customer.
     *  
     * Using exemption certificates endpoints requires setup of an auditable document storage for each company that will use certificates.
     * Companies that do not have this storage system set up will receive the error `CertCaptureNotConfiguredError` when they call exemption
     * certificate related APIs. To check if this company is set up, call `GetCertificateSetup`. To request setup of the auditable document
     * storage for this company, call `RequestCertificateSetup`.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The unique ID number of the company that recorded this customer
     * @param string customerCode The unique code representing this customer
     * @param string country Search for certificates matching this country. Uses the ISO 3166 two character country code.
     * @param string region Search for certificates matching this region. Uses the ISO 3166 two or three character state, region, or province code.
   * @return object
   */},{key:'listValidCertificatesForCustomer',value:function listValidCertificatesForCustomer(){var _ref74=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref74.companyId,customerCode=_ref74.customerCode,country=_ref74.country,region=_ref74.region;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/customers/'+customerCode+'/certificates/'+country+'/'+region,parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * List all customers for this company
   *
   * List all customers recorded by this company matching the specified criteria.
     *  
     * A customer object defines information about a person or business that purchases products from your
     * company. When you create a tax transaction in AvaTax, you can use the `customerCode` from this
     * record in your `CreateTransaction` API call. AvaTax will search for this `customerCode` value and
     * identify any certificates linked to this `customer` object. If any certificate applies to the transaction,
     * AvaTax will record the appropriate elements of the transaction as exempt and link it to the `certificate`.
     *  
     * You can use the `$include` parameter to fetch the following additional objects for expansion:
     *  
     * * Certificates - Fetch a list of certificates linked to this customer.
     * * attributes - Retrieves all attributes applied to the customer.
     *  
     * Using exemption certificates endpoints requires setup of an auditable document storage for each company that will use certificates.
     * Companies that do not have this storage system set up will receive the error `CertCaptureNotConfiguredError` when they call exemption
     * certificate related APIs. To check if this company is set up, call `GetCertificateSetup`. To request setup of the auditable document
     * storage for this company, call `RequestCertificateSetup`.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The unique ID number of the company that recorded this customer
     * @param string include OPTIONAL - You can specify the value `certificates` to fetch information about certificates linked to the customer.
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* shipTos
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'queryCustomers',value:function queryCustomers(){var _ref75=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref75.companyId,include=_ref75.include,filter=_ref75.filter,top=_ref75.top,skip=_ref75.skip,orderBy=_ref75.orderBy;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/customers',parameters:{$include:include,$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Unlink attributes from a customer
   *
   * Unlink one or many attributes from a customer.
     *  
     * A customer may have multiple attributes that control its behavior. You may link or unlink attributes to a
     * customer at any time. The full list of defined attributes may be found using `QueryCompanyCustomerAttributes` API.
     *  
     * A customer object defines information about a person or business that purchases products from your
     * company. When you create a tax transaction in AvaTax, you can use the `customerCode` from this
     * record in your `CreateTransaction` API call. AvaTax will search for this `customerCode` value and
     * identify any certificates linked to this customer object. If any certificate applies to the transaction,
     * AvaTax will record the appropriate elements of the transaction as exempt and link it to the `certificate`.
     *  
     * Using exemption certificates endpoints requires setup of an auditable document storage for each company that will use certificates.
     * Companies that do not have this storage system set up will receive the error `CertCaptureNotConfiguredError` when they call exemption
     * certificate related APIs. To check if this company is set up, call `GetCertificateSetup`. To request setup of the auditable document
     * storage for this company, call `RequestCertificateSetup`.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The unique ID number of the company that recorded the customer
     * @param string customerCode The unique code representing the current customer
     * @param object[] model The list of attributes to unlink from the customer.
   * @return FetchResult
   */},{key:'unlinkAttributesFromCustomer',value:function unlinkAttributesFromCustomer(){var _ref76=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref76.companyId,customerCode=_ref76.customerCode,model=_ref76.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/customers/'+customerCode+'/attributes/unlink',parameters:{}});return this.restCall({url:path,verb:'put',payload:model});}/**
   * Unlink certificates from a customer
   *
   * Remove one or more certificates to a customer.
     *  
     * A customer object defines information about a person or business that purchases products from your
     * company. When you create a tax transaction in AvaTax, you can use the `customerCode` from this
     * record in your `CreateTransaction` API call. AvaTax will search for this `customerCode` value and
     * identify any certificates linked to this `customer` object. If any certificate applies to the transaction,
     * AvaTax will record the appropriate elements of the transaction as exempt and link it to the `certificate`.
     *  
     * Using exemption certificates endpoints requires setup of an auditable document storage for each company that will use certificates.
     * Companies that do not have this storage system set up will receive the error `CertCaptureNotConfiguredError` when they call exemption
     * certificate related APIs. To check if this company is set up, call `GetCertificateSetup`. To request setup of the auditable document
     * storage for this company, call `RequestCertificateSetup`.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The unique ID number of the company that recorded this customer
     * @param string customerCode The unique code representing this customer
     * @param object model The list of certificates to link to this customer
   * @return FetchResult
   */},{key:'unlinkCertificatesFromCustomer',value:function unlinkCertificatesFromCustomer(){var _ref77=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref77.companyId,customerCode=_ref77.customerCode,model=_ref77.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/customers/'+customerCode+'/certificates/unlink',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Update a single customer
   *
   * Replace the customer object at this URL with a new record.
     *  
     * A customer object defines information about a person or business that purchases products from your
     * company. When you create a tax transaction in AvaTax, you can use the `customerCode` from this
     * record in your `CreateTransaction` API call. AvaTax will search for this `customerCode` value and
     * identify any certificates linked to this `customer` object. If any certificate applies to the transaction,
     * AvaTax will record the appropriate elements of the transaction as exempt and link it to the `certificate`.
     *  
     * Using exemption certificates endpoints requires setup of an auditable document storage for each company that will use certificates.
     * Companies that do not have this storage system set up will receive the error `CertCaptureNotConfiguredError` when they call exemption
     * certificate related APIs. To check if this company is set up, call `GetCertificateSetup`. To request setup of the auditable document
     * storage for this company, call `RequestCertificateSetup`.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The unique ID number of the company that recorded this customer
     * @param string customerCode The unique code representing this customer
     * @param object model The new customer model that will replace the existing record at this URL
   * @return object
   */},{key:'updateCustomer',value:function updateCustomer(){var _ref78=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref78.companyId,customerCode=_ref78.customerCode,model=_ref78.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/customers/'+customerCode,parameters:{}});return this.restCall({url:path,verb:'put',payload:model});}/**
   * Create and store new datasources for the respective companies.
   *
   * Create one or more datasource objects.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, FirmAdmin, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The id of the company you which to create the datasources
     * @param object[] model 
   * @return object[]
   */},{key:'createDataSources',value:function createDataSources(){var _ref79=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref79.companyId,model=_ref79.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/datasources',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Delete a datasource by datasource id for a company.
   *
   * Marks the existing datasource for a company as deleted.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, FirmAdmin, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The id of the company the datasource belongs to.
     * @param int id The id of the datasource you wish to delete.
   * @return object[]
   */},{key:'deleteDataSource',value:function deleteDataSource(){var _ref80=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref80.companyId,id=_ref80.id;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/datasources/'+id,parameters:{}});return this.restCall({url:path,verb:'delete',payload:null});}/**
   * Get data source by data source id
   *
   * Retrieve the data source by its unique ID number.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, ProStoresOperator, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId 
     * @param int id data source id
   * @return object
   */},{key:'getDataSourceById',value:function getDataSourceById(){var _ref81=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref81.companyId,id=_ref81.id;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/datasources/'+id,parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve all datasources for this company
   *
   * Gets multiple datasource objects for a given company.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, ProStoresOperator, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The id of the company you wish to retrieve the datasources.
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* isEnabled, isSynced, isAuthorized
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listDataSources',value:function listDataSources(){var _ref82=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref82.companyId,filter=_ref82.filter,top=_ref82.top,skip=_ref82.skip,orderBy=_ref82.orderBy;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/datasources',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve all datasources
   *
   * Get multiple datasource objects across all companies.
     *  
     * Search for specific objects using the criteria in the `$filter` parameter; full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .
     * Paginate your results using the `$top`, `$skip`, and `$orderby` parameters.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, ProStoresOperator, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* isEnabled, isSynced, isAuthorized
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'queryDataSources',value:function queryDataSources(){var _ref83=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref83.filter,top=_ref83.top,skip=_ref83.skip,orderBy=_ref83.orderBy;var path=this.buildUrl({url:'/api/v2/datasources',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Update a datasource identified by id for a company
   *
   * Updates a datasource for a company.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, FirmAdmin, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The id of the company the datasource belongs to.
     * @param int id The id of the datasource you wish to delete.
     * @param object model 
   * @return object
   */},{key:'updateDataSource',value:function updateDataSource(){var _ref84=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref84.companyId,id=_ref84.id,model=_ref84.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/datasources/'+id,parameters:{}});return this.restCall({url:path,verb:'put',payload:model});}/**
   * Lists all parents of an HS Code.
   *
   * Retrieves the specified HS code and all of its parents, reflecting all sections, chapters, headings, and subheadings
     *  
     * a list of HS Codes that are the parents and information branches of the HS Code for the given
     * destination country, if lower detail is available.
     *  
     * This API will include information branches if applicable. These do not have HS Codes and cannot be referenced,
     * but can contain information relevant to deciding the correct HS Code.
     *  
     * This API is intended to be useful to review the descriptive hierarchy of an HS Code, which can be particularly helpful
     * when HS Codes can have multiple levels of generic descriptions.
     * 
     * ### Security Policies
     * 
     * * This API depends on the following active services<br />*Required* (all): AvaTaxGlobal.
   *
   * 
     * @param string country The name or code of the destination country.
     * @param string hsCode The partial or full HS Code for which you would like to view all of the parents.
   * @return FetchResult
   */},{key:'getCrossBorderCode',value:function getCrossBorderCode(){var _ref85=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},country=_ref85.country,hsCode=_ref85.hsCode;var path=this.buildUrl({url:'/api/v2/definitions/crossborder/'+country+'/'+hsCode+'/hierarchy',parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Test whether a form supports online login verification
   *
   * This API is intended to be useful to identify whether the user should be allowed
     * to automatically verify their login and password. This API will provide a result only if the form supports automatic online login verification.
   *
   * 
     * @param string form The name of the form you would like to verify. This is the tax form code
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* taxFormCodes, scraperType, expectedResponseTime, requiredFilingCalendarDataFields
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'getLoginVerifierByForm',value:function getLoginVerifierByForm(){var _ref86=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},form=_ref86.form,filter=_ref86.filter,top=_ref86.top,skip=_ref86.skip,orderBy=_ref86.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/filingcalendars/loginverifiers/'+form,parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the full list of the AvaFile Forms available
   *
   * This API is deprecated.
     *  
     * Please use the ListTaxForms API.
     *  
     * Returns the full list of Avalara-supported AvaFile Forms
     * This API is intended to be useful to identify all the different AvaFile Forms
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* outletTypeId
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listAvaFileForms',value:function listAvaFileForms(){var _ref87=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref87.filter,top=_ref87.top,skip=_ref87.skip,orderBy=_ref87.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/avafileforms',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * List certificate attributes used by a company
   *
   * List the certificate attributes defined by a company either specified by the user or the user's default company.
     *  
     * A certificate may have multiple attributes that control its behavior. You may apply or remove attributes to a
     * certificate at any time.
     *  
     * If you see the 'CertCaptureNotConfiguredError', please use CheckProvision and RequestProvision endpoints to
     * check and provision account.
   *
   * 
     * @param int companyid Id of the company the user wish to fetch the certificates' attributes from. If not specified the API will use user's default company.
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listCertificateAttributes',value:function listCertificateAttributes(){var _ref88=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyid=_ref88.companyid,filter=_ref88.filter,top=_ref88.top,skip=_ref88.skip,orderBy=_ref88.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/certificateattributes',parameters:{companyid:companyid,$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * List the certificate exempt reasons defined by a company
   *
   * List the certificate exempt reasons defined by a company.
     *  
     * An exemption reason defines why a certificate allows a customer to be exempt
     * for purposes of tax calculation.
     *  
     * If you see the 'CertCaptureNotConfiguredError', please use CheckProvision and RequestProvision endpoints to
     * check and provision account.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listCertificateExemptReasons',value:function listCertificateExemptReasons(){var _ref89=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref89.filter,top=_ref89.top,skip=_ref89.skip,orderBy=_ref89.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/certificateexemptreasons',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * List certificate exposure zones used by a company
   *
   * List the certificate exposure zones defined by a company.
     *  
     * An exposure zone is a location where a certificate can be valid. Exposure zones may indicate a taxing
     * authority or other legal entity to which a certificate may apply.
     *  
     * If you see the 'CertCaptureNotConfiguredError', please use CheckProvision and RequestProvision endpoints to
     * check and provision account.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* id, companyId, name, tag, description, created, modified, region, country
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listCertificateExposureZones',value:function listCertificateExposureZones(){var _ref90=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref90.filter,top=_ref90.top,skip=_ref90.skip,orderBy=_ref90.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/certificateexposurezones',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the full list of communications service types
   *
   * Returns full list of service types for a given transaction type ID.
   *
   * 
     * @param int id The transaction type ID to examine
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* requiredParameters
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listCommunicationsServiceTypes',value:function listCommunicationsServiceTypes(){var _ref91=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref91.id,filter=_ref91.filter,top=_ref91.top,skip=_ref91.skip,orderBy=_ref91.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/communications/transactiontypes/'+id+'/servicetypes',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the full list of communications transactiontypes
   *
   * Returns full list of communications transaction types which
     * are accepted in communication tax calculation requests.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listCommunicationsTransactionTypes',value:function listCommunicationsTransactionTypes(){var _ref92=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref92.filter,top=_ref92.top,skip=_ref92.skip,orderBy=_ref92.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/communications/transactiontypes',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the full list of communications transaction/service type pairs
   *
   * Returns full list of communications transaction/service type pairs which
     * are accepted in communication tax calculation requests.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* requiredParameters
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listCommunicationsTSPairs',value:function listCommunicationsTSPairs(){var _ref93=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref93.filter,top=_ref93.top,skip=_ref93.skip,orderBy=_ref93.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/communications/tspairs',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * List all ISO 3166 countries
   *
   * Returns a list of all ISO 3166 country codes, and their US English friendly names.
     * This API is intended to be useful when presenting a dropdown box in your website to allow customers to select a country for
     * a shipping address.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* alpha3Code, isEuropeanUnion, localizedNames, addressesRequireRegion
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listCountries',value:function listCountries(){var _ref94=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref94.filter,top=_ref94.top,skip=_ref94.skip,orderBy=_ref94.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/countries',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * List certificate exposure zones used by a company
   *
   * List available cover letters that can be used when sending invitation to use CertExpress to upload certificates.
     *  
     * The CoverLetter model represents a message sent along with an invitation to use CertExpress to
     * upload certificates. An invitation allows customers to use CertExpress to upload their exemption
     * certificates directly; this cover letter explains why the invitation was sent.
     *  
     * If you see the 'CertCaptureNotConfiguredError', please use CheckProvision and RequestProvision endpoints to
     * check and provision account.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* id, companyId, subject, description, createdDate, modifiedDate, pageCount, templateFilename, version
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listCoverLetters',value:function listCoverLetters(){var _ref95=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref95.filter,top=_ref95.top,skip=_ref95.skip,orderBy=_ref95.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/coverletters',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Lists the next level of HS Codes given a destination country and HS Code prefix.
   *
   * Retrieves a list of HS Codes that are the children of the prefix for the given destination country, if
     * additional children are available.
     *  
     * HS Code is interchangeable with "tariff code" and definitions are generally unique to a destination country.
     * An HS Code describes an item and its eligibility/rate for tariffs. HS Codes are organized by
     * Section/Chapter/Heading/Subheading/Classification.
     *  
     * This API is intended to be useful to identify the correct HS Code to use for your item.
     * 
     * ### Security Policies
     * 
     * * This API depends on the following active services<br />*Required* (all): AvaTaxGlobal.
   *
   * 
     * @param string country The name or code of the destination country.
     * @param string hsCode The Section or partial HS Code for which you would like to view the next level of HS Code detail, if more detail is available.
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* hsCodeSource, system, destinationCountry, isDecisionNode, zeroPaddingCount, isSystemDefined, isTaxable, effDate, endDate, hsCodeSourceLength
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listCrossBorderCodes',value:function listCrossBorderCodes(){var _ref96=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},country=_ref96.country,hsCode=_ref96.hsCode,filter=_ref96.filter,top=_ref96.top,skip=_ref96.skip,orderBy=_ref96.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/crossborder/'+country+'/'+hsCode,parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * List top level HS Code Sections.
   *
   * Returns the full list of top level HS Code Sections. Sections are the broadest level of detail for
     * classifying tariff codes and the items to which they apply. HS Codes are organized
     * by Section/Chapter/Heading/Subheading/Classification.
     *  
     * This API is intended to be useful to identify the top level Sections for
     * further LandedCost HS Code lookups.
     * 
     * ### Security Policies
     * 
     * * This API depends on the following active services<br />*Required* (all): AvaTaxGlobal.
   *
   * 
   * @return FetchResult
   */},{key:'listCrossBorderSections',value:function listCrossBorderSections(){var _ref97=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_objectDestructuringEmpty(_ref97);var path=this.buildUrl({url:'/api/v2/definitions/crossborder/sections',parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * List all ISO 4217 currencies supported by AvaTax.
   *
   * Lists all ISO 4217 currencies supported by AvaTax.
     *  
     * This API produces a list of currency codes that can be used when calling AvaTax. The values from this API can be used to fill out the
     * `currencyCode` field in a `CreateTransactionModel`.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listCurrencies',value:function listCurrencies(){var _ref98=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref98.filter,top=_ref98.top,skip=_ref98.skip,orderBy=_ref98.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/currencies',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the full list of Avalara-supported entity use codes
   *
   * Returns the full list of Avalara-supported entity use codes.
     * Entity/Use Codes are definitions of the entity who is purchasing something, or the purpose for which the transaction
     * is occurring. This information is generally used to determine taxability of the product.
     * In order to facilitate correct reporting of your taxes, you are encouraged to select the proper entity use codes for
     * all transactions that are exempt.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* validCountries
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listEntityUseCodes',value:function listEntityUseCodes(){var _ref99=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref99.filter,top=_ref99.top,skip=_ref99.skip,orderBy=_ref99.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/entityusecodes',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the full list of Avalara-supported filing frequencies.
   *
   * Returns the full list of Avalara-supported filing frequencies.
     * This API is intended to be useful to identify all the different filing frequencies that can be used in notices.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listFilingFrequencies',value:function listFilingFrequencies(){var _ref100=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref100.filter,top=_ref100.top,skip=_ref100.skip,orderBy=_ref100.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/filingfrequencies',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * List jurisdictions based on the filter provided
   *
   * Returns a list of all Avalara-supported taxing jurisdictions.
     *  
     * This API allows you to examine all Avalara-supported jurisdictions. You can filter your search by supplying
     * SQL-like query for fetching only the ones you concerned about. For example: effectiveDate &gt; '2016-01-01'
     *  
     * The rate, salesRate, and useRate fields are not available on the JurisdictionModels returned by this API.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* rate, salesRate, signatureCode, useRate
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listJurisdictions',value:function listJurisdictions(){var _ref101=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref101.filter,top=_ref101.top,skip=_ref101.skip,orderBy=_ref101.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/jurisdictions',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * List jurisdictions near a specific address
   *
   * Returns a list of all Avalara-supported taxing jurisdictions that apply to this address.
     *  
     * This API allows you to identify which jurisdictions are nearby a specific address according to the best available geocoding information.
     * It is intended to allow you to create a "Jurisdiction Override", which allows an address to be configured as belonging to a nearby
     * jurisdiction in AvaTax.
     *  
     * The results of this API call can be passed to the `CreateJurisdictionOverride` API call.
   *
   * 
     * @param string line1 The first address line portion of this address.
     * @param string line2 The second address line portion of this address.
     * @param string line3 The third address line portion of this address.
     * @param string city The city portion of this address.
     * @param string region The region, state, or province code portion of this address.
     * @param string postalCode The postal code or zip code portion of this address.
     * @param string country The two-character ISO-3166 code of the country portion of this address.
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* country, Jurisdictions
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listJurisdictionsByAddress',value:function listJurisdictionsByAddress(){var _ref102=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},line1=_ref102.line1,line2=_ref102.line2,line3=_ref102.line3,city=_ref102.city,region=_ref102.region,postalCode=_ref102.postalCode,country=_ref102.country,filter=_ref102.filter,top=_ref102.top,skip=_ref102.skip,orderBy=_ref102.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/jurisdictionsnearaddress',parameters:{line1:line1,line2:line2,line3:line3,city:city,region:region,postalCode:postalCode,country:country,$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the list of questions that are required for a tax location
   *
   * Returns the list of additional questions you must answer when declaring a location in certain taxing jurisdictions.
     * Some tax jurisdictions require that you register or provide additional information to configure each physical place where
     * your company does business.
     * This information is not usually required in order to calculate tax correctly, but is almost always required to file your tax correctly.
     * You can call this API call for any address and obtain information about what questions must be answered in order to properly
     * file tax in that location.
   *
   * 
     * @param string line1 The first line of this location's address.
     * @param string line2 The second line of this location's address.
     * @param string line3 The third line of this location's address.
     * @param string city The city part of this location's address.
     * @param string region The region, state, or province part of this location's address.
     * @param string postalCode The postal code of this location's address.
     * @param string country The country part of this location's address.
     * @param float latitude Optionally identify the location via latitude/longitude instead of via address.
     * @param float longitude Optionally identify the location via latitude/longitude instead of via address.
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listLocationQuestionsByAddress',value:function listLocationQuestionsByAddress(){var _ref103=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},line1=_ref103.line1,line2=_ref103.line2,line3=_ref103.line3,city=_ref103.city,region=_ref103.region,postalCode=_ref103.postalCode,country=_ref103.country,latitude=_ref103.latitude,longitude=_ref103.longitude,filter=_ref103.filter,top=_ref103.top,skip=_ref103.skip,orderBy=_ref103.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/locationquestions',parameters:{line1:line1,line2:line2,line3:line3,city:city,region:region,postalCode:postalCode,country:country,latitude:latitude,longitude:longitude,$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * List all forms where logins can be verified automatically
   *
   * List all forms where logins can be verified automatically.
     * This API is intended to be useful to identify whether the user should be allowed
     * to automatically verify their login and password.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* taxFormCodes, scraperType, expectedResponseTime, requiredFilingCalendarDataFields
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listLoginVerifiers',value:function listLoginVerifiers(){var _ref104=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref104.filter,top=_ref104.top,skip=_ref104.skip,orderBy=_ref104.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/filingcalendars/loginverifiers',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the full list of Avalara-supported nexus for all countries and regions.
   *
   * Returns the full list of all Avalara-supported nexus for all countries and regions.
     *  
     * This API is intended to be useful if your user interface needs to display a selectable list of nexus.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* streamlinedSalesTax, isSSTActive, taxAuthorityId
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listNexus',value:function listNexus(){var _ref105=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref105.filter,top=_ref105.top,skip=_ref105.skip,orderBy=_ref105.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/nexus',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * List all nexus that apply to a specific address.
   *
   * Returns a list of all Avalara-supported taxing jurisdictions that apply to this address.
     * This API allows you to identify which tax authorities apply to a physical location, salesperson address, or point of sale.
     * In general, it is usually expected that a company will declare nexus in all the jurisdictions that apply to each physical address
     * where the company does business.
     * The results of this API call can be passed to the 'Create Nexus' API call to declare nexus for this address.
   *
   * 
     * @param string line1 The first address line portion of this address.
     * @param string line2 The first address line portion of this address.
     * @param string line3 The first address line portion of this address.
     * @param string city The city portion of this address.
     * @param string region Name or ISO 3166 code identifying the region portion of the address.      This field supports many different region identifiers:   * Two and three character ISO 3166 region codes   * Fully spelled out names of the region in ISO supported languages   * Common alternative spellings for many regions      For a full list of all supported codes and names, please see the Definitions API `ListRegions`.
     * @param string postalCode The postal code or zip code portion of this address.
     * @param string country Name or ISO 3166 code identifying the country portion of this address.      This field supports many different country identifiers:   * Two character ISO 3166 codes   * Three character ISO 3166 codes   * Fully spelled out names of the country in ISO supported languages   * Common alternative spellings for many countries      For a full list of all supported codes and names, please see the Definitions API `ListCountries`.
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* streamlinedSalesTax, isSSTActive, taxAuthorityId
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listNexusByAddress',value:function listNexusByAddress(){var _ref106=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},line1=_ref106.line1,line2=_ref106.line2,line3=_ref106.line3,city=_ref106.city,region=_ref106.region,postalCode=_ref106.postalCode,country=_ref106.country,filter=_ref106.filter,top=_ref106.top,skip=_ref106.skip,orderBy=_ref106.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/nexus/byaddress',parameters:{line1:line1,line2:line2,line3:line3,city:city,region:region,postalCode:postalCode,country:country,$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the full list of Avalara-supported nexus for a country.
   *
   * Returns all Avalara-supported nexus for the specified country.
     *  
     * This API is intended to be useful if your user interface needs to display a selectable list of nexus filtered by country.
   *
   * 
     * @param string country The country in which you want to fetch the system nexus
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* streamlinedSalesTax, isSSTActive, taxAuthorityId
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listNexusByCountry',value:function listNexusByCountry(){var _ref107=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},country=_ref107.country,filter=_ref107.filter,top=_ref107.top,skip=_ref107.skip,orderBy=_ref107.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/nexus/'+country,parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the full list of Avalara-supported nexus for a country and region.
   *
   * Returns all Avalara-supported nexus for the specified country and region.
     *  
     * This API is intended to be useful if your user interface needs to display a selectable list of nexus filtered by country and region.
   *
   * 
     * @param string country The two-character ISO-3166 code for the country.
     * @param string region The two or three character region code for the region.
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* streamlinedSalesTax, isSSTActive, taxAuthorityId
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listNexusByCountryAndRegion',value:function listNexusByCountryAndRegion(){var _ref108=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},country=_ref108.country,region=_ref108.region,filter=_ref108.filter,top=_ref108.top,skip=_ref108.skip,orderBy=_ref108.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/nexus/'+country+'/'+region,parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * List nexus related to a tax form
   *
   * Retrieves a list of nexus related to a tax form.
     *  
     * The concept of `Nexus` indicates a place where your company has sufficient physical presence and is obligated
     * to collect and remit transaction-based taxes.
     *  
     * When defining companies in AvaTax, you must declare nexus for your company in order to correctly calculate tax
     * in all jurisdictions affected by your transactions.
     *  
     * This API is intended to provide useful information when examining a tax form. If you are about to begin filing
     * a tax form, you may want to know whether you have declared nexus in all the jurisdictions related to that tax
     * form in order to better understand how the form will be filled out.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param string formCode The form code that we are looking up the nexus for
   * @return object
   */},{key:'listNexusByFormCode',value:function listNexusByFormCode(){var _ref109=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},formCode=_ref109.formCode;var path=this.buildUrl({url:'/api/v2/definitions/nexus/byform/'+formCode,parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the full list of nexus tax type groups
   *
   * Returns the full list of Avalara-supported nexus tax type groups
     * This API is intended to be useful to identify all the different tax sub-types.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* subscriptionTypeId, subscriptionDescription, tabName, showColumn
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listNexusTaxTypeGroups',value:function listNexusTaxTypeGroups(){var _ref110=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref110.filter,top=_ref110.top,skip=_ref110.skip,orderBy=_ref110.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/nexustaxtypegroups',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the full list of Avalara-supported tax notice customer funding options.
   *
   * Returns the full list of Avalara-supported tax notice customer funding options.
     * This API is intended to be useful to identify all the different notice customer funding options that can be used in notices.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* activeFlag, sortOrder
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listNoticeCustomerFundingOptions',value:function listNoticeCustomerFundingOptions(){var _ref111=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref111.filter,top=_ref111.top,skip=_ref111.skip,orderBy=_ref111.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/noticecustomerfundingoptions',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the full list of Avalara-supported tax notice customer types.
   *
   * Returns the full list of Avalara-supported tax notice customer types.
     * This API is intended to be useful to identify all the different notice customer types.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* activeFlag, sortOrder
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listNoticeCustomerTypes',value:function listNoticeCustomerTypes(){var _ref112=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref112.filter,top=_ref112.top,skip=_ref112.skip,orderBy=_ref112.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/noticecustomertypes',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the full list of Avalara-supported tax notice filing types.
   *
   * Returns the full list of Avalara-supported tax notice filing types.
     * This API is intended to be useful to identify all the different notice filing types that can be used in notices.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* description, activeFlag, sortOrder
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listNoticeFilingtypes',value:function listNoticeFilingtypes(){var _ref113=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref113.filter,top=_ref113.top,skip=_ref113.skip,orderBy=_ref113.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/noticefilingtypes',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the full list of Avalara-supported tax notice priorities.
   *
   * Returns the full list of Avalara-supported tax notice priorities.
     * This API is intended to be useful to identify all the different notice priorities that can be used in notices.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* activeFlag, sortOrder
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listNoticePriorities',value:function listNoticePriorities(){var _ref114=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref114.filter,top=_ref114.top,skip=_ref114.skip,orderBy=_ref114.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/noticepriorities',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the full list of Avalara-supported tax notice reasons.
   *
   * Returns the full list of Avalara-supported tax notice reasons.
     * This API is intended to be useful to identify all the different tax notice reasons.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* description, activeFlag, sortOrder
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listNoticeReasons',value:function listNoticeReasons(){var _ref115=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref115.filter,top=_ref115.top,skip=_ref115.skip,orderBy=_ref115.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/noticereasons',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the full list of Avalara-supported tax notice responsibility ids
   *
   * Returns the full list of Avalara-supported tax notice responsibility ids
     * This API is intended to be useful to identify all the different tax notice responsibilities.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* sortOrder
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listNoticeResponsibilities',value:function listNoticeResponsibilities(){var _ref116=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref116.filter,top=_ref116.top,skip=_ref116.skip,orderBy=_ref116.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/noticeresponsibilities',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the full list of Avalara-supported tax notice root causes
   *
   * Returns the full list of Avalara-supported tax notice root causes
     * This API is intended to be useful to identify all the different tax notice root causes.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* sortOrder
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listNoticeRootCauses',value:function listNoticeRootCauses(){var _ref117=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref117.filter,top=_ref117.top,skip=_ref117.skip,orderBy=_ref117.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/noticerootcauses',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the full list of Avalara-supported tax notice statuses.
   *
   * Returns the full list of Avalara-supported tax notice statuses.
     * This API is intended to be useful to identify all the different tax notice statuses.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* isOpen, sortOrder
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listNoticeStatuses',value:function listNoticeStatuses(){var _ref118=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref118.filter,top=_ref118.top,skip=_ref118.skip,orderBy=_ref118.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/noticestatuses',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the full list of Avalara-supported tax notice types.
   *
   * Returns the full list of Avalara-supported tax notice types.
     * This API is intended to be useful to identify all the different notice types that can be used in notices.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* activeFlag, sortOrder
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listNoticeTypes',value:function listNoticeTypes(){var _ref119=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref119.filter,top=_ref119.top,skip=_ref119.skip,orderBy=_ref119.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/noticetypes',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the full list of Avalara-supported extra parameters for creating transactions.
   *
   * Returns the full list of Avalara-supported extra parameters for the 'Create Transaction' API call.
     * This list of parameters is available for use when configuring your transaction.
     * Some parameters are only available for use if you have subscribed to certain features of AvaTax.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* serviceTypes, regularExpression, values
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listParameters',value:function listParameters(){var _ref120=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref120.filter,top=_ref120.top,skip=_ref120.skip,orderBy=_ref120.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/parameters',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the parameters by companyCode and itemCode.
   *
   * Returns the list of parameters based on the company country and state jurisdiction and the item code.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param string companyCode Company code.
     * @param string itemCode Item code.
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* serviceTypes, regularExpression, values
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listParametersByItem',value:function listParametersByItem(){var _ref121=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyCode=_ref121.companyCode,itemCode=_ref121.itemCode,filter=_ref121.filter,top=_ref121.top,skip=_ref121.skip,orderBy=_ref121.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/parameters/byitem/'+companyCode+'/'+itemCode,parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the full list of Avalara-supported permissions
   *
   * Returns the full list of Avalara-supported permission types.
     * This API is intended to be useful to identify the capabilities of a particular user logon.
   *
   * 
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
   * @return FetchResult
   */},{key:'listPermissions',value:function listPermissions(){var _ref122=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},top=_ref122.top,skip=_ref122.skip;var path=this.buildUrl({url:'/api/v2/definitions/permissions',parameters:{$top:top,$skip:skip}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the full list of Avalara-supported postal codes.
   *
   * Retrieves the list of Avalara-supported postal codes.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listPostalCodes',value:function listPostalCodes(){var _ref123=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref123.filter,top=_ref123.top,skip=_ref123.skip,orderBy=_ref123.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/postalcodes',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * List all customs duty programs recognized by AvaTax
   *
   * List all preferred customs duty programs recognized by AvaTax.
     *  
     * A customs duty program is an optional program you can use to obtain favorable treatment from customs and duty agents.
     * An example of a preferred program is NAFTA, which provides preferential rates for products being shipped from neighboring
     * countries.
     *  
     * To select a preferred program for calculating customs and duty rates, call this API to find the appropriate code for your
     * preferred program. Next, set the parameter `AvaTax.LC.PreferredProgram` in your `CreateTransaction` call to the code of
     * the program.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* effectiveDate, endDate
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listPreferredPrograms',value:function listPreferredPrograms(){var _ref124=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref124.filter,top=_ref124.top,skip=_ref124.skip,orderBy=_ref124.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/preferredprograms',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * List all available product classification systems.
   *
   * List all available product classification systems.
     *  
     * Tax authorities use product classification systems as a way to identify products and associate them with a tax rate.
     * More than one tax authority might use the same product classification system, but they might charge different tax rates for products.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* countries
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listProductClassificationSystems',value:function listProductClassificationSystems(){var _ref125=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref125.filter,top=_ref125.top,skip=_ref125.skip,orderBy=_ref125.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/productclassificationsystems',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * List all product classification systems available to a company based on its nexus.
   *
   * Lists all product classification systems available to a company based on its nexus.
     *  
     * Tax authorities use product classification systems as a way to identify products and associate them with a tax rate.
     * More than one tax authority might use the same product classification system, but they might charge different tax rates for products.
   *
   * 
     * @param string companyCode The company code.
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* countries
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listProductClassificationSystemsByCompany',value:function listProductClassificationSystemsByCompany(){var _ref126=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyCode=_ref126.companyCode,filter=_ref126.filter,top=_ref126.top,skip=_ref126.skip,orderBy=_ref126.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/productclassificationsystems/bycompany/'+companyCode,parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the full list of rate types for each country
   *
   * Returns the full list of Avalara-supported rate type file types
     * This API is intended to be useful to identify all the different rate types.
   *
   * 
     * @param string country The country to examine for rate types
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listRateTypesByCountry',value:function listRateTypesByCountry(){var _ref127=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},country=_ref127.country,filter=_ref127.filter,top=_ref127.top,skip=_ref127.skip,orderBy=_ref127.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/countries/'+country+'/ratetypes',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * List all ISO 3166 regions
   *
   * Returns a list of all ISO 3166 region codes and their US English friendly names.
     * This API is intended to be useful when presenting a dropdown box in your website to allow customers to select a region
     * within the country for a shipping addresses.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* localizedNames
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listRegions',value:function listRegions(){var _ref128=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref128.filter,top=_ref128.top,skip=_ref128.skip,orderBy=_ref128.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/regions',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * List all ISO 3166 regions for a country
   *
   * Returns a list of all ISO 3166 region codes for a specific country code, and their US English friendly names.
     * This API is intended to be useful when presenting a dropdown box in your website to allow customers to select a region
     * within the country for a shipping addresses.
   *
   * 
     * @param string country The country of which you want to fetch ISO 3166 regions
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* localizedNames
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listRegionsByCountry',value:function listRegionsByCountry(){var _ref129=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},country=_ref129.country,filter=_ref129.filter,top=_ref129.top,skip=_ref129.skip,orderBy=_ref129.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/countries/'+country+'/regions',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the full list of Avalara-supported resource file types
   *
   * Returns the full list of Avalara-supported resource file types
     * This API is intended to be useful to identify all the different resource file types.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listResourceFileTypes',value:function listResourceFileTypes(){var _ref130=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref130.filter,top=_ref130.top,skip=_ref130.skip,orderBy=_ref130.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/resourcefiletypes',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the full list of Avalara-supported permissions
   *
   * Returns the full list of Avalara-supported permission types.
     * This API is intended to be useful when designing a user interface for selecting the security role of a user account.
     * Some security roles are restricted for Avalara internal use.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listSecurityRoles',value:function listSecurityRoles(){var _ref131=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref131.filter,top=_ref131.top,skip=_ref131.skip,orderBy=_ref131.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/securityroles',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the full list of Avalara-supported subscription types
   *
   * Returns the full list of Avalara-supported subscription types.
     * This API is intended to be useful for identifying which features you have added to your account.
     * You may always contact Avalara's sales department for information on available products or services.
     * You cannot change your subscriptions directly through the API.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listSubscriptionTypes',value:function listSubscriptionTypes(){var _ref132=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref132.filter,top=_ref132.top,skip=_ref132.skip,orderBy=_ref132.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/subscriptiontypes',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the full list of Avalara-supported tax authorities.
   *
   * Returns the full list of Avalara-supported tax authorities.
     * This API is intended to be useful to identify all the different authorities that receive tax.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listTaxAuthorities',value:function listTaxAuthorities(){var _ref133=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref133.filter,top=_ref133.top,skip=_ref133.skip,orderBy=_ref133.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/taxauthorities',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the full list of Avalara-supported forms for each tax authority.
   *
   * Returns the full list of Avalara-supported forms for each tax authority.
     * This list represents tax forms that Avalara recognizes.
     * Customers who subscribe to Avalara Managed Returns Service can request these forms to be filed automatically
     * based on the customer's AvaTax data.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listTaxAuthorityForms',value:function listTaxAuthorityForms(){var _ref134=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref134.filter,top=_ref134.top,skip=_ref134.skip,orderBy=_ref134.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/taxauthorityforms',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the full list of Avalara-supported tax authority types.
   *
   * Returns the full list of Avalara-supported tax authority types.
     * This API is intended to be useful to identify all the different authority types.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listTaxAuthorityTypes',value:function listTaxAuthorityTypes(){var _ref135=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref135.filter,top=_ref135.top,skip=_ref135.skip,orderBy=_ref135.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/taxauthoritytypes',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the full list of Avalara-supported tax codes.
   *
   * Retrieves the list of Avalara-supported system tax codes.
     * A 'TaxCode' represents a uniquely identified type of product, good, or service.
     * Avalara supports correct tax rates and taxability rules for all TaxCodes in all supported jurisdictions.
     * If you identify your products by tax code in your 'Create Transacion' API calls, Avalara will correctly calculate tax rates and
     * taxability rules for this product in all supported jurisdictions.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listTaxCodes',value:function listTaxCodes(){var _ref136=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref136.filter,top=_ref136.top,skip=_ref136.skip,orderBy=_ref136.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/taxcodes',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the full list of Avalara-supported tax code types.
   *
   * Returns the full list of recognized tax code types.
     * A 'Tax Code Type' represents a broad category of tax codes, and is less detailed than a single TaxCode.
     * This API is intended to be useful for broadly searching for tax codes by tax code type.
   *
   * 
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
   * @return object
   */},{key:'listTaxCodeTypes',value:function listTaxCodeTypes(){var _ref137=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},top=_ref137.top,skip=_ref137.skip;var path=this.buildUrl({url:'/api/v2/definitions/taxcodetypes',parameters:{$top:top,$skip:skip}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the full list of the Tax Forms available
   *
   * Returns the full list of Avalara-supported Tax Forms
     * This API is intended to be useful to identify all the different Tax Forms
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listTaxForms',value:function listTaxForms(){var _ref138=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref138.filter,top=_ref138.top,skip=_ref138.skip,orderBy=_ref138.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/taxforms',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the full list of tax sub types
   *
   * Returns the full list of Avalara-supported tax sub-types
     * This API is intended to be useful to identify all the different tax sub-types.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listTaxSubTypes',value:function listTaxSubTypes(){var _ref139=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref139.filter,top=_ref139.top,skip=_ref139.skip,orderBy=_ref139.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/taxsubtypes',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve the full list of tax type groups
   *
   * Returns the full list of Avalara-supported tax type groups
     * This API is intended to be useful to identify all the different tax type groups.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* subscriptionTypeId, subscriptionDescription, tabName, showColumn, displaySequence
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listTaxTypeGroups',value:function listTaxTypeGroups(){var _ref140=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref140.filter,top=_ref140.top,skip=_ref140.skip,orderBy=_ref140.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/taxtypegroups',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * List all defined units of measurement
   *
   * List all units of measurement systems defined by Avalara.
     *  
     * A unit of measurement system is a method of measuring a quantity, such as distance, mass, or others.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* id
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listUnitOfMeasurement',value:function listUnitOfMeasurement(){var _ref141=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref141.filter,top=_ref141.top,skip=_ref141.skip,orderBy=_ref141.orderBy;var path=this.buildUrl({url:'/api/v2/definitions/unitofmeasurements',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Create one or more DistanceThreshold objects
   *
   * Create one or more DistanceThreshold objects for this company.
     *  
     * A company-distance-threshold model indicates the distance between a company
     * and the taxing borders of various countries. Distance thresholds are necessary
     * to correctly calculate some value-added taxes.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPAdmin, CSPTester, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The unique ID number of the company that owns this DistanceThreshold
     * @param object[] model The DistanceThreshold object or objects you wish to create.
   * @return object[]
   */},{key:'createDistanceThreshold',value:function createDistanceThreshold(){var _ref142=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref142.companyId,model=_ref142.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/distancethresholds',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Delete a single DistanceThreshold object
   *
   * Marks the DistanceThreshold object identified by this URL as deleted.
     *  
     * A company-distance-threshold model indicates the distance between a company
     * and the taxing borders of various countries. Distance thresholds are necessary
     * to correctly calculate some value-added taxes.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPAdmin, CSPTester, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The unique ID number of the company that owns this DistanceThreshold
     * @param int id The unique ID number of the DistanceThreshold object you wish to delete.
   * @return object[]
   */},{key:'deleteDistanceThreshold',value:function deleteDistanceThreshold(){var _ref143=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref143.companyId,id=_ref143.id;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/distancethresholds/'+id,parameters:{}});return this.restCall({url:path,verb:'delete',payload:null});}/**
   * Retrieve a single DistanceThreshold
   *
   * Retrieves a single DistanceThreshold object defined by this URL.
     *  
     * A company-distance-threshold model indicates the distance between a company
     * and the taxing borders of various countries. Distance thresholds are necessary
     * to correctly calculate some value-added taxes.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param int companyId The ID of the company that owns this DistanceThreshold object
     * @param int id The unique ID number referring to this DistanceThreshold object
   * @return object
   */},{key:'getDistanceThreshold',value:function getDistanceThreshold(){var _ref144=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref144.companyId,id=_ref144.id;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/distancethresholds/'+id,parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve all DistanceThresholds for this company.
   *
   * Lists all DistanceThreshold objects that belong to this company.
     *  
     * A company-distance-threshold model indicates the distance between a company
     * and the taxing borders of various countries. Distance thresholds are necessary
     * to correctly calculate some value-added taxes.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param int companyId The ID of the company whose DistanceThreshold objects you wish to list.
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).
     * @param string include A comma separated list of additional data to retrieve.
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listDistanceThresholds',value:function listDistanceThresholds(){var _ref145=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref145.companyId,filter=_ref145.filter,include=_ref145.include,top=_ref145.top,skip=_ref145.skip,orderBy=_ref145.orderBy;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/distancethresholds',parameters:{$filter:filter,$include:include,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve all DistanceThreshold objects
   *
   * Lists all DistanceThreshold objects that belong to this account.
     *  
     * A company-distance-threshold model indicates the distance between a company
     * and the taxing borders of various countries. Distance thresholds are necessary
     * to correctly calculate some value-added taxes.
     *  
     * Search for specific objects using the criteria in the `$filter` parameter; full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .
     * Paginate your results using the `$top`, `$skip`, and `$orderby` parameters.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).
     * @param string include A comma separated list of additional data to retrieve.
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'queryDistanceThresholds',value:function queryDistanceThresholds(){var _ref146=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref146.filter,include=_ref146.include,top=_ref146.top,skip=_ref146.skip,orderBy=_ref146.orderBy;var path=this.buildUrl({url:'/api/v2/distancethresholds',parameters:{$filter:filter,$include:include,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Update a DistanceThreshold object
   *
   * Replace the existing DistanceThreshold object at this URL with an updated object.
     *  
     * A company-distance-threshold model indicates the distance between a company
     * and the taxing borders of various countries. Distance thresholds are necessary
     * to correctly calculate some value-added taxes.
     *  
     * All data from the existing object will be replaced with data in the object you PUT.
     * To set a field's value to null, you may either set its value to null or omit that field from the object you post.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPAdmin, CSPTester, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The unique ID number of the company that owns this DistanceThreshold object.
     * @param int id The unique ID number of the DistanceThreshold object to replace.
     * @param object model The new DistanceThreshold object to store.
   * @return object
   */},{key:'updateDistanceThreshold',value:function updateDistanceThreshold(){var _ref147=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref147.companyId,id=_ref147.id,model=_ref147.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/distancethresholds/'+id,parameters:{}});return this.restCall({url:path,verb:'put',payload:model});}/**
   * Retrieve a list of filed returns for the specified company in the year and month of a given filing period.
   *
   * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, ProStoresOperator, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
     * * This API is available by invitation only.<br />*Exempt security roles*: ComplianceRootUser, ComplianceAdmin, ComplianceUser, TechnicalSupportAdmin, TechnicalSupportUser, CompanyUser, AccountUser, CompanyAdmin, AccountAdmin.
     * * This API depends on the following active services<br />*Returns* (at least one of): Mrs, MRSComplianceManager, AvaTaxCsp.<br />*Firm Managed* (for accounts managed by a firm): ARA, ARAManaged.
   *
   * 
     * @param int companyId The ID of the company that owns these batches
     * @param int endPeriodMonth The month of the period you are trying to retrieve
     * @param int endPeriodYear The year of the period you are trying to retrieve
     * @param string frequency The frequency of the return you are trying to retrieve (See FilingFrequencyId::* for a list of allowable values)
     * @param string status The status of the return(s) you are trying to retrieve (See FilingStatusId::* for a list of allowable values)
     * @param string country The country of the return(s) you are trying to retrieve
     * @param string region The region of the return(s) you are trying to retrieve
     * @param int filingCalendarId The filing calendar id of the return you are trying to retrieve
     * @param string taxformCode The unique tax form code of the form.
   * @return FetchResult
   */},{key:'getFiledReturns',value:function getFiledReturns(){var _ref148=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref148.companyId,endPeriodMonth=_ref148.endPeriodMonth,endPeriodYear=_ref148.endPeriodYear,frequency=_ref148.frequency,status=_ref148.status,country=_ref148.country,region=_ref148.region,filingCalendarId=_ref148.filingCalendarId,taxformCode=_ref148.taxformCode;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/filings/returns/filed',parameters:{endPeriodMonth:endPeriodMonth,endPeriodYear:endPeriodYear,frequency:frequency,status:status,country:country,region:region,filingCalendarId:filingCalendarId,taxformCode:taxformCode}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Approves linkage to a firm for a client account
   *
   * This API enables the account admin of a client account to approve linkage request by a firm.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, FirmAdmin, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int id 
   * @return object
   */},{key:'approveFirmClientLinkage',value:function approveFirmClientLinkage(){var _ref149=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref149.id;var path=this.buildUrl({url:'/api/v2/firmclientlinkages/'+id+'/approve',parameters:{}});return this.restCall({url:path,verb:'post',payload:null});}/**
   * Request a new FirmClient account and create an approved linkage to it
   *
   * This API is for use by Firms only.
     *  
     * Avalara allows firms to manage returns for clients without the clients needing to use AvaTax service.
     * Firms can create accounts of FirmClient for customers they are managing using this API.
     *  
     * Calling this API creates an account with the specified product subscriptions, but without a new user for account.
     * Account is then linked to the Firm so they can managed their returns.
     * You should call this API when a customer does not have an AvaTax account and is to be managed only by the firm.
     *  
     * The created account will be created in `Active` status but there will be no user or license key associated with account.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: FirmAdmin, Registrar, SiteAdmin, SystemAdmin.
   *
   * 
     * @param object model Information about the account you wish to create.
   * @return object
   */},{key:'createAndLinkNewFirmClientAccount',value:function createAndLinkNewFirmClientAccount(){var _ref150=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},model=_ref150.model;var path=this.buildUrl({url:'/api/v2/firmclientlinkages/createandlinkclient',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Links a firm account with the client account
   *
   * This API enables the firm admins/firm users to request the linkage of a firm account and a client account.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: FirmAdmin, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param object model FirmClientLinkageInputModel
   * @return object
   */},{key:'createFirmClientLinkage',value:function createFirmClientLinkage(){var _ref151=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},model=_ref151.model;var path=this.buildUrl({url:'/api/v2/firmclientlinkages',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Delete a linkage
   *
   * This API marks a linkage between a firm and client as deleted.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: FirmAdmin, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int id 
   * @return object[]
   */},{key:'deleteFirmClientLinkage',value:function deleteFirmClientLinkage(){var _ref152=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref152.id;var path=this.buildUrl({url:'/api/v2/firmclientlinkages/'+id,parameters:{}});return this.restCall({url:path,verb:'delete',payload:null});}/**
   * Get linkage between a firm and client by id
   *
   * This API enables the firm admins/firm users to request the linkage of a firm account and a client account.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param int id 
   * @return object
   */},{key:'getFirmClientLinkage',value:function getFirmClientLinkage(){var _ref153=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref153.id;var path=this.buildUrl({url:'/api/v2/firmclientlinkages/'+id,parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * List client linkages for a firm or client
   *
   * This API enables the firm or account users to request the associated linkages to the account.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* firmAccountName, clientAccountName
   * @return FetchResult
   */},{key:'listFirmClientLinkage',value:function listFirmClientLinkage(){var _ref154=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref154.filter;var path=this.buildUrl({url:'/api/v2/firmclientlinkages',parameters:{$filter:filter}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Rejects linkage to a firm for a client account
   *
   * This API enables the account admin of a client account to reject linkage request by a firm.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, FirmAdmin, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int id 
   * @return object
   */},{key:'rejectFirmClientLinkage',value:function rejectFirmClientLinkage(){var _ref155=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref155.id;var path=this.buildUrl({url:'/api/v2/firmclientlinkages/'+id+'/reject',parameters:{}});return this.restCall({url:path,verb:'post',payload:null});}/**
   * Reset linkage status between a client and firm back to requested
   *
   * This API enables the firm admin of a client account to reset a previously created linkage request by a firm.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: FirmAdmin, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int id 
   * @return object
   */},{key:'resetFirmClientLinkage',value:function resetFirmClientLinkage(){var _ref156=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref156.id;var path=this.buildUrl({url:'/api/v2/firmclientlinkages/'+id+'/reset',parameters:{}});return this.restCall({url:path,verb:'post',payload:null});}/**
   * Revokes previously approved linkage to a firm for a client account
   *
   * This API enables the account admin of a client account to revoke a previously approved linkage request by a firm.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, FirmAdmin, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int id 
   * @return object
   */},{key:'revokeFirmClientLinkage',value:function revokeFirmClientLinkage(){var _ref157=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref157.id;var path=this.buildUrl({url:'/api/v2/firmclientlinkages/'+id+'/revoke',parameters:{}});return this.restCall({url:path,verb:'post',payload:null});}/**
   * FREE API - Request a free trial of AvaTax
   *
   * Call this API to obtain a free AvaTax account.
     *  
     * This API is free to use. No authentication credentials are required to call this API. You must read and
     * accept [Avalara's terms and conditions](https://www1.avalara.com/us/en/legal/terms.html) for the account to be
     * created.
     *  
     * If all conditions are met, this API will grant a free trial version of AvaTax. For a list of functionality
     * available in the free trial and its limitations, please see the [AvaTax Developer Website Free Trial page](https://developer.avalara.com/avatax/signup/).
     *  
     * After your free trial concludes, you will still be able to use the [Free AvaTax API Suite](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Free/).
     * 
     * ### Security Policies
     * 
     * * This API may be called without providing authentication credentials.
   *
   * 
     * @param object model Required information to provision a free trial account.
   * @return object
   */},{key:'requestFreeTrial',value:function requestFreeTrial(){var _ref158=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},model=_ref158.model;var path=this.buildUrl({url:'/api/v2/accounts/freetrials/request',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * FREE API - Sales tax rates for a specified address
   *
   * # Free-To-Use
     *  
     * The TaxRates API is a free-to-use, no cost option for estimating sales tax rates.
     * Any customer can request a free AvaTax account and make use of the TaxRates API.
     *  
     * Usage of this API is subject to rate limits. Users who exceed the rate limit will receive HTTP
     * response code 429 - `Too Many Requests`.
     *  
     * This API assumes that you are selling general tangible personal property at a retail point-of-sale
     * location in the United States only.
     *  
     * For more powerful tax calculation, please consider upgrading to the `CreateTransaction` API,
     * which supports features including, but not limited to:
     *  
     * * Nexus declarations
     * * Taxability based on product/service type
     * * Sourcing rules affecting origin/destination states
     * * Customers who are exempt from certain taxes
     * * States that have dollar value thresholds for tax amounts
     * * Refunds for products purchased on a different date
     * * Detailed jurisdiction names and state assigned codes
     * * And more!
     *  
     * Please see [Estimating Tax with REST v2](http://developer.avalara.com/blog/2016/11/04/estimating-tax-with-rest-v2/)
     * for information on how to upgrade to the full AvaTax CreateTransaction API.
   *
   * 
     * @param string line1 The street address of the location.
     * @param string line2 The street address of the location.
     * @param string line3 The street address of the location.
     * @param string city The city name of the location.
     * @param string region Name or ISO 3166 code identifying the region within the country.     This field supports many different region identifiers:   * Two and three character ISO 3166 region codes   * Fully spelled out names of the region in ISO supported languages   * Common alternative spellings for many regions     For a full list of all supported codes and names, please see the Definitions API `ListRegions`.
     * @param string postalCode The postal code of the location.
     * @param string country Name or ISO 3166 code identifying the country.     This field supports many different country identifiers:   * Two character ISO 3166 codes   * Three character ISO 3166 codes   * Fully spelled out names of the country in ISO supported languages   * Common alternative spellings for many countries     For a full list of all supported codes and names, please see the Definitions API `ListCountries`.
   * @return object
   */},{key:'taxRatesByAddress',value:function taxRatesByAddress(){var _ref159=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},line1=_ref159.line1,line2=_ref159.line2,line3=_ref159.line3,city=_ref159.city,region=_ref159.region,postalCode=_ref159.postalCode,country=_ref159.country;var path=this.buildUrl({url:'/api/v2/taxrates/byaddress',parameters:{line1:line1,line2:line2,line3:line3,city:city,region:region,postalCode:postalCode,country:country}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * FREE API - Sales tax rates for a specified country and postal code. This API is only available for US postal codes.
   *
   * # Free-To-Use
     *  
     * This API is only available for a US postal codes.
     *  
     * The TaxRates API is a free-to-use, no cost option for estimating sales tax rates.
     * Any customer can request a free AvaTax account and make use of the TaxRates API.
     *  
     * Usage of this API is subject to rate limits. Users who exceed the rate limit will receive HTTP
     * response code 429 - `Too Many Requests`.
     *  
     * This API assumes that you are selling general tangible personal property at a retail point-of-sale
     * location in the United States only.
     *  
     * For more powerful tax calculation, please consider upgrading to the `CreateTransaction` API,
     * which supports features including, but not limited to:
     *  
     * * Nexus declarations
     * * Taxability based on product/service type
     * * Sourcing rules affecting origin/destination states
     * * Customers who are exempt from certain taxes
     * * States that have dollar value thresholds for tax amounts
     * * Refunds for products purchased on a different date
     * * Detailed jurisdiction names and state assigned codes
     * * And more!
     *  
     * Please see [Estimating Tax with REST v2](http://developer.avalara.com/blog/2016/11/04/estimating-tax-with-rest-v2/)
     * for information on how to upgrade to the full AvaTax CreateTransaction API.
   *
   * 
     * @param string country Name or ISO 3166 code identifying the country.     This field supports many different country identifiers:   * Two character ISO 3166 codes   * Three character ISO 3166 codes   * Fully spelled out names of the country in ISO supported languages   * Common alternative spellings for many countries     For a full list of all supported codes and names, please see the Definitions API `ListCountries`.
     * @param string postalCode The postal code of the location.
   * @return object
   */},{key:'taxRatesByPostalCode',value:function taxRatesByPostalCode(){var _ref160=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},country=_ref160.country,postalCode=_ref160.postalCode;var path=this.buildUrl({url:'/api/v2/taxrates/bypostalcode',parameters:{country:country,postalCode:postalCode}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Request the javascript for a funding setup widget
   *
   * This API is available by invitation only.
     * Companies that use the Avalara Managed Returns or the SST Certified Service Provider services are
     * required to setup their funding configuration before Avalara can begin filing tax returns on their
     * behalf.
     * Funding configuration for each company is set up by submitting a funding setup request, which can
     * be sent either via email or via an embedded HTML widget.
     * When the funding configuration is submitted to Avalara, it will be reviewed by treasury team members
     * before approval.
     * This API returns back the actual javascript code to insert into your application to render the
     * JavaScript funding setup widget inline.
     * Use the 'methodReturn.javaScript' return value to insert this widget into your HTML page.
     * This API requires a subscription to Avalara Managed Returns or SST Certified Service Provider.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, ProStoresOperator, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
     * * This API depends on the following active services<br />*Returns* (at least one of): Mrs, MRSComplianceManager, AvaTaxCsp.<br />*Firm Managed* (for accounts managed by a firm): ARA, ARAManaged.
   *
   * 
     * @param int id The unique ID number of this funding request
   * @return object
   */},{key:'activateFundingRequest',value:function activateFundingRequest(){var _ref161=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref161.id;var path=this.buildUrl({url:'/api/v2/fundingrequests/'+id+'/widget',parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve status about a funding setup request
   *
   * This API is available by invitation only.
     * Companies that use the Avalara Managed Returns or the SST Certified Service Provider services are
     * required to setup their funding configuration before Avalara can begin filing tax returns on their
     * behalf.
     * Funding configuration for each company is set up by submitting a funding setup request, which can
     * be sent either via email or via an embedded HTML widget.
     * When the funding configuration is submitted to Avalara, it will be reviewed by treasury team members
     * before approval.
     * This API checks the status on an existing funding request.
     * This API requires a subscription to Avalara Managed Returns or SST Certified Service Provider.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, FirmAdmin, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
     * * This API depends on the following active services<br />*Returns* (at least one of): Mrs, MRSComplianceManager, AvaTaxCsp.<br />*Firm Managed* (for accounts managed by a firm): ARA, ARAManaged.
   *
   * 
     * @param int id The unique ID number of this funding request
   * @return object
   */},{key:'fundingRequestStatus',value:function fundingRequestStatus(){var _ref162=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref162.id;var path=this.buildUrl({url:'/api/v2/fundingrequests/'+id,parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Delete all classifications for an item
   *
   * Delete all the classifications for a given item.
     *  
     * A classification is the code for a product in a particular tax system. Classifications enable an item to be used in multiple tax systems which may have different tax rates for a product.
     *  
     * When an item is used in a transaction, the applicable classification will be used to determine the appropriate tax rate.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The ID of the company that owns this item.
     * @param int itemId The ID of the item you wish to delete the classifications.
   * @return object[]
   */},{key:'batchDeleteItemClassifications',value:function batchDeleteItemClassifications(){var _ref163=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref163.companyId,itemId=_ref163.itemId;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/items/'+itemId+'/classifications',parameters:{}});return this.restCall({url:path,verb:'delete',payload:null});}/**
   * Delete all parameters for an item
   *
   * Delete all the parameters for a given item.
     *  
     * Some items can be taxed differently depending on the properties of that item, such as the item grade or by a particular measurement of that item. In AvaTax, these tax-affecting properties are called "parameters".
     *  
     * A parameter added to an item will be used by default in tax calculation but will not show on the transaction line referencing the item .
     *  
     * A parameter specified on a transaction line will override an item parameter if they share the same parameter name.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The ID of the company that owns this item.
     * @param int itemId The ID of the item you wish to delete the parameters.
   * @return object[]
   */},{key:'batchDeleteItemParameters',value:function batchDeleteItemParameters(){var _ref164=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref164.companyId,itemId=_ref164.itemId;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/items/'+itemId+'/parameters',parameters:{}});return this.restCall({url:path,verb:'delete',payload:null});}/**
   * Add classifications to an item.
   *
   * Add classifications to an item.
     *  
     * A classification is the code for a product in a particular tax system. Classifications enable an item to be used in multiple tax systems which may have different tax rates for a product.
     *  
     * When an item is used in a transaction, the applicable classification will be used to determine the appropriate tax rate.
     *  
     * An item may only have one classification per tax system.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The company id.
     * @param int itemId The item id.
     * @param object[] model The item classifications you wish to create.
   * @return object[]
   */},{key:'createItemClassifications',value:function createItemClassifications(){var _ref165=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref165.companyId,itemId=_ref165.itemId,model=_ref165.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/items/'+itemId+'/classifications',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Add parameters to an item.
   *
   * Add parameters to an item.
     *  
     * Some items can be taxed differently depending on the properties of that item, such as the item grade or by a particular measurement of that item. In AvaTax, these tax-affecting properties are called "parameters".
     *  
     * A parameter added to an item will be used by default in tax calculation but will not show on the transaction line referencing the item .
     *  
     * A parameter specified on a transaction line will override an item parameter if they share the same parameter name.
     *  
     * To see available parameters for this item, call `/api/v2/definitions/parameters?$filter=attributeType eq Product`
     *  
     * Some parameters are only available for use if you have subscribed to specific AvaTax services. To see which parameters you are able to use, add the query parameter "$showSubscribed=true" to the parameter definition call above.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The ID of the company that owns this item parameter.
     * @param int itemId The item id.
     * @param object[] model The item parameters you wish to create.
   * @return object[]
   */},{key:'createItemParameters',value:function createItemParameters(){var _ref166=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref166.companyId,itemId=_ref166.itemId,model=_ref166.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/items/'+itemId+'/parameters',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Create a new item
   *
   * Creates one or more new item objects attached to this company.
     *  
     * Items are a way of separating your tax calculation process from your tax configuration details. If you choose, you
     * can provide `itemCode` values for each `CreateTransaction()` API call rather than specifying tax codes, parameters, descriptions,
     * and other data fields. AvaTax will automatically look up each `itemCode` and apply the correct tax codes and parameters
     * from the item table instead. This allows your CreateTransaction call to be as simple as possible, and your tax compliance
     * team can manage your item catalog and adjust the tax behavior of items without having to modify your software.
     *  
     * The tax code takes precedence over the tax code id if both are provided.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The ID of the company that owns this item.
     * @param object[] model The item you wish to create.
   * @return object[]
   */},{key:'createItems',value:function createItems(){var _ref167=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref167.companyId,model=_ref167.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/items',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Delete a single item
   *
   * Deletes the item object at this URL.
     *  
     * Items are a way of separating your tax calculation process from your tax configuration details. If you choose, you
     * can provide `itemCode` values for each `CreateTransaction()` API call rather than specifying tax codes, parameters, descriptions,
     * and other data fields. AvaTax will automatically look up each `itemCode` and apply the correct tax codes and parameters
     * from the item table instead. This allows your CreateTransaction call to be as simple as possible, and your tax compliance
     * team can manage your item catalog and adjust the tax behavior of items without having to modify your software.
     *  
     * Deleting an item will also delete the parameters and classifications associated with that item.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The ID of the company that owns this item.
     * @param int id The ID of the item you wish to delete.
   * @return object[]
   */},{key:'deleteItem',value:function deleteItem(){var _ref168=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref168.companyId,id=_ref168.id;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/items/'+id,parameters:{}});return this.restCall({url:path,verb:'delete',payload:null});}/**
   * Delete a single item classification.
   *
   * Delete a single item classification.
     *  
     * A classification is the code for a product in a particular tax system. Classifications enable an item to be used in multiple tax systems which may have different tax rates for a product.
     *  
     * When an item is used in a transaction, the applicable classification will be used to determine the appropriate tax rate.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The company id.
     * @param int itemId The item id.
     * @param int id The item classification id.
   * @return object[]
   */},{key:'deleteItemClassification',value:function deleteItemClassification(){var _ref169=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref169.companyId,itemId=_ref169.itemId,id=_ref169.id;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/items/'+itemId+'/classifications/'+id,parameters:{}});return this.restCall({url:path,verb:'delete',payload:null});}/**
   * Delete a single item parameter
   *
   * Delete a single item parameter.
     *  
     * Some items can be taxed differently depending on the properties of that item, such as the item grade or by a particular measurement of that item. In AvaTax, these tax-affecting properties are called "parameters".
     *  
     * A parameter added to an item will be used by default in tax calculation but will not show on the transaction line referencing the item .
     *  
     * A parameter specified on a transaction line will override an item parameter if they share the same parameter name.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The company id
     * @param int itemId The item id
     * @param int id The parameter id
   * @return object[]
   */},{key:'deleteItemParameter',value:function deleteItemParameter(){var _ref170=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref170.companyId,itemId=_ref170.itemId,id=_ref170.id;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/items/'+itemId+'/parameters/'+id,parameters:{}});return this.restCall({url:path,verb:'delete',payload:null});}/**
   * Retrieve a single item
   *
   * Get the `Item` object identified by this URL.
     *  
     * Items are a way of separating your tax calculation process from your tax configuration details. If you choose, you
     * can provide `itemCode` values for each `CreateTransaction()` API call rather than specifying tax codes, parameters, descriptions,
     * and other data fields. AvaTax will automatically look up each `itemCode` and apply the correct tax codes and parameters
     * from the item table instead. This allows your CreateTransaction call to be as simple as possible, and your tax compliance
     * team can manage your item catalog and adjust the tax behavior of items without having to modify your software.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param int companyId The ID of the company that owns this item object
     * @param int id The primary key of this item
     * @param string include A comma separated list of additional data to retrieve.
   * @return object
   */},{key:'getItem',value:function getItem(){var _ref171=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref171.companyId,id=_ref171.id,include=_ref171.include;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/items/'+id,parameters:{$include:include}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve a single item classification.
   *
   * Retrieve a single item classification.
     *  
     * A classification is the code for a product in a particular tax system. Classifications enable an item to be used in multiple tax systems which may have different tax rates for a product.
     *  
     * When an item is used in a transaction, the applicable classification will be used to determine the appropriate tax rate.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param int companyId The company id.
     * @param int itemId The item id.
     * @param int id The item classification id.
   * @return object
   */},{key:'getItemClassification',value:function getItemClassification(){var _ref172=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref172.companyId,itemId=_ref172.itemId,id=_ref172.id;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/items/'+itemId+'/classifications/'+id,parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve a single item parameter
   *
   * Retrieve a single item parameter.
     *  
     * Some items can be taxed differently depending on the properties of that item, such as the item grade or by a particular measurement of that item. In AvaTax, these tax-affecting properties are called "parameters".
     *  
     * A parameter added to an item will be used by default in tax calculation but will not show on the transaction line referencing the item .
     *  
     * A parameter specified on a transaction line will override an item parameter if they share the same parameter name.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param int companyId The company id
     * @param int itemId The item id
     * @param int id The parameter id
   * @return object
   */},{key:'getItemParameter',value:function getItemParameter(){var _ref173=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref173.companyId,itemId=_ref173.itemId,id=_ref173.id;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/items/'+itemId+'/parameters/'+id,parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve classifications for an item.
   *
   * List classifications for an item.
     *  
     * A classification is the code for a product in a particular tax system. Classifications enable an item to be used in multiple tax systems which may have different tax rates for a product.
     *  
     * When an item is used in a transaction, the applicable classification will be used to determine the appropriate tax rate.
     *  
     * Search for specific objects using the criteria in the `$filter` classification; full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .
     * Paginate your results using the `$top`, `$skip`, and `$orderby` classifications.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param int companyId The company id.
     * @param int itemId The item id.
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* productCode, systemCode
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listItemClassifications',value:function listItemClassifications(){var _ref174=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref174.companyId,itemId=_ref174.itemId,filter=_ref174.filter,top=_ref174.top,skip=_ref174.skip,orderBy=_ref174.orderBy;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/items/'+itemId+'/classifications',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve parameters for an item
   *
   * List parameters for an item.
     *  
     * Some items can be taxed differently depending on the properties of that item, such as the item grade or by a particular measurement of that item. In AvaTax, these tax-affecting properties are called "parameters".
     *  
     * A parameter added to an item will be used by default in tax calculation but will not show on the transaction line referencing the item .
     *  
     * A parameter specified on a transaction line will override an item parameter if they share the same parameter name.
     *  
     * Search for specific objects using the criteria in the `$filter` parameter; full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .
     * Paginate your results using the `$top`, `$skip`, and `$orderby` parameters.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param int companyId The company id
     * @param int itemId The item id
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* name, unit
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listItemParameters',value:function listItemParameters(){var _ref175=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref175.companyId,itemId=_ref175.itemId,filter=_ref175.filter,top=_ref175.top,skip=_ref175.skip,orderBy=_ref175.orderBy;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/items/'+itemId+'/parameters',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve items for this company
   *
   * List all items defined for the current company.
     *  
     * Items are a way of separating your tax calculation process from your tax configuration details. If you choose, you
     * can provide `itemCode` values for each `CreateTransaction()` API call rather than specifying tax codes, parameters, descriptions,
     * and other data fields. AvaTax will automatically look up each `itemCode` and apply the correct tax codes and parameters
     * from the item table instead. This allows your CreateTransaction call to be as simple as possible, and your tax compliance
     * team can manage your item catalog and adjust the tax behavior of items without having to modify your software.
     *  
     * Search for specific objects using the criteria in the `$filter` parameter; full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .
     *  
     * Paginate your results using the `$top`, `$skip`, and `$orderby` parameters.
     *  
     * You may specify one or more of the following values in the `$include` parameter to fetch additional nested data, using commas to separate multiple values:
     *  
     * * Parameters
     * * Classifications
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param int companyId The ID of the company that defined these items
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* taxCode, classifications, parameters
     * @param string include A comma separated list of additional data to retrieve.
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listItemsByCompany',value:function listItemsByCompany(){var _ref176=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref176.companyId,filter=_ref176.filter,include=_ref176.include,top=_ref176.top,skip=_ref176.skip,orderBy=_ref176.orderBy;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/items',parameters:{$filter:filter,$include:include,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve all items
   *
   * Get multiple item objects across all companies.
     *  
     * Items are a way of separating your tax calculation process from your tax configuration details. If you choose, you
     * can provide `itemCode` values for each `CreateTransaction()` API call rather than specifying tax codes, parameters, descriptions,
     * and other data fields. AvaTax will automatically look up each `itemCode` and apply the correct tax codes and parameters
     * from the item table instead. This allows your CreateTransaction call to be as simple as possible, and your tax compliance
     * team can manage your item catalog and adjust the tax behavior of items without having to modify your software.
     *  
     * Search for specific objects using the criteria in the `$filter` parameter; full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .
     *  
     * Paginate your results using the `$top`, `$skip`, and `$orderby` parameters.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* taxCode, classifications, parameters
     * @param string include A comma separated list of additional data to retrieve.
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'queryItems',value:function queryItems(){var _ref177=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref177.filter,include=_ref177.include,top=_ref177.top,skip=_ref177.skip,orderBy=_ref177.orderBy;var path=this.buildUrl({url:'/api/v2/items',parameters:{$filter:filter,$include:include,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Sync items from a product catalog
   *
   * Syncs a list of items with AvaTax without waiting for them to be created. It is ideal for syncing large product catalogs
     * with AvaTax.
     *  
     * Any invalid or duplicate items will be ignored. To diagnose why an item is not created, use the normal create transaction API to receive validation information.
     *  
     * This API is currently limited to 1000 items per call (the limit is subject to change).
     *  
     * Items are a way of separating your tax calculation process from your tax configuration details. If you choose, you
     * can provide `itemCode` values for each `CreateTransaction()` API call rather than specifying tax codes, parameters, descriptions,
     * and other data fields. AvaTax will automatically look up each `itemCode` and apply the correct tax codes and parameters
     * from the item table instead. This allows your CreateTransaction call to be as simple as possible, and your tax compliance
     * team can manage your item catalog and adjust the tax behavior of items without having to modify your software.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The ID of the company that owns this item.
     * @param object model The request object.
   * @return object
   */},{key:'syncItems',value:function syncItems(){var _ref178=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref178.companyId,model=_ref178.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/items/sync',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Update a single item
   *
   * Replace the existing `Item` object at this URL with an updated object.
     *  
     * Items are a way of separating your tax calculation process from your tax configuration details. If you choose, you
     * can provide `itemCode` values for each `CreateTransaction()` API call rather than specifying tax codes, parameters, descriptions,
     * and other data fields. AvaTax will automatically look up each `itemCode` and apply the correct tax codes and parameters
     * from the item table instead. This allows your CreateTransaction call to be as simple as possible, and your tax compliance
     * team can manage your item catalog and adjust the tax behavior of items without having to modify your software.
     *  
     * All data from the existing object will be replaced with data in the object you PUT. To set a field's value to null,
     * you may either set its value to null or omit that field from the object you post.
     *  
     * The tax code takes precedence over the tax code id if both are provided.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The ID of the company that this item belongs to.
     * @param int id The ID of the item you wish to update
     * @param object model The item object you wish to update.
   * @return object
   */},{key:'updateItem',value:function updateItem(){var _ref179=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref179.companyId,id=_ref179.id,model=_ref179.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/items/'+id,parameters:{}});return this.restCall({url:path,verb:'put',payload:model});}/**
   * Update an item classification.
   *
   * Update an item classification.
     *  
     * A classification is the code for a product in a particular tax system. Classifications enable an item to be used in multiple tax systems which may have different tax rates for a product.
     *  
     * When an item is used in a transaction, the applicable classification will be used to determine the appropriate tax rate.
     *  
     * An item may only have one classification per tax system.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The company id.
     * @param int itemId The item id.
     * @param int id The item classification id.
     * @param object model The item object you wish to update.
   * @return object
   */},{key:'updateItemClassification',value:function updateItemClassification(){var _ref180=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref180.companyId,itemId=_ref180.itemId,id=_ref180.id,model=_ref180.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/items/'+itemId+'/classifications/'+id,parameters:{}});return this.restCall({url:path,verb:'put',payload:model});}/**
   * Update an item parameter
   *
   * Update an item parameter.
     *  
     * Some items can be taxed differently depending on the properties of that item, such as the item grade or by a particular measurement of that item. In AvaTax, these tax-affecting properties are called "parameters".
     *  
     * A parameter added to an item will be used by default in tax calculation but will not show on the transaction line referencing the item .
     *  
     * A parameter specified on a transaction line will override an item parameter if they share the same parameter name.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The company id.
     * @param int itemId The item id
     * @param int id The item parameter id
     * @param object model The item object you wish to update.
   * @return object
   */},{key:'updateItemParameter',value:function updateItemParameter(){var _ref181=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref181.companyId,itemId=_ref181.itemId,id=_ref181.id,model=_ref181.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/items/'+itemId+'/parameters/'+id,parameters:{}});return this.restCall({url:path,verb:'put',payload:model});}/**
   * Create one or more overrides
   *
   * Creates one or more jurisdiction override objects for this account.
     *  
     * A Jurisdiction Override is a configuration setting that allows you to select the taxing
     * jurisdiction for a specific address. If you encounter an address that is on the boundary
     * between two different jurisdictions, you can choose to set up a jurisdiction override
     * to switch this address to use different taxing jurisdictions.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int accountId The ID of the account that owns this override
     * @param object[] model The jurisdiction override objects to create
   * @return object[]
   */},{key:'createJurisdictionOverrides',value:function createJurisdictionOverrides(){var _ref182=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},accountId=_ref182.accountId,model=_ref182.model;var path=this.buildUrl({url:'/api/v2/accounts/'+accountId+'/jurisdictionoverrides',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Delete a single override
   *
   * Marks the item object at this URL as deleted.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int accountId The ID of the account that owns this override
     * @param int id The ID of the override you wish to delete
   * @return object[]
   */},{key:'deleteJurisdictionOverride',value:function deleteJurisdictionOverride(){var _ref183=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},accountId=_ref183.accountId,id=_ref183.id;var path=this.buildUrl({url:'/api/v2/accounts/'+accountId+'/jurisdictionoverrides/'+id,parameters:{}});return this.restCall({url:path,verb:'delete',payload:null});}/**
   * Retrieve a single override
   *
   * Get the item object identified by this URL.
     *  
     * A Jurisdiction Override is a configuration setting that allows you to select the taxing
     * jurisdiction for a specific address. If you encounter an address that is on the boundary
     * between two different jurisdictions, you can choose to set up a jurisdiction override
     * to switch this address to use different taxing jurisdictions.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param int accountId The ID of the account that owns this override
     * @param int id The primary key of this override
   * @return object
   */},{key:'getJurisdictionOverride',value:function getJurisdictionOverride(){var _ref184=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},accountId=_ref184.accountId,id=_ref184.id;var path=this.buildUrl({url:'/api/v2/accounts/'+accountId+'/jurisdictionoverrides/'+id,parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve overrides for this account
   *
   * List all jurisdiction override objects defined for this account.
     *  
     * A Jurisdiction Override is a configuration setting that allows you to select the taxing
     * jurisdiction for a specific address. If you encounter an address that is on the boundary
     * between two different jurisdictions, you can choose to set up a jurisdiction override
     * to switch this address to use different taxing jurisdictions.
     *  
     * Search for specific objects using the criteria in the `$filter` parameter; full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .
     * Paginate your results using the `$top`, `$skip`, and `$orderby` parameters.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param int accountId The ID of the account that owns this override
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* country, Jurisdictions
     * @param string include A comma separated list of additional data to retrieve.
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listJurisdictionOverridesByAccount',value:function listJurisdictionOverridesByAccount(){var _ref185=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},accountId=_ref185.accountId,filter=_ref185.filter,include=_ref185.include,top=_ref185.top,skip=_ref185.skip,orderBy=_ref185.orderBy;var path=this.buildUrl({url:'/api/v2/accounts/'+accountId+'/jurisdictionoverrides',parameters:{$filter:filter,$include:include,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve all overrides
   *
   * Get multiple jurisdiction override objects across all companies.
     *  
     * A Jurisdiction Override is a configuration setting that allows you to select the taxing
     * jurisdiction for a specific address. If you encounter an address that is on the boundary
     * between two different jurisdictions, you can choose to set up a jurisdiction override
     * to switch this address to use different taxing jurisdictions.
     *  
     * Search for specific objects using the criteria in the `$filter` parameter; full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .
     * Paginate your results using the `$top`, `$skip`, and `$orderby` parameters.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* country, Jurisdictions
     * @param string include A comma separated list of additional data to retrieve.
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'queryJurisdictionOverrides',value:function queryJurisdictionOverrides(){var _ref186=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref186.filter,include=_ref186.include,top=_ref186.top,skip=_ref186.skip,orderBy=_ref186.orderBy;var path=this.buildUrl({url:'/api/v2/jurisdictionoverrides',parameters:{$filter:filter,$include:include,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Update a single jurisdictionoverride
   *
   * Replace the existing jurisdictionoverride object at this URL with an updated object.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int accountId The ID of the account that this jurisdictionoverride belongs to.
     * @param int id The ID of the jurisdictionoverride you wish to update
     * @param object model The jurisdictionoverride object you wish to update.
   * @return object
   */},{key:'updateJurisdictionOverride',value:function updateJurisdictionOverride(){var _ref187=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},accountId=_ref187.accountId,id=_ref187.id,model=_ref187.model;var path=this.buildUrl({url:'/api/v2/accounts/'+accountId+'/jurisdictionoverrides/'+id,parameters:{}});return this.restCall({url:path,verb:'put',payload:model});}/**
   * Create a new location
   *
   * Create one or more new location objects attached to this company.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPAdmin, CSPTester, FirmAdmin, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The ID of the company that owns this location.
     * @param object[] model The location you wish to create.
   * @return object[]
   */},{key:'createLocations',value:function createLocations(){var _ref188=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref188.companyId,model=_ref188.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/locations',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Delete a single location
   *
   * Mark the location object at this URL as deleted.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPAdmin, CSPTester, FirmAdmin, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The ID of the company that owns this location.
     * @param int id The ID of the location you wish to delete.
   * @return object[]
   */},{key:'deleteLocation',value:function deleteLocation(){var _ref189=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref189.companyId,id=_ref189.id;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/locations/'+id,parameters:{}});return this.restCall({url:path,verb:'delete',payload:null});}/**
   * Retrieve a single location
   *
   * Get the location object identified by this URL.
     * An 'Location' represents a physical address where a company does business.
     * Many taxing authorities require that you define a list of all locations where your company does business.
     * These locations may require additional custom configuration or tax registration with these authorities.
     * For more information on metadata requirements, see the '/api/v2/definitions/locationquestions' API.
     *  
     * You may specify one or more of the following values in the `$include` parameter to fetch additional nested data, using commas to separate multiple values:
     *  
     * * LocationSettings
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, FirmAdmin, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param int companyId The ID of the company that owns this location
     * @param int id The primary key of this location
     * @param string include A comma separated list of additional data to retrieve. You may specify `LocationSettings` to retrieve location settings.
   * @return object
   */},{key:'getLocation',value:function getLocation(){var _ref190=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref190.companyId,id=_ref190.id,include=_ref190.include;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/locations/'+id,parameters:{$include:include}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve locations for this company
   *
   * List all location objects defined for this company.
     * An 'Location' represents a physical address where a company does business.
     * Many taxing authorities require that you define a list of all locations where your company does business.
     * These locations may require additional custom configuration or tax registration with these authorities.
     * For more information on metadata requirements, see the '/api/v2/definitions/locationquestions' API.
     *  
     * Search for specific objects using the criteria in the `$filter` parameter; full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .
     * Paginate your results using the `$top`, `$skip`, and `$orderby` parameters.
     * You may specify one or more of the following values in the `$include` parameter to fetch additional nested data, using commas to separate multiple values:
     *  
     * * LocationSettings
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, FirmAdmin, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param int companyId The ID of the company that owns these locations
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* settings
     * @param string include A comma separated list of additional data to retrieve. You may specify `LocationSettings` to retrieve location settings.
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listLocationsByCompany',value:function listLocationsByCompany(){var _ref191=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref191.companyId,filter=_ref191.filter,include=_ref191.include,top=_ref191.top,skip=_ref191.skip,orderBy=_ref191.orderBy;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/locations',parameters:{$filter:filter,$include:include,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve all locations
   *
   * Get multiple location objects across all companies.
     * An 'Location' represents a physical address where a company does business.
     * Many taxing authorities require that you define a list of all locations where your company does business.
     * These locations may require additional custom configuration or tax registration with these authorities.
     * For more information on metadata requirements, see the '/api/v2/definitions/locationquestions' API.
     *  
     * Search for specific objects using the criteria in the `$filter` parameter; full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .
     * Paginate your results using the `$top`, `$skip`, and `$orderby` parameters.
     *  
     * You may specify one or more of the following values in the `$include` parameter to fetch additional nested data, using commas to separate multiple values:
     *  
     * * LocationSettings
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, FirmAdmin, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* settings
     * @param string include A comma separated list of additional data to retrieve. You may specify `LocationSettings` to retrieve location settings.
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'queryLocations',value:function queryLocations(){var _ref192=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref192.filter,include=_ref192.include,top=_ref192.top,skip=_ref192.skip,orderBy=_ref192.orderBy;var path=this.buildUrl({url:'/api/v2/locations',parameters:{$filter:filter,$include:include,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Update a single location
   *
   * Replace the existing location object at this URL with an updated object.
     * All data from the existing object will be replaced with data in the object you PUT.
     * To set a field's value to null, you may either set its value to null or omit that field from the object you post.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPAdmin, CSPTester, FirmAdmin, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The ID of the company that this location belongs to.
     * @param int id The ID of the location you wish to update
     * @param object model The location you wish to update.
   * @return object
   */},{key:'updateLocation',value:function updateLocation(){var _ref193=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref193.companyId,id=_ref193.id,model=_ref193.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/locations/'+id,parameters:{}});return this.restCall({url:path,verb:'put',payload:model});}/**
   * Validate the location against local requirements
   *
   * Returns validation information for this location.
     * This API call is intended to compare this location against the currently known taxing authority rules and regulations,
     * and provide information about what additional work is required to completely setup this location.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, FirmAdmin, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param int companyId The ID of the company that owns this location
     * @param int id The primary key of this location
   * @return object
   */},{key:'validateLocation',value:function validateLocation(){var _ref194=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref194.companyId,id=_ref194.id;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/locations/'+id+'/validate',parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Adjust a MultiDocument transaction
   *
   * Adjusts the current MultiDocument transaction uniquely identified by this URL.
     *  
     * A transaction represents a unique potentially taxable action that your company has recorded, and transactions include actions like
     * sales, purchases, inventory transfer, and returns (also called refunds).
     *  
     * When you adjust a transaction, that transaction's status is recorded as `Adjusted`.
     *  
     * Both the revisions will be available for retrieval based on their code and ID numbers. Only transactions in Committed status can be reported on a tax filing by Avalara's Managed Returns Service.
     *  
     * Transactions that have been previously reported to a tax authority by Avalara Managed Returns are considered locked and are no longer available for adjustments.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param string code The transaction code for this MultiDocument transaction
     * @param string type The transaction type for this MultiDocument transaction (See DocumentType::* for a list of allowable values)
     * @param string include Specifies objects to include in this fetch call
     * @param object model The adjust request you wish to execute
   * @return object
   */},{key:'adjustMultiDocumentTransaction',value:function adjustMultiDocumentTransaction(){var _ref195=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},code=_ref195.code,type=_ref195.type,include=_ref195.include,model=_ref195.model;var path=this.buildUrl({url:'/api/v2/transactions/multidocument/'+code+'/type/'+type+'/adjust',parameters:{include:include}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Get audit information about a MultiDocument transaction
   *
   * Retrieve audit information about a MultiDocument transaction stored in AvaTax.
     *  
     * The audit API retrieves audit information related to a specific MultiDocument transaction. This audit
     * information includes the following:
     *  
     * * The `code` of the MultiDocument transaction
     * * The `type` of the MultiDocument transaction
     * * The server timestamp representing the exact server time when the transaction was created
     * * The server duration - how long it took to process this transaction
     * * Whether exact API call details were logged
     * * A reconstructed API call showing what the original create call looked like
     *  
     * A transaction represents a unique potentially taxable action that your company has recorded, and transactions include actions like
     * sales, purchases, inventory transfer, and returns (also called refunds).
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, ProStoresOperator, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param string code The transaction code for this MultiDocument transaction
     * @param string type The transaction type for this MultiDocument transaction (See DocumentType::* for a list of allowable values)
   * @return object
   */},{key:'auditMultiDocumentTransaction',value:function auditMultiDocumentTransaction(){var _ref196=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},code=_ref196.code,type=_ref196.type;var path=this.buildUrl({url:'/api/v2/transactions/multidocument/'+code+'/type/'+type+'/audit',parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Commit a MultiDocument transaction
   *
   * Marks a list of transactions by changing its status to `Committed`.
     *  
     * Transactions that are committed are available to be reported to a tax authority by Avalara Managed Returns.
     *  
     * A transaction represents a unique potentially taxable action that your company has recorded, and transactions include actions like
     * sales, purchases, inventory transfer, and returns (also called refunds).
     *  
     * Any changes made to a committed transaction will generate a transaction history.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, ProStoresOperator, SSTAdmin, TechnicalSupportAdmin.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param object model The commit request you wish to execute
   * @return object
   */},{key:'commitMultiDocumentTransaction',value:function commitMultiDocumentTransaction(){var _ref197=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},model=_ref197.model;var path=this.buildUrl({url:'/api/v2/transactions/multidocument/commit',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Create a new MultiDocument transaction
   *
   * Records a new MultiDocument transaction in AvaTax.
     *  
     * A traditional transaction requires exactly two parties: a seller and a buyer. MultiDocument transactions can
     * involve a marketplace of vendors, each of which contributes some portion of the final transaction. Within
     * a MultiDocument transaction, each individual buyer and seller pair are matched up and converted to a separate
     * document. This separation of documents allows each seller to file their taxes separately.
     *  
     * This API will report an error if you attempt to create a transaction when one already exists with the specified `code`.
     * If you would like the API to automatically update the transaction when it already exists, please set the `allowAdjust`
     * value to `true`.
     *  
     * To generate a refund for a transaction, use the `RefundTransaction` API.
     *  
     * The field `type` identifies the kind of transaction - for example, a sale, purchase, or refund. If you do not specify
     * a `type` value, you will receive an estimate of type `SalesOrder`, which will not be recorded.
     *  
     * The origin and destination locations for a transaction must be identified by either address or geocode. For address-based transactions, please
     * provide addresses in the fields `line`, `city`, `region`, `country` and `postalCode`. For geocode-based transactions, please provide the geocode
     * information in the fields `latitude` and `longitude`. If either `latitude` or `longitude` or both are null, the transaction will be calculated
     * using the best available address location information.
     *  
     * You may specify one or more of the following values in the `$include` parameter to fetch additional nested data, using commas to separate multiple values:
     *  
     * * Lines
     * * Details (implies lines)
     * * Summary (implies details)
     * * Addresses
     * * SummaryOnly (omit lines and details - reduces API response size)
     * * LinesOnly (omit details - reduces API response size)
     * * ForceTimeout - Simulates a timeout. This adds a 30 second delay and error to your API call. This can be used to test your code to ensure it can respond correctly in the case of a dropped connection.
     *  
     * If you omit the `$include` parameter, the API will assume you want `Summary,Addresses`.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param string include Specifies objects to include in the response after transaction is created
     * @param object model the multi document transaction model
   * @return object
   */},{key:'createMultiDocumentTransaction',value:function createMultiDocumentTransaction(){var _ref198=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},include=_ref198.include,model=_ref198.model;var path=this.buildUrl({url:'/api/v2/transactions/multidocument',parameters:{$include:include}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Retrieve a MultiDocument transaction
   *
   * Get the current MultiDocument transaction identified by this URL.
     *  
     * If this transaction was adjusted, the return value of this API will be the current transaction with this code.
     *  
     * You may specify one or more of the following values in the `$include` parameter to fetch additional nested data, using commas to separate multiple values:
     *  
     * * Lines
     * * Details (implies lines)
     * * Summary (implies details)
     * * Addresses
     * * SummaryOnly (omit lines and details - reduces API response size)
     * * LinesOnly (omit details - reduces API response size)
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, ProStoresOperator, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param string code 
     * @param string type  (See DocumentType::* for a list of allowable values)
     * @param string include Specifies objects to include in the response after transaction is created
   * @return object
   */},{key:'getMultiDocumentTransactionByCodeAndType',value:function getMultiDocumentTransactionByCodeAndType(){var _ref199=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},code=_ref199.code,type=_ref199.type,include=_ref199.include;var path=this.buildUrl({url:'/api/v2/transactions/multidocument/'+code+'/type/'+type,parameters:{$include:include}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve a MultiDocument transaction by ID
   *
   * Get the unique MultiDocument transaction identified by this URL.
     *  
     * A traditional transaction requires exactly two parties: a seller and a buyer. MultiDocument transactions can
     * involve a marketplace of vendors, each of which contributes some portion of the final transaction. Within
     * a MultiDocument transaction, each individual buyer and seller pair are matched up and converted to a separate
     * document. This separation of documents allows each seller to file their taxes separately.
     *  
     * This endpoint retrieves the exact transaction identified by this ID number even if that transaction was later adjusted
     * by using the `AdjustTransaction` endpoint.
     *  
     * A transaction represents a unique potentially taxable action that your company has recorded, and transactions include actions like
     * sales, purchases, inventory transfer, and returns (also called refunds).
     *  
     * You may specify one or more of the following values in the `$include` parameter to fetch additional nested data, using commas to separate multiple values:
     *  
     * * Lines
     * * Details (implies lines)
     * * Summary (implies details)
     * * Addresses
     * * SummaryOnly (omit lines and details - reduces API response size)
     * * LinesOnly (omit details - reduces API response size)
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, ProStoresOperator, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int id The unique ID number of the MultiDocument transaction to retrieve
     * @param string include Specifies objects to include in the response after transaction is created
   * @return object
   */},{key:'getMultiDocumentTransactionById',value:function getMultiDocumentTransactionById(){var _ref200=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref200.id,include=_ref200.include;var path=this.buildUrl({url:'/api/v2/transactions/multidocument/'+id,parameters:{$include:include}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve all MultiDocument transactions
   *
   * List all MultiDocument transactions within this account.
     *  
     * This endpoint is limited to returning 1,000 MultiDocument transactions at a time. To retrieve more than 1,000 MultiDocument
     * transactions, please use the pagination features of the API.
     *  
     * A transaction represents a unique potentially taxable action that your company has recorded, and transactions include actions like
     * sales, purchases, inventory transfer, and returns (also called refunds).
     *  
     * Search for specific objects using the criteria in the `$filter` parameter; full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .
     * Paginate your results using the `$top`, `$skip`, and `$orderby` parameters.
     *  
     * You may specify one or more of the following values in the `$include` parameter to fetch additional nested data, using commas to separate multiple values:
     *  
     * * Lines
     * * Details (implies lines)
     * * Summary (implies details)
     * * Addresses
     * * SummaryOnly (omit lines and details - reduces API response size)
     * * LinesOnly (omit details - reduces API response size)
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, ProStoresOperator, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* documents
     * @param string include Specifies objects to include in the response after transaction is created
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listMultiDocumentTransactions',value:function listMultiDocumentTransactions(){var _ref201=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref201.filter,include=_ref201.include,top=_ref201.top,skip=_ref201.skip,orderBy=_ref201.orderBy;var path=this.buildUrl({url:'/api/v2/transactions/multidocument',parameters:{$filter:filter,$include:include,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Create a refund for a MultiDocument transaction
   *
   * Create a refund for a MultiDocument transaction.
     *  
     * A traditional transaction requires exactly two parties: a seller and a buyer. MultiDocument transactions can
     * involve a marketplace of vendors, each of which contributes some portion of the final transaction. Within
     * a MultiDocument transaction, each individual buyer and seller pair are matched up and converted to a separate
     * document. This separation of documents allows each seller to file their taxes separately.
     *  
     * The `RefundTransaction` API allows you to quickly and easily create a `ReturnInvoice` representing a refund
     * for a previously created `SalesInvoice` transaction. You can choose to create a full or partial refund, and
     * specify individual line items from the original sale for refund.
     *  
     * The `RefundTransaction` API ensures that the tax amount you refund to the customer exactly matches the tax that
     * was calculated during the original transaction, regardless of any changes to your company's configuration, rules,
     * nexus, or any other setting.
     *  
     * This API is intended to be a shortcut to allow you to quickly and accurately generate a refund for the following
     * common refund scenarios:
     *  
     * * A full refund of a previous sale
     * * Refunding the tax that was charged on a previous sale, when the customer provides an exemption certificate after the purchase
     * * Refunding one or more items (lines) from a previous sale
     * * Granting a customer a percentage refund of a previous sale
     *  
     * For more complex scenarios than the ones above, please use `CreateTransaction` with document type `ReturnInvoice` to
     * create a custom refund transaction.
     *  
     * You may specify one or more of the following values in the `$include` parameter to fetch additional nested data, using commas to separate multiple values:
     *  
     * * Lines
     * * Details (implies lines)
     * * Summary (implies details)
     * * Addresses
     * * SummaryOnly (omit lines and details - reduces API response size)
     * * LinesOnly (omit details - reduces API response size)
     *  
     * If you omit the `$include` parameter, the API will assume you want `Summary,Addresses`.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param string code The code of this MultiDocument transaction
     * @param string type The type of this MultiDocument transaction (See DocumentType::* for a list of allowable values)
     * @param string include Specifies objects to include in the response after transaction is created
     * @param object model Information about the refund to create
   * @return object
   */},{key:'refundMultiDocumentTransaction',value:function refundMultiDocumentTransaction(){var _ref202=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},code=_ref202.code,type=_ref202.type,include=_ref202.include,model=_ref202.model;var path=this.buildUrl({url:'/api/v2/transactions/multidocument/'+code+'/type/'+type+'/refund',parameters:{$include:include}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Verify a MultiDocument transaction
   *
   * Verifies that the MultiDocument transaction uniquely identified by this URL matches certain expected values.
     *  
     * If the transaction does not match these expected values, this API will return an error code indicating which value did not match.
     *  
     * A transaction represents a unique potentially taxable action that your company has recorded, and transactions include actions like
     * sales, purchases, inventory transfer, and returns (also called refunds).
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, ProStoresOperator, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param object model Information from your accounting system to verify against this MultiDocument transaction as it is stored in AvaTax
   * @return object
   */},{key:'verifyMultiDocumentTransaction',value:function verifyMultiDocumentTransaction(){var _ref203=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},model=_ref203.model;var path=this.buildUrl({url:'/api/v2/transactions/multidocument/verify',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Void a MultiDocument transaction
   *
   * Voids the current transaction uniquely identified by this URL.
     *  
     * A transaction represents a unique potentially taxable action that your company has recorded, and transactions include actions like
     * sales, purchases, inventory transfer, and returns (also called refunds).
     *  
     * When you void a transaction, that transaction's status is recorded as `DocVoided`.
     *  
     * Transactions that have been previously reported to a tax authority by Avalara Managed Returns Service are considered `locked`,
     * and they are no longer available to be voided.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, CompanyAdmin, CSPTester, ProStoresOperator, SSTAdmin, TechnicalSupportAdmin.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param string code The transaction code for this MultiDocument transaction
     * @param string type The transaction type for this MultiDocument transaction (See DocumentType::* for a list of allowable values)
     * @param object model The void request you wish to execute
   * @return object
   */},{key:'voidMultiDocumentTransaction',value:function voidMultiDocumentTransaction(){var _ref204=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},code=_ref204.code,type=_ref204.type,model=_ref204.model;var path=this.buildUrl({url:'/api/v2/transactions/multidocument/'+code+'/type/'+type+'/void',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Create a new nexus
   *
   * Creates one or more new nexus declarations attached to this company.
     *  
     * The concept of Nexus indicates a place where your company is legally obligated to collect and remit transactional
     * taxes. The legal requirements for nexus may vary per country and per jurisdiction; please seek advice from your
     * accountant or lawyer prior to declaring nexus.
     *  
     * To create a nexus declaration for your company, you must first call the Definitions API `ListNexus` to obtain a
     * list of Avalara-defined nexus. Once you have determined which nexus you wish to declare, you should customize
     * only the user-selectable fields in this object.
     *  
     * The user selectable fields for the nexus object are `companyId`, `effectiveDate`, `endDate`, `localNexusTypeId`,
     * `taxId`, `nexusTypeId`, `hasPermanentEstablishment`, and `isSellerImporterOfRecord`.
     *  
     * When calling `CreateNexus` or `UpdateNexus`, all values in your nexus object except for the user-selectable fields
     * must match an Avalara-defined system nexus object. You can retrieve a list of Avalara-defined system nexus objects
     * by calling `ListNexus`. If any data does not match, AvaTax may not recognize your nexus declaration.
     *  
     * Please note that nexus changes may not take effect immediately and you should plan to update your nexus settings in advance
     * of calculating tax for a location.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The ID of the company that owns this nexus.
     * @param object[] model The nexus you wish to create.
   * @return object[]
   */},{key:'createNexus',value:function createNexus(){var _ref205=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref205.companyId,model=_ref205.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/nexus',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Creates nexus for a list of addresses.
   *
   * This call is intended to simplify adding all applicable nexus to a company, for an address or addresses. Calling this
     * API declares nexus for this company, for the list of addresses provided,
     * for the date range provided. You may also use this API to extend effective date on an already-declared nexus.
     *  
     * The concept of Nexus indicates a place where your company is legally obligated to collect and remit transactional
     * taxes. The legal requirements for nexus may vary per country and per jurisdiction; please seek advice from your
     * accountant or lawyer prior to declaring nexus.
     *  
     * Note that not all fields within a nexus can be updated; Avalara publishes a list of all defined nexus at the
     * '/api/v2/definitions/nexus' endpoint.
     *  
     * You may only define nexus matching the official list of declared nexus.
     *  
     * Please note that nexus changes may not take effect immediately and you should plan to update your nexus settings in advance
     * of calculating tax for a location.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The ID of the company that will own this nexus.
     * @param object[] model The nexus you wish to create.
   * @return object[]
   */},{key:'declareNexusByAddress',value:function declareNexusByAddress(){var _ref206=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref206.companyId,model=_ref206.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/nexus/byaddress',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Delete a single nexus
   *
   * Marks the existing nexus object at this URL as deleted.
     *  
     * The concept of Nexus indicates a place where your company is legally obligated to collect and remit transactional
     * taxes. The legal requirements for nexus may vary per country and per jurisdiction; please seek advice from your
     * accountant or lawyer prior to declaring nexus.
     *  
     * Please note that nexus changes may not take effect immediately and you should plan to update your nexus settings in advance
     * of calculating tax for a location.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The ID of the company that owns this nexus.
     * @param int id The ID of the nexus you wish to delete.
   * @return object[]
   */},{key:'deleteNexus',value:function deleteNexus(){var _ref207=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref207.companyId,id=_ref207.id;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/nexus/'+id,parameters:{}});return this.restCall({url:path,verb:'delete',payload:null});}/**
   * Retrieve a single nexus
   *
   * Get the nexus object identified by this URL.
     *  
     * The concept of Nexus indicates a place where your company is legally obligated to collect and remit transactional
     * taxes. The legal requirements for nexus may vary per country and per jurisdiction; please seek advice from your
     * accountant or lawyer prior to declaring nexus.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param int companyId The ID of the company that owns this nexus object
     * @param int id The primary key of this nexus
   * @return object
   */},{key:'getNexus',value:function getNexus(){var _ref208=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref208.companyId,id=_ref208.id;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/nexus/'+id,parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * List company nexus related to a tax form
   *
   * Retrieves a list of nexus related to a tax form.
     *  
     * The concept of Nexus indicates a place where your company is legally obligated to collect and remit transactional
     * taxes. The legal requirements for nexus may vary per country and per jurisdiction; please seek advice from your
     * accountant or lawyer prior to declaring nexus.
     *  
     * This API is intended to provide useful information when examining a tax form. If you are about to begin filing
     * a tax form, you may want to know whether you have declared nexus in all the jurisdictions related to that tax
     * form in order to better understand how the form will be filled out.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param int companyId The ID of the company that owns this nexus object
     * @param string formCode The form code that we are looking up the nexus for
   * @return object
   */},{key:'getNexusByFormCode',value:function getNexusByFormCode(){var _ref209=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref209.companyId,formCode=_ref209.formCode;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/nexus/byform/'+formCode,parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve nexus for this company
   *
   * List all nexus objects defined for this company.
     *  
     * The concept of Nexus indicates a place where your company is legally obligated to collect and remit transactional
     * taxes. The legal requirements for nexus may vary per country and per jurisdiction; please seek advice from your
     * accountant or lawyer prior to declaring nexus.
     *  
     * Search for specific objects using the criteria in the `$filter` parameter; full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .
     * Paginate your results using the `$top`, `$skip`, and `$orderby` parameters.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param int companyId The ID of the company that owns these nexus objects
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* streamlinedSalesTax, isSSTActive, taxAuthorityId
     * @param string include A comma separated list of additional data to retrieve.
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listNexusByCompany',value:function listNexusByCompany(){var _ref210=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref210.companyId,filter=_ref210.filter,include=_ref210.include,top=_ref210.top,skip=_ref210.skip,orderBy=_ref210.orderBy;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/nexus',parameters:{$filter:filter,$include:include,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve all nexus
   *
   * Get multiple nexus objects across all companies.
     *  
     * The concept of Nexus indicates a place where your company is legally obligated to collect and remit transactional
     * taxes. The legal requirements for nexus may vary per country and per jurisdiction; please seek advice from your
     * accountant or lawyer prior to declaring nexus.
     *  
     * Search for specific objects using the criteria in the `$filter` parameter; full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .
     * Paginate your results using the `$top`, `$skip`, and `$orderby` parameters.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* streamlinedSalesTax, isSSTActive, taxAuthorityId
     * @param string include A comma separated list of additional data to retrieve.
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'queryNexus',value:function queryNexus(){var _ref211=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref211.filter,include=_ref211.include,top=_ref211.top,skip=_ref211.skip,orderBy=_ref211.orderBy;var path=this.buildUrl({url:'/api/v2/nexus',parameters:{$filter:filter,$include:include,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Update a single nexus
   *
   * Replace the existing nexus declaration object at this URL with an updated object.
     *  
     * The concept of Nexus indicates a place where your company is legally obligated to collect and remit transactional
     * taxes. The legal requirements for nexus may vary per country and per jurisdiction; please seek advice from your
     * accountant or lawyer prior to declaring nexus.
     *  
     * To create a nexus declaration for your company, you must first call the Definitions API `ListNexus` to obtain a
     * list of Avalara-defined nexus. Once you have determined which nexus you wish to declare, you should customize
     * only the user-selectable fields in this object.
     *  
     * The user selectable fields for the nexus object are `companyId`, `effectiveDate`, `endDate`, `localNexusTypeId`,
     * `taxId`, `nexusTypeId`, `hasPermanentEstablishment`, and `isSellerImporterOfRecord`.
     *  
     * When calling `CreateNexus` or `UpdateNexus`, all values in your nexus object except for the user-selectable fields
     * must match an Avalara-defined system nexus object. You can retrieve a list of Avalara-defined system nexus objects
     * by calling `ListNexus`. If any data does not match, AvaTax may not recognize your nexus declaration.
     *  
     * Please note that nexus changes may not take effect immediately and you should plan to update your nexus settings in advance
     * of calculating tax for a location.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The ID of the company that this nexus belongs to.
     * @param int id The ID of the nexus you wish to update
     * @param object model The nexus object you wish to update.
   * @return object
   */},{key:'updateNexus',value:function updateNexus(){var _ref212=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref212.companyId,id=_ref212.id,model=_ref212.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/nexus/'+id,parameters:{}});return this.restCall({url:path,verb:'put',payload:model});}/**
   * Mark a single notification as dismissed.
   *
   * Marks the notification identified by this URL as dismissed.
     *  
     * A notification is a message from Avalara that may have relevance to your business. You may want
     * to regularly review notifications and then dismiss them when you are certain that you have addressed
     * any relevant concerns raised by this notification.
     *  
     * An example of a notification would be a message about new software, or a change to AvaTax that may
     * affect you, or a potential issue with your company's tax profile.
     *  
     * When you dismiss a notification, the notification will track the user and time when it was
     * dismissed. You can then later review which employees of your company dismissed notifications to
     * determine if they were resolved appropriately.
     *  
     * A Global notification with null accountId and companyId cannot be dismissed and will expire within a given time span.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param int id The id of the notification you wish to mark as dismissed.
   * @return object
   */},{key:'dismissNotification',value:function dismissNotification(){var _ref213=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref213.id;var path=this.buildUrl({url:'/api/v2/notifications/'+id+'/dismiss',parameters:{}});return this.restCall({url:path,verb:'put',payload:null});}/**
   * Retrieve a single notification.
   *
   * Retrieve a single notification by its unique ID number.
     *  
     * A notification is a message from Avalara that may have relevance to your business. You may want
     * to regularly review notifications and then dismiss them when you are certain that you have addressed
     * any relevant concerns raised by this notification.
     *  
     * An example of a notification would be a message about new software, or a change to AvaTax that may
     * affect you, or a potential issue with your company's tax profile.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, ProStoresOperator, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param int id The id of the notification to retrieve.
   * @return object
   */},{key:'getNotification',value:function getNotification(){var _ref214=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref214.id;var path=this.buildUrl({url:'/api/v2/notifications/'+id,parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * List all notifications.
   *
   * List all notifications.
     *  
     * A notification is a message from Avalara that may have relevance to your business. You may want
     * to regularly review notifications and then dismiss them when you are certain that you have addressed
     * any relevant concerns raised by this notification.
     *  
     * An example of a notification would be a message about new software, or a change to AvaTax that may
     * affect you, or a potential issue with your company's tax profile.
     *  
     * You may search for specific objects using the criteria in the `$filter` parameter; full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .
     * Paginate your results using the `$top`, `$skip`, and `$orderby` parameters.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, ProStoresOperator, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listNotifications',value:function listNotifications(){var _ref215=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref215.filter,top=_ref215.top,skip=_ref215.skip,orderBy=_ref215.orderBy;var path=this.buildUrl({url:'/api/v2/notifications',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Request a new Avalara account
   *
   * This API is for use by partner provisioning services customers only.
     *  
     * Avalara invites select partners to refer new customers to the AvaTax service using the onboarding features
     * of AvaTax. These partners can create accounts for new customers using this API.
     *  
     * Calling this API creates an account with the specified product subscriptions, but does not configure billing.
     * The customer will receive information from Avalara about how to configure billing for their account.
     * You should call this API when a customer has requested to begin using Avalara services.
     *  
     * If the newly created account owner wishes, they can confirm that they have read and agree to the Avalara
     * terms and conditions. If they do so, they can receive a license key as part of this API and their
     * API will be created in `Active` status. If the customer has not yet read and accepted these terms and
     * conditions, the account will be created in `New` status and they can receive a license key by logging
     * onto the AvaTax website and reviewing terms and conditions online.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, FirmAdmin, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
     * * This API is available by invitation only.
     * * This API is available by invitation only. To request access to this feature, please speak to a business development manager and request access to [Provisioning:RequestNewAccount].
   *
   * 
     * @param object model Information about the account you wish to create and the selected product offerings.
   * @return object
   */},{key:'requestNewAccount',value:function requestNewAccount(){var _ref216=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},model=_ref216.model;var path=this.buildUrl({url:'/api/v2/accounts/request',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Request a new entitilement to an existing customer
   *
   * This API is for use by partner provisioning services customers only. This will allow the partners to allow
     * the add new entitlement to an existing customer
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, FirmAdmin, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
     * * This API is available by invitation only.
     * * This API is available by invitation only. To request access to this feature, please speak to a business development manager and request access to [Provisioning:RequestNewAccount].
   *
   * 
     * @param int id The avatax account id of the customer
     * @param string offer The offer to be added to an already existing customer
   * @return object
   */},{key:'requestNewEntitlement',value:function requestNewEntitlement(){var _ref217=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref217.id,offer=_ref217.offer;var path=this.buildUrl({url:'/api/v2/accounts/'+id+'/entitlements/'+offer,parameters:{}});return this.restCall({url:path,verb:'post',payload:null});}/**
   * Create a new account
   *
   * # For Registrar Use Only
     * This API is for use by Avalara Registrar administrative users only.
     *  
     * Create a single new account object.
     * When creating an account object you may attach subscriptions and users as part of the 'Create' call.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: FirmAdmin, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param object model The account you wish to create.
   * @return object[]
   */},{key:'createAccount',value:function createAccount(){var _ref218=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},model=_ref218.model;var path=this.buildUrl({url:'/api/v2/accounts',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Create new notifications.
   *
   * This API is available by invitation only.
     *  
     * Create a single notification.
     *  
     * A notification is a message from Avalara that may have relevance to your business. You may want
     * to regularly review notifications and then dismiss them when you are certain that you have addressed
     * any relevant concerns raised by this notification.
     *  
     * A Global notification is a message which is directed to all the accounts and is set to expire within
     * a certain time and cannot be dismissed by the user. Make accountId and companyId null to create a global notification.
     *  
     * An example of a notification would be a message about new software, or a change to AvaTax that may
     * affect you, or a potential issue with your company's tax profile.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: FirmAdmin, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
     * * This API is available by invitation only. To request access to this feature, please speak to a business development manager and request access to [NotificationsAPI:Create].
   *
   * 
     * @param object[] model The notifications you wish to create.
   * @return object[]
   */},{key:'createNotifications',value:function createNotifications(){var _ref219=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},model=_ref219.model;var path=this.buildUrl({url:'/api/v2/notifications',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Create a new subscription
   *
   * This API is for use by Avalara Registrar administrative users only.
     *  
     * Create one or more new subscription objects attached to this account.
     * A 'subscription' indicates a licensed subscription to a named Avalara service.
     * To request or remove subscriptions, please contact Avalara sales or your customer account manager.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int accountId The ID of the account that owns this subscription.
     * @param object[] model The subscription you wish to create.
   * @return object[]
   */},{key:'createSubscriptions',value:function createSubscriptions(){var _ref220=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},accountId=_ref220.accountId,model=_ref220.model;var path=this.buildUrl({url:'/api/v2/accounts/'+accountId+'/subscriptions',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Delete a single account
   *
   * # For Registrar Use Only
     * This API is for use by Avalara Registrar administrative users only.
     *  
     * Delete an account.
     * Deleting an account will delete all companies and all account level users attached to this account.
     * 
     * ### Security Policies
     * 
     * * This API requires the user role SystemAdmin.
   *
   * 
     * @param int id The ID of the account you wish to delete.
   * @return object[]
   */},{key:'deleteAccount',value:function deleteAccount(){var _ref221=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref221.id;var path=this.buildUrl({url:'/api/v2/accounts/'+id,parameters:{}});return this.restCall({url:path,verb:'delete',payload:null});}/**
   * Delete a single notification.
   *
   * This API is available by invitation only.
     *  
     * Delete the existing notification identified by this URL.
     *  
     * A notification is a message from Avalara that may have relevance to your business. You may want
     * to regularly review notifications and then dismiss them when you are certain that you have addressed
     * any relevant concerns raised by this notification.
     *  
     * An example of a notification would be a message about new software, or a change to AvaTax that may
     * affect you, or a potential issue with your company's tax profile.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: FirmAdmin, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
     * * This API is available by invitation only. To request access to this feature, please speak to a business development manager and request access to [NotificationsAPI:Create].
   *
   * 
     * @param int id The id of the notification you wish to delete.
   * @return object[]
   */},{key:'deleteNotification',value:function deleteNotification(){var _ref222=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref222.id;var path=this.buildUrl({url:'/api/v2/notifications/'+id,parameters:{}});return this.restCall({url:path,verb:'delete',payload:null});}/**
   * Delete a single subscription
   *
   * # For Registrar Use Only
     * This API is for use by Avalara Registrar administrative users only.
     *  
     * Mark the existing account identified by this URL as deleted.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int accountId The ID of the account that owns this subscription.
     * @param int id The ID of the subscription you wish to delete.
   * @return object[]
   */},{key:'deleteSubscription',value:function deleteSubscription(){var _ref223=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},accountId=_ref223.accountId,id=_ref223.id;var path=this.buildUrl({url:'/api/v2/accounts/'+accountId+'/subscriptions/'+id,parameters:{}});return this.restCall({url:path,verb:'delete',payload:null});}/**
   * Reset a user's password programmatically
   *
   * # For Registrar Use Only
     * This API is for use by Avalara Registrar administrative users only.
     *  
     * Allows a system admin to reset the password for a specific user via the API.
     * This API is only available for Avalara Registrar Admins, and can be used to reset the password of any
     * user based on internal Avalara business processes.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPTester, FirmAdmin, FirmUser, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
     * * This API is available to Avalara system-level (registrar-level) users only.
   *
   * 
     * @param int userId The unique ID of the user whose password will be changed
     * @param boolean unmigrateFromAi If user's password was migrated to AI, undo this.
     * @param object model The new password for this user
   * @return string
   */},{key:'resetPassword',value:function resetPassword(){var _ref224=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},userId=_ref224.userId,unmigrateFromAi=_ref224.unmigrateFromAi,model=_ref224.model;var path=this.buildUrl({url:'/api/v2/passwords/'+userId+'/reset',parameters:{unmigrateFromAi:unmigrateFromAi}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Update a single account
   *
   * # For Registrar Use Only
     * This API is for use by Avalara Registrar administrative users only.
     *  
     * Replace an existing account object with an updated account object.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: FirmAdmin, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int id The ID of the account you wish to update.
     * @param object model The account object you wish to update.
   * @return object
   */},{key:'updateAccount',value:function updateAccount(){var _ref225=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref225.id,model=_ref225.model;var path=this.buildUrl({url:'/api/v2/accounts/'+id,parameters:{}});return this.restCall({url:path,verb:'put',payload:model});}/**
   * Update a single notification.
   *
   * This API is available by invitation only.
     *  
     * Replaces the notification identified by this URL with a new notification.
     *  
     * A notification is a message from Avalara that may have relevance to your business. You may want
     * to regularly review notifications and then dismiss them when you are certain that you have addressed
     * any relevant concerns raised by this notification.
     *  
     * An example of a notification would be a message about new software, or a change to AvaTax that may
     * affect you, or a potential issue with your company's tax profile.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: FirmAdmin, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
     * * This API is available by invitation only. To request access to this feature, please speak to a business development manager and request access to [NotificationsAPI:Create].
   *
   * 
     * @param int id The id of the notification you wish to update.
     * @param object model The notification object you wish to update.
   * @return object
   */},{key:'updateNotification',value:function updateNotification(){var _ref226=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref226.id,model=_ref226.model;var path=this.buildUrl({url:'/api/v2/notifications/'+id,parameters:{}});return this.restCall({url:path,verb:'put',payload:model});}/**
   * Update a single subscription
   *
   * # For Registrar Use Only
     * This API is for use by Avalara Registrar administrative users only.
     *  
     * Replace the existing subscription object at this URL with an updated object.
     * A 'subscription' indicates a licensed subscription to a named Avalara service.
     * To request or remove subscriptions, please contact Avalara sales or your customer account manager.
     * All data from the existing object will be replaced with data in the object you PUT.
     * To set a field's value to null, you may either set its value to null or omit that field from the object you post.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int accountId The ID of the account that this subscription belongs to.
     * @param int id The ID of the subscription you wish to update
     * @param object model The subscription you wish to update.
   * @return object
   */},{key:'updateSubscription',value:function updateSubscription(){var _ref227=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},accountId=_ref227.accountId,id=_ref227.id,model=_ref227.model;var path=this.buildUrl({url:'/api/v2/accounts/'+accountId+'/subscriptions/'+id,parameters:{}});return this.restCall({url:path,verb:'put',payload:model});}/**
   * Download a report
   *
   * This API downloads the file associated with a report.
     *  
     * If the report is not yet complete, you will receive a `ReportNotFinished` error. To check if a report is complete,
     * use the `GetReport` API.
     *  
     * Reports are run as asynchronous report tasks on the server. When complete, the report file will be available for download
     * for up to 30 days after completion. To run an asynchronous report, you should follow these steps:
     *  
     * * Begin a report by calling the report's Initiate API. There is a separate initiate API call for each report type.
     * * In the result of the Initiate API, you receive back a report's `id` value.
     * * Check the status of a report by calling `GetReport` and passing in the report's `id` value.
     * * When a report's status is `Completed`, call `DownloadReport` to retrieve the file.
     *  
     * This API works for all report types.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, ProStoresOperator, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param int id The unique ID number of this report
   * @return object
   */},{key:'downloadReport',value:function downloadReport(){var _ref228=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref228.id;var path=this.buildUrl({url:'/api/v2/reports/'+id+'/attachment',parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve a single report
   *
   * Retrieve a single report by its unique ID number.
     *  
     * Reports are run as asynchronous report tasks on the server. When complete, the report file will be available for download
     * for up to 30 days after completion. To run an asynchronous report, you should follow these steps:
     *  
     * * Begin a report by calling the report's Initiate API. There is a separate initiate API call for each report type.
     * * In the result of the Initiate API, you receive back a report's `id` value.
     * * Check the status of a report by calling `GetReport` and passing in the report's `id` value.
     * * When a report's status is `Completed`, call `DownloadReport` to retrieve the file.
     *  
     * This API call returns information about any report type.
   *
   * 
     * @param int id The unique ID number of the report to retrieve
   * @return object
   */},{key:'getReport',value:function getReport(){var _ref229=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref229.id;var path=this.buildUrl({url:'/api/v2/reports/'+id,parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Initiate an ExportDocumentLine report task
   *
   * Begins running an `ExportDocumentLine` report task and returns the identity of the report.
     *  
     * Reports are run as asynchronous report tasks on the server. When complete, the report file will be available for download
     * for up to 30 days after completion. To run an asynchronous report, you should follow these steps:
     *  
     * * Begin a report by calling the report's Initiate API. There is a separate initiate API call for each report type.
     * * In the result of the Initiate API, you receive back a report's `id` value.
     * * Check the status of a report by calling `GetReport` and passing in the report's `id` value.
     * * When a report's status is `Completed`, call `DownloadReport` to retrieve the file.
     *  
     * The `ExportDocumentLine` report produces information about invoice lines recorded within your account.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param int companyId The unique ID number of the company to report on.
     * @param object model Options that may be configured to customize the report.
   * @return object[]
   */},{key:'initiateExportDocumentLineReport',value:function initiateExportDocumentLineReport(){var _ref230=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref230.companyId,model=_ref230.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/reports/exportdocumentline/initiate',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * List all report tasks for account
   *
   * List all report tasks for your account.
     *  
     * Reports are run as asynchronous report tasks on the server. When complete, the report file will be available for download
     * for up to 30 days after completion. To run an asynchronous report, you should follow these steps:
     *  
     * * Begin a report by calling the report's Initiate API. There is a separate initiate API call for each report type.
     * * In the result of the Initiate API, you receive back a report's `id` value.
     * * Check the status of a report by calling `GetReport` and passing in the report's `id` value.
     * * When a report's status is `Completed`, call `DownloadReport` to retrieve the file.
     *  
     * This API call returns information about all report types across your entire account.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, ProStoresOperator, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param int companyId The id of the company for which to get reports.
     * @param string pageKey Provide a page key to retrieve the next page of results.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
   * @return FetchResult
   */},{key:'listReports',value:function listReports(){var _ref231=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref231.companyId,pageKey=_ref231.pageKey,skip=_ref231.skip,top=_ref231.top;var path=this.buildUrl({url:'/api/v2/reports',parameters:{companyId:companyId,pageKey:pageKey,$skip:skip,$top:top}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Create a new setting
   *
   * Create one or more new setting objects attached to this company.
     *  
     * The company settings system is a metadata system that you can use to store extra information
     * about a company. Your integration or connector could use this data storage to keep track of
     * preference information, reminders, or any other storage that would need to persist even if
     * the customer uninstalls your application.
     *  
     * A setting can refer to any type of data you need to remember about this company object.
     * When creating this object, you may define your own `set`, `name`, and `value` parameters.
     * To define your own values, please choose a `set` name that begins with `X-` to indicate an extension.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, ProStoresOperator, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The ID of the company that owns this setting.
     * @param object[] model The setting you wish to create.
   * @return object[]
   */},{key:'createSettings',value:function createSettings(){var _ref232=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref232.companyId,model=_ref232.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/settings',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Delete a single setting
   *
   * Mark the setting object at this URL as deleted.
     *  
     * The company settings system is a metadata system that you can use to store extra information
     * about a company. Your integration or connector could use this data storage to keep track of
     * preference information, reminders, or any other storage that would need to persist even if
     * the customer uninstalls your application.
     *  
     * A setting can refer to any type of data you need to remember about this company object.
     * When creating this object, you may define your own `set`, `name`, and `value` parameters.
     * To define your own values, please choose a `set` name that begins with `X-` to indicate an extension.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, FirmAdmin, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The ID of the company that owns this setting.
     * @param int id The ID of the setting you wish to delete.
   * @return object[]
   */},{key:'deleteSetting',value:function deleteSetting(){var _ref233=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref233.companyId,id=_ref233.id;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/settings/'+id,parameters:{}});return this.restCall({url:path,verb:'delete',payload:null});}/**
   * Retrieve a single setting
   *
   * Get a single setting object by its unique ID.
     *  
     * The company settings system is a metadata system that you can use to store extra information
     * about a company. Your integration or connector could use this data storage to keep track of
     * preference information, reminders, or any other storage that would need to persist even if
     * the customer uninstalls your application.
     *  
     * A setting can refer to any type of data you need to remember about this company object.
     * When creating this object, you may define your own `set`, `name`, and `value` parameters.
     * To define your own values, please choose a `set` name that begins with `X-` to indicate an extension.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, ProStoresOperator, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param int companyId The ID of the company that owns this setting
     * @param int id The primary key of this setting
   * @return object
   */},{key:'getSetting',value:function getSetting(){var _ref234=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref234.companyId,id=_ref234.id;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/settings/'+id,parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve all settings for this company
   *
   * List all setting objects attached to this company.
     *  
     * The company settings system is a metadata system that you can use to store extra information
     * about a company. Your integration or connector could use this data storage to keep track of
     * preference information, reminders, or any other storage that would need to persist even if
     * the customer uninstalls your application.
     *  
     * A setting can refer to any type of data you need to remember about this company object.
     * When creating this object, you may define your own `set`, `name`, and `value` parameters.
     * To define your own values, please choose a `set` name that begins with `X-` to indicate an extension.
     *  
     * Search for specific objects using the criteria in the `$filter` parameter; full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .
     * Paginate your results using the `$top`, `$skip`, and `$orderby` parameters.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, ProStoresOperator, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param int companyId The ID of the company that owns these settings
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).
     * @param string include A comma separated list of additional data to retrieve.
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listSettingsByCompany',value:function listSettingsByCompany(){var _ref235=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref235.companyId,filter=_ref235.filter,include=_ref235.include,top=_ref235.top,skip=_ref235.skip,orderBy=_ref235.orderBy;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/settings',parameters:{$filter:filter,$include:include,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve all settings
   *
   * Get multiple setting objects across all companies.
     *  
     * The company settings system is a metadata system that you can use to store extra information
     * about a company. Your integration or connector could use this data storage to keep track of
     * preference information, reminders, or any other storage that would need to persist even if
     * the customer uninstalls your application.
     *  
     * A setting can refer to any type of data you need to remember about this company object.
     * When creating this object, you may define your own `set`, `name`, and `value` parameters.
     * To define your own values, please choose a `set` name that begins with `X-` to indicate an extension.
     *  
     * Search for specific objects using the criteria in the `$filter` parameter; full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .
     * Paginate your results using the `$top`, `$skip`, and `$orderby` parameters.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, ProStoresOperator, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).
     * @param string include A comma separated list of additional data to retrieve.
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'querySettings',value:function querySettings(){var _ref236=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref236.filter,include=_ref236.include,top=_ref236.top,skip=_ref236.skip,orderBy=_ref236.orderBy;var path=this.buildUrl({url:'/api/v2/settings',parameters:{$filter:filter,$include:include,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Update a single setting
   *
   * Replace the existing setting object at this URL with an updated object.
     *  
     * The company settings system is a metadata system that you can use to store extra information
     * about a company. Your integration or connector could use this data storage to keep track of
     * preference information, reminders, or any other storage that would need to persist even if
     * the customer uninstalls your application.
     *  
     * A setting can refer to any type of data you need to remember about this company object.
     * When creating this object, you may define your own `set`, `name`, and `value` parameters.
     * To define your own values, please choose a `set` name that begins with `X-` to indicate an extension.
     *  
     * All data from the existing object will be replaced with data in the object you `PUT`.
     *  
     * To set a field's value to `null`, you may either set its value to `null` or omit that field from the object when calling update.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, ProStoresOperator, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The ID of the company that this setting belongs to.
     * @param int id The ID of the setting you wish to update
     * @param object model The setting you wish to update.
   * @return object
   */},{key:'updateSetting',value:function updateSetting(){var _ref237=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref237.companyId,id=_ref237.id,model=_ref237.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/settings/'+id,parameters:{}});return this.restCall({url:path,verb:'put',payload:model});}/**
   * Retrieve a single subscription
   *
   * Get the subscription object identified by this URL.
     * A 'subscription' indicates a licensed subscription to a named Avalara service.
     * To request or remove subscriptions, please contact Avalara sales or your customer account manager.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param int accountId The ID of the account that owns this subscription
     * @param int id The primary key of this subscription
   * @return object
   */},{key:'getSubscription',value:function getSubscription(){var _ref238=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},accountId=_ref238.accountId,id=_ref238.id;var path=this.buildUrl({url:'/api/v2/accounts/'+accountId+'/subscriptions/'+id,parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve subscriptions for this account
   *
   * List all subscription objects attached to this account.
     * A 'subscription' indicates a licensed subscription to a named Avalara service.
     * To request or remove subscriptions, please contact Avalara sales or your customer account manager.
     *  
     * Search for specific objects using the criteria in the `$filter` parameter; full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .
     * Paginate your results using the `$top`, `$skip`, and `$orderby` parameters.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param int accountId The ID of the account that owns these subscriptions
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* subscriptionDescription
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listSubscriptionsByAccount',value:function listSubscriptionsByAccount(){var _ref239=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},accountId=_ref239.accountId,filter=_ref239.filter,top=_ref239.top,skip=_ref239.skip,orderBy=_ref239.orderBy;var path=this.buildUrl({url:'/api/v2/accounts/'+accountId+'/subscriptions',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve all subscriptions
   *
   * Get multiple subscription objects across all accounts.
     * A 'subscription' indicates a licensed subscription to a named Avalara service.
     * To request or remove subscriptions, please contact Avalara sales or your customer account manager.
     *  
     * Search for specific objects using the criteria in the `$filter` parameter; full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .
     * Paginate your results using the `$top`, `$skip`, and `$orderby` parameters.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* subscriptionDescription
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'querySubscriptions',value:function querySubscriptions(){var _ref240=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref240.filter,top=_ref240.top,skip=_ref240.skip,orderBy=_ref240.orderBy;var path=this.buildUrl({url:'/api/v2/subscriptions',parameters:{$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Create a new tax code
   *
   * Create one or more new taxcode objects attached to this company.
     * A 'TaxCode' represents a uniquely identified type of product, good, or service.
     * Avalara supports correct tax rates and taxability rules for all TaxCodes in all supported jurisdictions.
     * If you identify your products by tax code in your 'Create Transacion' API calls, Avalara will correctly calculate tax rates and
     * taxability rules for this product in all supported jurisdictions.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The ID of the company that owns this tax code.
     * @param object[] model The tax code you wish to create.
   * @return object[]
   */},{key:'createTaxCodes',value:function createTaxCodes(){var _ref241=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref241.companyId,model=_ref241.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/taxcodes',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Delete a single tax code
   *
   * Marks the existing TaxCode object at this URL as deleted.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The ID of the company that owns this tax code.
     * @param int id The ID of the tax code you wish to delete.
   * @return object[]
   */},{key:'deleteTaxCode',value:function deleteTaxCode(){var _ref242=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref242.companyId,id=_ref242.id;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/taxcodes/'+id,parameters:{}});return this.restCall({url:path,verb:'delete',payload:null});}/**
   * Retrieve a single tax code
   *
   * Get the taxcode object identified by this URL.
     * A 'TaxCode' represents a uniquely identified type of product, good, or service.
     * Avalara supports correct tax rates and taxability rules for all TaxCodes in all supported jurisdictions.
     * If you identify your products by tax code in your 'Create Transacion' API calls, Avalara will correctly calculate tax rates and
     * taxability rules for this product in all supported jurisdictions.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param int companyId The ID of the company that owns this tax code
     * @param int id The primary key of this tax code
   * @return object
   */},{key:'getTaxCode',value:function getTaxCode(){var _ref243=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref243.companyId,id=_ref243.id;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/taxcodes/'+id,parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve tax codes for this company
   *
   * List all taxcode objects attached to this company.
     * A 'TaxCode' represents a uniquely identified type of product, good, or service.
     * Avalara supports correct tax rates and taxability rules for all TaxCodes in all supported jurisdictions.
     * If you identify your products by tax code in your 'Create Transacion' API calls, Avalara will correctly calculate tax rates and
     * taxability rules for this product in all supported jurisdictions.
     *  
     * Search for specific objects using the criteria in the `$filter` parameter; full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .
     * Paginate your results using the `$top`, `$skip`, and `$orderby` parameters.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param int companyId The ID of the company that owns these tax codes
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).
     * @param string include A comma separated list of additional data to retrieve.
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listTaxCodesByCompany',value:function listTaxCodesByCompany(){var _ref244=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref244.companyId,filter=_ref244.filter,include=_ref244.include,top=_ref244.top,skip=_ref244.skip,orderBy=_ref244.orderBy;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/taxcodes',parameters:{$filter:filter,$include:include,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve all tax codes
   *
   * Get multiple taxcode objects across all companies.
     * A 'TaxCode' represents a uniquely identified type of product, good, or service.
     * Avalara supports correct tax rates and taxability rules for all TaxCodes in all supported jurisdictions.
     * If you identify your products by tax code in your 'Create Transacion' API calls, Avalara will correctly calculate tax rates and
     * taxability rules for this product in all supported jurisdictions.
     *  
     * Search for specific objects using the criteria in the `$filter` parameter; full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .
     * Paginate your results using the `$top`, `$skip`, and `$orderby` parameters.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).
     * @param string include A comma separated list of additional data to retrieve.
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'queryTaxCodes',value:function queryTaxCodes(){var _ref245=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref245.filter,include=_ref245.include,top=_ref245.top,skip=_ref245.skip,orderBy=_ref245.orderBy;var path=this.buildUrl({url:'/api/v2/taxcodes',parameters:{$filter:filter,$include:include,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Update a single tax code
   *
   * Replace the existing taxcode object at this URL with an updated object.
     * A 'TaxCode' represents a uniquely identified type of product, good, or service.
     * Avalara supports correct tax rates and taxability rules for all TaxCodes in all supported jurisdictions.
     * If you identify your products by tax code in your 'Create Transacion' API calls, Avalara will correctly calculate tax rates and
     * taxability rules for this product in all supported jurisdictions.
     * All data from the existing object will be replaced with data in the object you PUT.
     * To set a field's value to null, you may either set its value to null or omit that field from the object you post.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The ID of the company that this tax code belongs to.
     * @param int id The ID of the tax code you wish to update
     * @param object model The tax code you wish to update.
   * @return object
   */},{key:'updateTaxCode',value:function updateTaxCode(){var _ref246=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref246.companyId,id=_ref246.id,model=_ref246.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/taxcodes/'+id,parameters:{}});return this.restCall({url:path,verb:'put',payload:model});}/**
   * Build a multi-location tax content file
   *
   * Builds a tax content file containing information useful for a retail point-of-sale solution.
     *  
     * Since tax rates may change based on decisions made by a variety of tax authorities, we recommend
     * that users of this tax content API download new data every day. Many tax authorities may finalize
     * decisions on tax changes at unexpected times and may make changes in response to legal issues or
     * governmental priorities. Any tax content downloaded for future time periods is subject to change
     * if tax rates or tax laws change.
     *  
     * A TaxContent file contains a matrix of the taxes that would be charged when you sell any of your
     * Items at any of your Locations. To create items, use `CreateItems()`. To create locations, use
     * `CreateLocations()`. The file is built by looking up the tax profile for your location and your
     * item and calculating taxes for each in turn. To include a custom `TaxCode` in this tax content
     * file, first create the custom tax code using `CreateTaxCodes()` to create the custom tax code,
     * then use `CreateItems()` to create an item that uses the custom tax code.
     *  
     * This data file can be customized for specific partner devices and usage conditions.
     *  
     * The result of this API is the file you requested in the format you requested using the `responseType` field.
     *  
     * This API builds the file on demand, and is limited to files with no more than 7500 scenarios. To build a tax content
     * file for a single location at a time, please use `BuildTaxContentFileForLocation`.
     *  
     * NOTE: This API does not work for Tennessee tax holiday scenarios.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, ProStoresOperator, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param object model Parameters about the desired file format and report format, specifying which company, locations and TaxCodes to include.
   * @return object
   */},{key:'buildTaxContentFile',value:function buildTaxContentFile(){var _ref247=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},model=_ref247.model;var path=this.buildUrl({url:'/api/v2/pointofsaledata/build',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Build a tax content file for a single location
   *
   * Builds a tax content file containing information useful for a retail point-of-sale solution.
     *  
     * Since tax rates may change based on decisions made by a variety of tax authorities, we recommend
     * that users of this tax content API download new data every day. Many tax authorities may finalize
     * decisions on tax changes at unexpected times and may make changes in response to legal issues or
     * governmental priorities. Any tax content downloaded for future time periods is subject to change
     * if tax rates or tax laws change.
     *  
     * A TaxContent file contains a matrix of the taxes that would be charged when you sell any of your
     * Items at any of your Locations. To create items, use `CreateItems()`. To create locations, use
     * `CreateLocations()`. The file is built by looking up the tax profile for your location and your
     * item and calculating taxes for each in turn. To include a custom `TaxCode` in this tax content
     * file, first create the custom tax code using `CreateTaxCodes()` to create the custom tax code,
     * then use `CreateItems()` to create an item that uses the custom tax code.
     *  
     * This data file can be customized for specific partner devices and usage conditions.
     *  
     * The result of this API is the file you requested in the format you requested using the `responseType` field.
     *  
     * This API builds the file on demand, and is limited to files with no more than 7500 scenarios. To build a tax content
     * file for a multiple locations in a single file, please use `BuildTaxContentFile`.
     *  
     * NOTE: This API does not work for Tennessee tax holiday scenarios.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, ProStoresOperator, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int companyId The ID number of the company that owns this location.
     * @param int id The ID number of the location to retrieve point-of-sale data.
     * @param string date The date for which point-of-sale data would be calculated (today by default)
     * @param string format The format of the file (JSON by default) (See PointOfSaleFileType::* for a list of allowable values)
     * @param string partnerId If specified, requests a custom partner-formatted version of the file. (See PointOfSalePartnerId::* for a list of allowable values)
     * @param boolean includeJurisCodes When true, the file will include jurisdiction codes in the result.
   * @return object
   */},{key:'buildTaxContentFileForLocation',value:function buildTaxContentFileForLocation(){var _ref248=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref248.companyId,id=_ref248.id,date=_ref248.date,format=_ref248.format,partnerId=_ref248.partnerId,includeJurisCodes=_ref248.includeJurisCodes;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/locations/'+id+'/pointofsaledata',parameters:{date:date,format:format,partnerId:partnerId,includeJurisCodes:includeJurisCodes}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Download a file listing tax rates by postal code
   *
   * Download a CSV file containing all five digit postal codes in the United States and their sales
     * and use tax rates for tangible personal property.
     *  
     * Since tax rates may change based on decisions made by a variety of tax authorities, we recommend
     * that users of this tax content API download new data every day. Many tax authorities may finalize
     * decisions on tax changes at unexpected times and may make changes in response to legal issues or
     * governmental priorities. Any tax content downloaded for future time periods is subject to change
     * if tax rates or tax laws change.
     *  
     * This rates file is intended to be used as a default for tax calculation when your software cannot
     * call the `CreateTransaction` API call. When using this file, your software will be unable to
     * handle complex tax rules such as:
     *  
     * * Zip+4 - This tax file contains five digit zip codes only.
     * * Different product types - This tax file contains tangible personal property tax rates only.
     * * Mixed sourcing - This tax file cannot be used to resolve origin-based taxes.
     * * Threshold-based taxes - This tax file does not contain information about thresholds.
     *  
     * If you use this file to provide default tax rates, please ensure that your software calls `CreateTransaction`
     * to reconcile the actual transaction and determine the difference between the estimated general tax
     * rate and the final transaction tax.
     *  
     * The file provided by this API is in CSV format with the following columns:
     *  
     * * ZIP_CODE - The five digit zip code for this record.
     * * STATE_ABBREV - A valid two character US state abbreviation for this record. Zip codes may span multiple states.
     * * COUNTY_NAME - A valid county name for this record. Zip codes may span multiple counties.
     * * CITY_NAME - A valid city name for this record. Zip codes may span multiple cities.
     * * STATE_SALES_TAX - The state component of the sales tax rate.
     * * STATE_USE_TAX - The state component of the use tax rate.
     * * COUNTY_SALES_TAX - The county component of the sales tax rate.
     * * COUNTY_USE_TAX - The county component of the use tax rate.
     * * CITY_SALES_TAX - The city component of the sales tax rate.
     * * CITY_USE_TAX - The city component of the use tax rate.
     * * TOTAL_SALES_TAX - The total tax rate for sales tax for this postal code. This value may not equal the sum of the state/county/city due to special tax jurisdiction rules.
     * * TOTAL_USE_TAX - The total tax rate for use tax for this postal code. This value may not equal the sum of the state/county/city due to special tax jurisdiction rules.
     * * TAX_SHIPPING_ALONE - This column contains 'Y' if shipping is taxable.
     * * TAX_SHIPPING_AND_HANDLING_TOGETHER - This column contains 'Y' if shipping and handling are taxable when sent together.
     *  
     * For more detailed tax content, please use the `BuildTaxContentFile` API which allows usage of exact items and exact locations.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, ProStoresOperator, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param string date The date for which point-of-sale data would be calculated (today by default). Example input: 2016-12-31
     * @param string region A two character region code which limits results to a specific region.
   * @return object
   */},{key:'downloadTaxRatesByZipCode',value:function downloadTaxRatesByZipCode(){var _ref249=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},date=_ref249.date,region=_ref249.region;var path=this.buildUrl({url:'/api/v2/taxratesbyzipcode/download/'+date,parameters:{region:region}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Create a new tax rule
   *
   * Create one or more custom tax rules attached to this company.
     *  
     * A tax rule represents a rule that changes the default AvaTax behavior for a product or jurisdiction. Custom tax rules
     * can be used to change the taxability of an item, to change the tax base of an item, or to change the tax rate
     * charged when selling an item. Tax rules can also change tax behavior depending on the `entityUseCode` value submitted
     * with the transaction.
     *  
     * You can create custom tax rules to customize the behavior of AvaTax to match specific rules that are custom to your
     * business. If you have obtained a ruling from a tax auditor that requires custom tax calculations, you can use
     * custom tax rules to redefine the behavior for your company or item.
     *  
     * Please use custom tax rules carefully and ensure that these tax rules match the behavior agreed upon with your
     * auditor, legal representative, and accounting team.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The ID of the company that owns this tax rule.
     * @param object[] model The tax rule you wish to create.
   * @return object[]
   */},{key:'createTaxRules',value:function createTaxRules(){var _ref250=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref250.companyId,model=_ref250.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/taxrules',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Delete a single tax rule
   *
   * Mark the custom tax rule identified by this URL as deleted.
     *  
     * A tax rule represents a rule that changes the default AvaTax behavior for a product or jurisdiction. Custom tax rules
     * can be used to change the taxability of an item, to change the tax base of an item, or to change the tax rate
     * charged when selling an item. Tax rules can also change tax behavior depending on the `entityUseCode` value submitted
     * with the transaction.
     *  
     * You can create custom tax rules to customize the behavior of AvaTax to match specific rules that are custom to your
     * business. If you have obtained a ruling from a tax auditor that requires custom tax calculations, you can use
     * custom tax rules to redefine the behavior for your company or item.
     *  
     * Please use custom tax rules carefully and ensure that these tax rules match the behavior agreed upon with your
     * auditor, legal representative, and accounting team.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The ID of the company that owns this tax rule.
     * @param int id The ID of the tax rule you wish to delete.
   * @return object[]
   */},{key:'deleteTaxRule',value:function deleteTaxRule(){var _ref251=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref251.companyId,id=_ref251.id;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/taxrules/'+id,parameters:{}});return this.restCall({url:path,verb:'delete',payload:null});}/**
   * Retrieve a single tax rule
   *
   * Get the taxrule object identified by this URL.
     *  
     * A tax rule represents a rule that changes the default AvaTax behavior for a product or jurisdiction. Custom tax rules
     * can be used to change the taxability of an item, to change the tax base of an item, or to change the tax rate
     * charged when selling an item. Tax rules can also change tax behavior depending on the `entityUseCode` value submitted
     * with the transaction.
     *  
     * You can create custom tax rules to customize the behavior of AvaTax to match specific rules that are custom to your
     * business. If you have obtained a ruling from a tax auditor that requires custom tax calculations, you can use
     * custom tax rules to redefine the behavior for your company or item.
     *  
     * Please use custom tax rules carefully and ensure that these tax rules match the behavior agreed upon with your
     * auditor, legal representative, and accounting team.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param int companyId The ID of the company that owns this tax rule
     * @param int id The primary key of this tax rule
   * @return object
   */},{key:'getTaxRule',value:function getTaxRule(){var _ref252=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref252.companyId,id=_ref252.id;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/taxrules/'+id,parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve tax rules for this company
   *
   * List all taxrule objects attached to this company.
     *  
     * A tax rule represents a rule that changes the default AvaTax behavior for a product or jurisdiction. Custom tax rules
     * can be used to change the taxability of an item, to change the tax base of an item, or to change the tax rate
     * charged when selling an item. Tax rules can also change tax behavior depending on the `entityUseCode` value submitted
     * with the transaction.
     *  
     * You can create custom tax rules to customize the behavior of AvaTax to match specific rules that are custom to your
     * business. If you have obtained a ruling from a tax auditor that requires custom tax calculations, you can use
     * custom tax rules to redefine the behavior for your company or item.
     *  
     * Please use custom tax rules carefully and ensure that these tax rules match the behavior agreed upon with your
     * auditor, legal representative, and accounting team.
     *  
     * Search for specific objects using the criteria in the `$filter` parameter; full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .
     * Paginate your results using the `$top`, `$skip`, and `$orderby` parameters.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param int companyId The ID of the company that owns these tax rules
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* taxCode, rateTypeCode, taxTypeGroup, taxSubType
     * @param string include A comma separated list of additional data to retrieve.
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listTaxRules',value:function listTaxRules(){var _ref253=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref253.companyId,filter=_ref253.filter,include=_ref253.include,top=_ref253.top,skip=_ref253.skip,orderBy=_ref253.orderBy;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/taxrules',parameters:{$filter:filter,$include:include,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve all tax rules
   *
   * Get multiple taxrule objects across all companies.
     *  
     * A tax rule represents a rule that changes the default AvaTax behavior for a product or jurisdiction. Custom tax rules
     * can be used to change the taxability of an item, to change the tax base of an item, or to change the tax rate
     * charged when selling an item. Tax rules can also change tax behavior depending on the `entityUseCode` value submitted
     * with the transaction.
     *  
     * You can create custom tax rules to customize the behavior of AvaTax to match specific rules that are custom to your
     * business. If you have obtained a ruling from a tax auditor that requires custom tax calculations, you can use
     * custom tax rules to redefine the behavior for your company or item.
     *  
     * Please use custom tax rules carefully and ensure that these tax rules match the behavior agreed upon with your
     * auditor, legal representative, and accounting team.
     *  
     * Search for specific objects using the criteria in the `$filter` parameter; full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .
     * Paginate your results using the `$top`, `$skip`, and `$orderby` parameters.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* taxCode, rateTypeCode, taxTypeGroup, taxSubType
     * @param string include A comma separated list of additional data to retrieve.
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'queryTaxRules',value:function queryTaxRules(){var _ref254=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref254.filter,include=_ref254.include,top=_ref254.top,skip=_ref254.skip,orderBy=_ref254.orderBy;var path=this.buildUrl({url:'/api/v2/taxrules',parameters:{$filter:filter,$include:include,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Update a single tax rule
   *
   * Replace the existing custom tax rule object at this URL with an updated object.
     *  
     * A tax rule represents a rule that changes the default AvaTax behavior for a product or jurisdiction. Custom tax rules
     * can be used to change the taxability of an item, to change the tax base of an item, or to change the tax rate
     * charged when selling an item. Tax rules can also change tax behavior depending on the `entityUseCode` value submitted
     * with the transaction.
     *  
     * You can create custom tax rules to customize the behavior of AvaTax to match specific rules that are custom to your
     * business. If you have obtained a ruling from a tax auditor that requires custom tax calculations, you can use
     * custom tax rules to redefine the behavior for your company or item.
     *  
     * Please use custom tax rules carefully and ensure that these tax rules match the behavior agreed upon with your
     * auditor, legal representative, and accounting team.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param int companyId The ID of the company that this tax rule belongs to.
     * @param int id The ID of the tax rule you wish to update
     * @param object model The tax rule you wish to update.
   * @return object
   */},{key:'updateTaxRule',value:function updateTaxRule(){var _ref255=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref255.companyId,id=_ref255.id,model=_ref255.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/taxrules/'+id,parameters:{}});return this.restCall({url:path,verb:'put',payload:model});}/**
   * Add lines to an existing unlocked transaction
   *
   * Add lines to an existing unlocked transaction.
     *  
     *  The `AddLines` API allows you to add additional transaction lines to existing transaction, so that customer will
     *  be able to append multiple calls together and form an extremely large transaction. If customer does not specify line number
     *  in the lines to be added, a new random Guid string will be generated for line number. If customer are not satisfied with
     *  the line number for the transaction lines, they can turn on the renumber switch to have REST v2 automatically renumber all
     *  transaction lines for them, in this case, the line number becomes: "1", "2", "3", ...
     *  
     *  A transaction represents a unique potentially taxable action that your company has recorded, and transactions include actions like
     *  sales, purchases, inventory transfer, and returns (also called refunds).
     *  You may specify one or more of the following values in the `$include` parameter to fetch additional nested data, using commas to separate multiple values:
     *  
     *  * Lines
     *  * Details (implies lines)
     *  * Summary (implies details)
     *  * Addresses
     * * SummaryOnly (omit lines and details - reduces API response size)
     * * LinesOnly (omit details - reduces API response size)
     *  
     *  If you omit the `$include` parameter, the API will assume you want `Summary,Addresses`.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param string include Specifies objects to include in the response after transaction is created
     * @param object model information about the transaction and lines to be added
   * @return object
   */},{key:'addLines',value:function addLines(){var _ref256=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},include=_ref256.include,model=_ref256.model;var path=this.buildUrl({url:'/api/v2/companies/transactions/lines/add',parameters:{$include:include}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Correct a previously created transaction
   *
   * Replaces the current transaction uniquely identified by this URL with a new transaction.
     *  
     * A transaction represents a unique potentially taxable action that your company has recorded, and transactions include actions like
     * sales, purchases, inventory transfer, and returns (also called refunds).
     *  
     * When you adjust a committed transaction, the original transaction will be updated with the status code `Adjusted`, and
     * both revisions will be available for retrieval based on their code and ID numbers.
     * Only transactions in `Committed` status are reported by Avalara Managed Returns.
     *  
     * Transactions that have been previously reported to a tax authority by Avalara Managed Returns are considered `locked` and are
     * no longer available for adjustments.
     *  
     * You may specify one or more of the following values in the `$include` parameter to fetch additional nested data, using commas to separate multiple values:
     *  
     * * Lines
     * * Details (implies lines)
     * * Summary (implies details)
     * * Addresses
     * * SummaryOnly (omit lines and details - reduces API response size)
     * * LinesOnly (omit details - reduces API response size)
     * * TaxDetailsByTaxType - Includes the aggregated tax, exempt tax, taxable and non-taxable for each tax type returned in the transaction summary.
     *  
     * NOTE: If your companyCode or transactionCode contains any of these characters /, + or ? please use the following encoding before making a request:
     * * Replace '/' with '\_-ava2f-\_' For example: document/Code becomes document_-ava2f-_Code
     * * Replace '+' with '\_-ava2b-\_' For example: document+Code becomes document_-ava2b-_Code
     * * Replace '?' with '\_-ava3f-\_' For example: document?Code becomes document_-ava3f-_Code
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param string companyCode The company code of the company that recorded this transaction
     * @param string transactionCode The transaction code to adjust
     * @param string documentType (Optional): The document type of the transaction to adjust. (See DocumentType::* for a list of allowable values)
     * @param string include Specifies objects to include in this fetch call
     * @param object model The adjustment you wish to make
   * @return object
   */},{key:'adjustTransaction',value:function adjustTransaction(){var _ref257=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyCode=_ref257.companyCode,transactionCode=_ref257.transactionCode,documentType=_ref257.documentType,include=_ref257.include,model=_ref257.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyCode+'/transactions/'+transactionCode+'/adjust',parameters:{documentType:documentType,$include:include}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Get audit information about a transaction
   *
   * Retrieve audit information about a transaction stored in AvaTax.
     *  
     * The `AuditTransaction` API retrieves audit information related to a specific transaction. This audit
     * information includes the following:
     *  
     * * The `CompanyId` of the company that created the transaction
     * * The server timestamp representing the exact server time when the transaction was created
     * * The server duration - how long it took to process this transaction
     * * Whether exact API call details were logged
     * * A reconstructed API call showing what the original CreateTransaction call looked like
     *  
     * This API can be used to examine information about a previously created transaction.
     *  
     * A transaction represents a unique potentially taxable action that your company has recorded, and transactions include actions like
     * sales, purchases, inventory transfer, and returns (also called refunds).
     *  
     * NOTE: If your companyCode or transactionCode contains any of these characters /, + or ? please use the following encoding before making a request:
     * * Replace '/' with '\_-ava2f-\_' For example: document/Code becomes document_-ava2f-_Code
     * * Replace '+' with '\_-ava2b-\_' For example: document+Code becomes document_-ava2b-_Code
     * * Replace '?' with '\_-ava3f-\_' For example: document?Code becomes document_-ava3f-_Code
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, ProStoresOperator, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param string companyCode The code identifying the company that owns this transaction
     * @param string transactionCode The code identifying the transaction
   * @return object
   */},{key:'auditTransaction',value:function auditTransaction(){var _ref258=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyCode=_ref258.companyCode,transactionCode=_ref258.transactionCode;var path=this.buildUrl({url:'/api/v2/companies/'+companyCode+'/transactions/'+transactionCode+'/audit',parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Get audit information about a transaction
   *
   * Retrieve audit information about a transaction stored in AvaTax.
     *  
     * The `AuditTransaction` API retrieves audit information related to a specific transaction. This audit
     * information includes the following:
     *  
     * * The `CompanyId` of the company that created the transaction
     * * The server timestamp representing the exact server time when the transaction was created
     * * The server duration - how long it took to process this transaction
     * * Whether exact API call details were logged
     * * A reconstructed API call showing what the original CreateTransaction call looked like
     *  
     * This API can be used to examine information about a previously created transaction.
     *  
     * A transaction represents a unique potentially taxable action that your company has recorded, and transactions include actions like
     * sales, purchases, inventory transfer, and returns (also called refunds).
     *  
     * NOTE: If your companyCode or transactionCode contains any of these characters /, + or ? please use the following encoding before making a request:
     * * Replace '/' with '\_-ava2f-\_' For example: document/Code becomes document_-ava2f-_Code
     * * Replace '+' with '\_-ava2b-\_' For example: document+Code becomes document_-ava2b-_Code
     * * Replace '?' with '\_-ava3f-\_' For example: document?Code becomes document_-ava3f-_Code
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, ProStoresOperator, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param string companyCode The code identifying the company that owns this transaction
     * @param string transactionCode The code identifying the transaction
     * @param string documentType The document type of the original transaction (See DocumentType::* for a list of allowable values)
   * @return object
   */},{key:'auditTransactionWithType',value:function auditTransactionWithType(){var _ref259=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyCode=_ref259.companyCode,transactionCode=_ref259.transactionCode,documentType=_ref259.documentType;var path=this.buildUrl({url:'/api/v2/companies/'+companyCode+'/transactions/'+transactionCode+'/types/'+documentType+'/audit',parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Lock a set of documents
   *
   * This API is available by invitation only.
     *  
     * Lock a set of transactions uniquely identified by DocumentIds provided. This API allows locking multiple documents at once.
     * After this API call succeeds, documents will be locked and can't be voided.
     *  
     * A transaction represents a unique potentially taxable action that your company has recorded, and transactions include actions like
     * sales, purchases, inventory transfer, and returns (also called refunds).
     * 
     * ### Security Policies
     * 
     * * This API requires the user role Compliance Root User.
     * * This API depends on the following active services<br />*Returns* (at least one of): Mrs, MRSComplianceManager, AvaTaxCsp.<br />*Firm Managed* (for accounts managed by a firm): ARA, ARAManaged.
   *
   * 
     * @param object model bulk lock request
   * @return object
   */},{key:'bulkLockTransaction',value:function bulkLockTransaction(){var _ref260=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},model=_ref260.model;var path=this.buildUrl({url:'/api/v2/transactions/lock',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Change a transaction's code
   *
   * Renames a transaction uniquely identified by this URL by changing its `code` value.
     *  
     * This API is available as long as the transaction is in `saved` or `posted` status. When a transaction
     * is `committed`, it can be modified by using the [AdjustTransaction](https://developer.avalara.com/api-reference/avatax/rest/v2/methods/Transactions/AdjustTransaction/) method.
     *  
     * After this API call succeeds, the transaction will have a new URL matching its new `code`.
     *  
     * If you have more than one document with the same `code`, specify the `documentType` parameter to choose between them.
     *  
     * A transaction represents a unique potentially taxable action that your company has recorded, and transactions include actions like
     * sales, purchases, inventory transfer, and returns (also called refunds).
     *  
     * You may specify one or more of the following values in the `$include` parameter to fetch additional nested data, using commas to separate multiple values:
     *  
     * * Lines
     * * Details (implies lines)
     * * Summary (implies details)
     * * Addresses
     * * SummaryOnly (omit lines and details - reduces API response size)
     * * LinesOnly (omit details - reduces API response size)
     * * TaxDetailsByTaxType - Includes the aggregated tax, exempt tax, taxable and non-taxable for each tax type returned in the transaction summary.
     *  
     * NOTE: If your companyCode or transactionCode contains any of these characters /, + or ? please use the following encoding before making a request:
     * * Replace '/' with '\_-ava2f-\_' For example: document/Code becomes document_-ava2f-_Code
     * * Replace '+' with '\_-ava2b-\_' For example: document+Code becomes document_-ava2b-_Code
     * * Replace '?' with '\_-ava3f-\_' For example: document?Code becomes document_-ava3f-_Code
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, ProStoresOperator, SSTAdmin, TechnicalSupportAdmin.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro, AvaTaxST.
   *
   * 
     * @param string companyCode The company code of the company that recorded this transaction
     * @param string transactionCode The transaction code to change
     * @param string documentType (Optional): The document type of the transaction to change document code. If not provided, the default is SalesInvoice. (See DocumentType::* for a list of allowable values)
     * @param string include Specifies objects to include in this fetch call
     * @param object model The code change request you wish to execute
   * @return object
   */},{key:'changeTransactionCode',value:function changeTransactionCode(){var _ref261=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyCode=_ref261.companyCode,transactionCode=_ref261.transactionCode,documentType=_ref261.documentType,include=_ref261.include,model=_ref261.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyCode+'/transactions/'+transactionCode+'/changecode',parameters:{documentType:documentType,$include:include}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Commit a transaction for reporting
   *
   * Marks a transaction by changing its status to `Committed`.
     *  
     * Transactions that are committed are available to be reported to a tax authority by Avalara Managed Returns.
     *  
     * A transaction represents a unique potentially taxable action that your company has recorded, and transactions include actions like
     * sales, purchases, inventory transfer, and returns (also called refunds).
     *  
     * If you have more than one document with the same `code`, specify the `documentType` parameter to choose between them.
     *  
     * Any changes made to a committed transaction will generate a transaction history.
     *  
     * You may specify one or more of the following values in the `$include` parameter to fetch additional nested data, using commas to separate multiple values:
     *  
     * * Lines
     * * Details (implies lines)
     * * Summary (implies details)
     * * Addresses
     * * SummaryOnly (omit lines and details - reduces API response size)
     * * LinesOnly (omit details - reduces API response size)
     * * TaxDetailsByTaxType - Includes the aggregated tax, exempt tax, taxable and non-taxable for each tax type returned in the transaction summary.
     *  
     * NOTE: If your companyCode or transactionCode contains any of these characters /, + or ? please use the following encoding before making a request:
     * * Replace '/' with '\_-ava2f-\_' For example: document/Code becomes document_-ava2f-_Code
     * * Replace '+' with '\_-ava2b-\_' For example: document+Code becomes document_-ava2b-_Code
     * * Replace '?' with '\_-ava3f-\_' For example: document?Code becomes document_-ava3f-_Code
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, ProStoresOperator, SSTAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param string companyCode The company code of the company that recorded this transaction
     * @param string transactionCode The transaction code to commit
     * @param string documentType (Optional): The document type of the transaction to commit. If not provided, the default is SalesInvoice. (See DocumentType::* for a list of allowable values)
     * @param string include Specifies objects to include in this fetch call
     * @param object model The commit request you wish to execute
   * @return object
   */},{key:'commitTransaction',value:function commitTransaction(){var _ref262=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyCode=_ref262.companyCode,transactionCode=_ref262.transactionCode,documentType=_ref262.documentType,include=_ref262.include,model=_ref262.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyCode+'/transactions/'+transactionCode+'/commit',parameters:{documentType:documentType,$include:include}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Create or adjust a transaction
   *
   * Records a new transaction or adjust an existing transaction in AvaTax.
     *  
     * The `CreateOrAdjustTransaction` endpoint is used to create a new transaction or update an existing one. This API
     * can help you create an idempotent service that creates transactions
     * If there exists a transaction identified by code, the original transaction will be adjusted by using the meta data
     * in the input transaction.
     *  
     * The `CreateOrAdjustTransaction` API cannot modify any transaction that has been reported to a tax authority using
     * the Avalara Managed Returns Service or any other tax filing service. If you call this API to attempt to modify
     * a transaction that has been reported on a tax filing, you will receive the error `CannotModifyLockedTransaction`.
     *  
     * To generate a refund for a transaction, use the `RefundTransaction` API.
     *  
     * If you don't specify the field `type` in your request, you will get an estimate of type `SalesOrder`, which will not be recorded in the database.
     *  
     * A transaction represents a unique potentially taxable action that your company has recorded, and transactions include actions like
     * sales, purchases, inventory transfer, and returns (also called refunds).
     * You may specify one or more of the following values in the `$include` parameter to fetch additional nested data, using commas to separate multiple values:
     *  
     * * Lines
     * * Details (implies lines)
     * * Summary (implies details)
     * * Addresses
     * * SummaryOnly (omit lines and details - reduces API response size)
     * * LinesOnly (omit details - reduces API response size)
     * * ForceTimeout - Simulates a timeout. This adds a 30 second delay and error to your API call. This can be used to test your code to ensure it can respond correctly in the case of a dropped connection.
     *  
     * If you omit the `$include` parameter, the API will assume you want `Summary,Addresses`.
     *  
     * NOTE: Avoid using the following strings in your transaction codes as they are encoding strings and will be interpreted differently:
     * * \_-ava2f-\_
     * * \_-ava2b-\_
     * * \_-ava3f-\_
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param string include Specifies objects to include in the response after transaction is created
     * @param object model The transaction you wish to create or adjust
   * @return object
   */},{key:'createOrAdjustTransaction',value:function createOrAdjustTransaction(){var _ref263=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},include=_ref263.include,model=_ref263.model;var path=this.buildUrl({url:'/api/v2/transactions/createoradjust',parameters:{$include:include}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Create a new transaction
   *
   * Records a new transaction in AvaTax.
     *  
     * A transaction represents a unique potentially taxable action that your company has recorded, and transactions include actions like
     * sales, purchases, inventory transfer, and returns (also called refunds).
     *  
     * The `CreateTransaction` endpoint uses the tax profile of your company to identify the correct tax rules
     * and rates to apply to all line items in this transaction. The end result will be the total tax calculated by AvaTax based on your
     * company's configuration and the data provided in this API call.
     *  
     * The `CreateTransaction` API will report an error if a committed transaction already exists with the same `code`. To
     * avoid this error, use the `CreateOrAdjustTransaction` API - it will create the transaction if it does not exist, or
     * update it if it does exist.
     *  
     * To generate a refund for a transaction, use the `RefundTransaction` API.
     *  
     * The field `type` identifies the kind of transaction - for example, a sale, purchase, or refund. If you do not specify
     * a `type` value, you will receive an estimate of type `SalesOrder`, which will not be recorded.
     *  
     * The origin and destination locations for a transaction must be identified by either address or geocode. For address-based transactions, please
     * provide addresses in the fields `line`, `city`, `region`, `country` and `postalCode`. For geocode-based transactions, please provide the geocode
     * information in the fields `latitude` and `longitude`. If either `latitude` or `longitude` or both are null, the transaction will be calculated
     * using the best available address location information.
     *  
     * You may specify one or more of the following values in the `$include` parameter to fetch additional nested data, using commas to separate multiple values:
     *  
     * * Lines
     * * Details (implies lines)
     * * Summary (implies details)
     * * Addresses
     * * SummaryOnly (omit lines and details - reduces API response size)
     * * LinesOnly (omit details - reduces API response size)
     * * ForceTimeout - Simulates a timeout. This adds a 30 second delay and error to your API call. This can be used to test your code to ensure it can respond correctly in the case of a dropped connection.
     * * TaxDetailsByTaxType - Includes the aggregated tax, exempt tax, taxable and non-taxable for each tax type returned in the transaction summary.
     *  
     * If you omit the `$include` parameter, the API will assume you want `Summary,Addresses`.
     *  
     * NOTE: Avoid using the following strings in your transaction codes as they are encoding strings and will be interpreted differently:
     * * \_-ava2f-\_
     * * \_-ava2b-\_
     * * \_-ava3f-\_
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param string include Specifies objects to include in the response after transaction is created
     * @param object model The transaction you wish to create
   * @return object
   */},{key:'createTransaction',value:function createTransaction(){var _ref264=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},include=_ref264.include,model=_ref264.model;var path=this.buildUrl({url:'/api/v2/transactions/create',parameters:{$include:include}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Remove lines from an existing unlocked transaction
   *
   * Remove lines to an existing unlocked transaction.
     *  
     *  The `DeleteLines` API allows you to remove transaction lines from existing unlocked transaction, so that customer will
     *  be able to delete transaction lines and adjust original transaction the way they like
     *  
     *  A transaction represents a unique potentially taxable action that your company has recorded, and transactions include actions like
     *  sales, purchases, inventory transfer, and returns (also called refunds).
     *  You may specify one or more of the following values in the `$include` parameter to fetch additional nested data, using commas to separate multiple values:
     *  
     *  * Lines
     *  * Details (implies lines)
     *  * Summary (implies details)
     *  * Addresses
     * * SummaryOnly (omit lines and details - reduces API response size)
     * * LinesOnly (omit details - reduces API response size)
     *  
     *  If you omit the `$include` parameter, the API will assume you want `Summary,Addresses`.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param string include Specifies objects to include in the response after transaction is created
     * @param object model information about the transaction and lines to be removed
   * @return object
   */},{key:'deleteLines',value:function deleteLines(){var _ref265=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},include=_ref265.include,model=_ref265.model;var path=this.buildUrl({url:'/api/v2/companies/transactions/lines/delete',parameters:{$include:include}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Retrieve a single transaction by code
   *
   * Get the current transaction identified by this company code, transaction code, and document type.
     *  
     * A transaction is uniquely identified by `companyCode`, `code` (often called Transaction Code), and `documentType`.
     *  
     * For compatibility purposes, when this API finds multiple transactions with the same transaction code, and if you have not specified
     * the `type` parameter to this API, it will default to selecting the `SalesInvoices` transaction. To change this behavior, use the
     * optional `documentType` parameter to specify the specific document type you wish to find.
     *  
     * If this transaction was adjusted, the return value of this API will be the current transaction with this code.
     *  
     * You may specify one or more of the following values in the `$include` parameter to fetch additional nested data, using commas to separate multiple values:
     *  
     * * Lines
     * * Details (implies lines)
     * * Summary (implies details)
     * * Addresses
     * * SummaryOnly (omit lines and details - reduces API response size)
     * * LinesOnly (omit details - reduces API response size)
     *  
     * NOTE: If your companyCode or transactionCode contains any of these characters /, + or ? please use the following encoding before making a request:
     * * Replace '/' with '\_-ava2f-\_' For example: document/Code becomes document_-ava2f-_Code
     * * Replace '+' with '\_-ava2b-\_' For example: document+Code becomes document_-ava2b-_Code
     * * Replace '?' with '\_-ava3f-\_' For example: document?Code becomes document_-ava3f-_Code
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, ProStoresOperator, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param string companyCode The company code of the company that recorded this transaction
     * @param string transactionCode The transaction code to retrieve
     * @param string documentType (Optional): The document type of the transaction to retrieve (See DocumentType::* for a list of allowable values)
     * @param string include Specifies objects to include in this fetch call
   * @return object
   */},{key:'getTransactionByCode',value:function getTransactionByCode(){var _ref266=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyCode=_ref266.companyCode,transactionCode=_ref266.transactionCode,documentType=_ref266.documentType,include=_ref266.include;var path=this.buildUrl({url:'/api/v2/companies/'+companyCode+'/transactions/'+transactionCode,parameters:{documentType:documentType,$include:include}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve a single transaction by code
   *
   * DEPRECATED: Please use the `GetTransactionByCode` API instead.
     *  
     * NOTE: If your companyCode or transactionCode contains any of these characters /, + or ? please use the following encoding before making a request:
     * * Replace '/' with '\_-ava2f-\_' For example: document/Code becomes document_-ava2f-_Code
     * * Replace '+' with '\_-ava2b-\_' For example: document+Code becomes document_-ava2b-_Code
     * * Replace '?' with '\_-ava3f-\_' For example: document?Code becomes document_-ava3f-_Code
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, ProStoresOperator, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param string companyCode The company code of the company that recorded this transaction
     * @param string transactionCode The transaction code to retrieve
     * @param string documentType The transaction type to retrieve (See DocumentType::* for a list of allowable values)
     * @param string include Specifies objects to include in this fetch call
   * @return object
   */},{key:'getTransactionByCodeAndType',value:function getTransactionByCodeAndType(){var _ref267=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyCode=_ref267.companyCode,transactionCode=_ref267.transactionCode,documentType=_ref267.documentType,include=_ref267.include;var path=this.buildUrl({url:'/api/v2/companies/'+companyCode+'/transactions/'+transactionCode+'/types/'+documentType,parameters:{$include:include}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve a single transaction by ID
   *
   * Get the unique transaction identified by this URL.
     *  
     * This endpoint retrieves the exact transaction identified by this ID number even if that transaction was later adjusted
     * by using the `AdjustTransaction` endpoint.
     *  
     * A transaction represents a unique potentially taxable action that your company has recorded, and transactions include actions like
     * sales, purchases, inventory transfer, and returns (also called refunds).
     *  
     * You may specify one or more of the following values in the `$include` parameter to fetch additional nested data, using commas to separate multiple values:
     *  
     * * Lines
     * * Details (implies lines)
     * * Summary (implies details)
     * * Addresses
     * * SummaryOnly (omit lines and details - reduces API response size)
     * * LinesOnly (omit details - reduces API response size)
     * * TaxDetailsByTaxType - Includes the aggregated tax, exempt tax, taxable and non-taxable for each tax type returned in the transaction summary.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, ProStoresOperator, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param int id The unique ID number of the transaction to retrieve
     * @param string include Specifies objects to include in this fetch call
   * @return object
   */},{key:'getTransactionById',value:function getTransactionById(){var _ref268=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref268.id,include=_ref268.include;var path=this.buildUrl({url:'/api/v2/transactions/'+id,parameters:{$include:include}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve all transactions
   *
   * List all transactions attached to this company.
     *  
     * This endpoint is limited to returning 1,000 transactions at a time maximum.
     *  
     * When listing transactions, you must specify a `date` range filter. If you do not specify a `$filter` that includes a `date` field
     * criteria, the query will default to looking at only those transactions with `date` in the past 30 days.
     *  
     * A transaction represents a unique potentially taxable action that your company has recorded, and transactions include actions like
     * sales, purchases, inventory transfer, and returns (also called refunds).
     *  
     * Search for specific objects using the criteria in the `$filter` parameter; full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .
     * Paginate your results using the `$top`, `$skip`, and `$orderby` parameters.
     *  
     * You may specify one or more of the following values in the `$include` parameter to fetch additional nested data, using commas to separate multiple values:
     *  
     * * Lines
     * * Details (implies lines)
     * * Summary (implies details)
     * * Addresses
     * * SummaryOnly (omit lines and details - reduces API response size)
     * * LinesOnly (omit details - reduces API response size)
     *  
     * NOTE: If your companyCode or transactionCode contains any of these characters /, + or ? please use the following encoding before making a request:
     * * Replace '/' with '\_-ava2f-\_' For example: document/Code becomes document_-ava2f-_Code
     * * Replace '+' with '\_-ava2b-\_' For example: document+Code becomes document_-ava2b-_Code
     * * Replace '?' with '\_-ava3f-\_' For example: document?Code becomes document_-ava3f-_Code
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, ProStoresOperator, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param string companyCode The company code of the company that recorded this transaction
     * @param int dataSourceId Optionally filter transactions to those from a specific data source.
     * @param string include Specifies objects to include in this fetch call
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).<br />*Not filterable:* totalDiscount, lines, addresses, locationTypes, summary, taxDetailsByTaxType, parameters, messages, invoiceMessages, isFakeTransaction
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listTransactionsByCompany',value:function listTransactionsByCompany(){var _ref269=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyCode=_ref269.companyCode,dataSourceId=_ref269.dataSourceId,include=_ref269.include,filter=_ref269.filter,top=_ref269.top,skip=_ref269.skip,orderBy=_ref269.orderBy;var path=this.buildUrl({url:'/api/v2/companies/'+companyCode+'/transactions',parameters:{dataSourceId:dataSourceId,$include:include,$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Lock a single transaction
   *
   * Lock a transaction uniquely identified by this URL.
     *  
     * This API is mainly used for connector developer to simulate what happens when Returns product locks a document.
     * After this API call succeeds, the document will be locked and can't be voided or adjusted.
     *  
     * This API is only available to customers in Sandbox with AvaTaxPro subscription. On production servers, this API is available by invitation only.
     *  
     * If you have more than one document with the same `code`, specify the `documentType` parameter to choose between them.
     *  
     * A transaction represents a unique potentially taxable action that your company has recorded, and transactions include actions like
     * sales, purchases, inventory transfer, and returns (also called refunds).
     *  
     * You may specify one or more of the following values in the `$include` parameter to fetch additional nested data, using commas to separate multiple values:
     *  
     * * Lines
     * * Details (implies lines)
     * * Summary (implies details)
     * * Addresses
     * * SummaryOnly (omit lines and details - reduces API response size)
     * * LinesOnly (omit details - reduces API response size)
     * * TaxDetailsByTaxType - Includes the aggregated tax, exempt tax, taxable and non-taxable for each tax type returned in the transaction summary.
     *  
     * NOTE: If your companyCode or transactionCode contains any of these characters /, + or ? please use the following encoding before making a request:
     * * Replace '/' with '\_-ava2f-\_' For example: document/Code becomes document_-ava2f-_Code
     * * Replace '+' with '\_-ava2b-\_' For example: document+Code becomes document_-ava2b-_Code
     * * Replace '?' with '\_-ava3f-\_' For example: document?Code becomes document_-ava3f-_Code
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Returns* (at least one of): Mrs, MRSComplianceManager, AvaTaxCsp.<br />*Firm Managed* (for accounts managed by a firm): ARA, ARAManaged.
   *
   * 
     * @param string companyCode The company code of the company that recorded this transaction
     * @param string transactionCode The transaction code to lock
     * @param string documentType (Optional): The document type of the transaction to lock. If not provided, the default is SalesInvoice. (See DocumentType::* for a list of allowable values)
     * @param string include Specifies objects to include in this fetch call
     * @param object model The lock request you wish to execute
   * @return object
   */},{key:'lockTransaction',value:function lockTransaction(){var _ref270=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyCode=_ref270.companyCode,transactionCode=_ref270.transactionCode,documentType=_ref270.documentType,include=_ref270.include,model=_ref270.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyCode+'/transactions/'+transactionCode+'/lock',parameters:{documentType:documentType,$include:include}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Create a refund for a transaction
   *
   * Create a refund for a transaction.
     *  
     * The `RefundTransaction` API allows you to quickly and easily create a `ReturnInvoice` representing a refund
     * for a previously created `SalesInvoice` transaction. You can choose to create a full or partial refund, and
     * specify individual line items from the original sale for refund.
     *  
     * The `RefundTransaction` API ensures that the tax amount you refund to the customer exactly matches the tax that
     * was calculated during the original transaction, regardless of any changes to your company's configuration, rules,
     * nexus, or any other setting.
     *  
     * This API is intended to be a shortcut to allow you to quickly and accurately generate a refund for the following
     * common refund scenarios:
     *  
     * * A full refund of a previous sale
     * * Refunding the tax that was charged on a previous sale, when the customer provides an exemption certificate after the purchase
     * * Refunding one or more items (lines) from a previous sale
     * * Granting a customer a percentage refund of a previous sale
     *  
     * For more complex scenarios than the ones above, please use `CreateTransaction` with document type `ReturnInvoice` to
     * create a custom refund transaction.
     *  
     * You may specify one or more of the following values in the `$include` parameter to fetch additional nested data, using commas to separate multiple values:
     *  
     * * Lines
     * * Details (implies lines)
     * * Summary (implies details)
     * * Addresses
     * * SummaryOnly (omit lines and details - reduces API response size)
     * * LinesOnly (omit details - reduces API response size)
     * * TaxDetailsByTaxType - Includes the aggregated tax, exempt tax, taxable and non-taxable for each tax type returned in the transaction summary.
     * If you omit the `$include` parameter, the API will assume you want `Summary,Addresses`.
     *  
     * NOTE: If your companyCode or transactionCode contains any of these characters /, + or ? please use the following encoding before making a request:
     * * Replace '/' with '\_-ava2f-\_' For example: document/Code becomes document_-ava2f-_Code
     * * Replace '+' with '\_-ava2b-\_' For example: document+Code becomes document_-ava2b-_Code
     * * Replace '?' with '\_-ava3f-\_' For example: document?Code becomes document_-ava3f-_Code
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param string companyCode The code of the company that made the original sale
     * @param string transactionCode The transaction code of the original sale
     * @param string include Specifies objects to include in the response after transaction is created
     * @param string documentType (Optional): The document type of the transaction to refund. If not provided, the default is SalesInvoice. (See DocumentType::* for a list of allowable values)
     * @param boolean useTaxDateOverride (Optional): If set to true, processes refund using taxDateOverride rather than taxAmountOverride (Note: taxAmountOverride is not allowed for SST states).
     * @param object model Information about the refund to create
   * @return object
   */},{key:'refundTransaction',value:function refundTransaction(){var _ref271=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyCode=_ref271.companyCode,transactionCode=_ref271.transactionCode,include=_ref271.include,documentType=_ref271.documentType,useTaxDateOverride=_ref271.useTaxDateOverride,model=_ref271.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyCode+'/transactions/'+transactionCode+'/refund',parameters:{$include:include,documentType:documentType,useTaxDateOverride:useTaxDateOverride}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Perform multiple actions on a transaction
   *
   * Performs one or more actions against the current transaction uniquely identified by this URL.
     *  
     * The `SettleTransaction` API call can perform the work of `ChangeCode`, `VerifyTransaction`, and `CommitTransaction`.
     *  
     * A transaction represents a unique potentially taxable action that your company has recorded, and transactions include actions like
     * sales, purchases, inventory transfer, and returns (also called refunds).
     *  
     * If you have more than one document with the same `code`, specify the `documentType` parameter to choose between them.
     *  
     * This API is available for users who want to execute more than one action at a time.
     *  
     * You may specify one or more of the following values in the `$include` parameter to fetch additional nested data, using commas to separate multiple values:
     *  
     * * Lines
     * * Details (implies lines)
     * * Summary (implies details)
     * * Addresses
     * * SummaryOnly (omit lines and details - reduces API response size)
     * * LinesOnly (omit details - reduces API response size)
     * * TaxDetailsByTaxType - Includes the aggregated tax, exempt tax, taxable and non-taxable for each tax type returned in the transaction summary.
     *  
     * NOTE: If your companyCode or transactionCode contains any of these characters /, + or ? please use the following encoding before making a request:
     * * Replace '/' with '\_-ava2f-\_' For example: document/Code becomes document_-ava2f-_Code
     * * Replace '+' with '\_-ava2b-\_' For example: document+Code becomes document_-ava2b-_Code
     * * Replace '?' with '\_-ava3f-\_' For example: document?Code becomes document_-ava3f-_Code
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, ProStoresOperator, SSTAdmin, TechnicalSupportAdmin.
   *
   * 
     * @param string companyCode The company code of the company that recorded this transaction
     * @param string transactionCode The transaction code to settle
     * @param string documentType (Optional): The document type of the transaction to settle. If not provided, the default is SalesInvoice. (See DocumentType::* for a list of allowable values)
     * @param string include Specifies objects to include in this fetch call
     * @param object model The data from an external system to reconcile against AvaTax
   * @return object
   */},{key:'settleTransaction',value:function settleTransaction(){var _ref272=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyCode=_ref272.companyCode,transactionCode=_ref272.transactionCode,documentType=_ref272.documentType,include=_ref272.include,model=_ref272.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyCode+'/transactions/'+transactionCode+'/settle',parameters:{documentType:documentType,$include:include}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Uncommit a transaction for reporting
   *
   * Adjusts a transaction by changing it to an uncommitted status.
     *  
     * Transactions that have been previously reported to a tax authority by Avalara Managed Returns are considered `locked` and are
     * no longer available to be uncommitted.
     *  
     * You may specify one or more of the following values in the `$include` parameter to fetch additional nested data, using commas to separate multiple values:
     *  
     * * Lines
     * * Details (implies lines)
     * * Summary (implies details)
     * * Addresses
     * * SummaryOnly (omit lines and details - reduces API response size)
     * * LinesOnly (omit details - reduces API response size)
     * * TaxDetailsByTaxType - Includes the aggregated tax, exempt tax, taxable and non-taxable for each tax type returned in the transaction summary.
     *  
     * NOTE: If your companyCode or transactionCode contains any of these characters /, + or ? please use the following encoding before making a request:
     * * Replace '/' with '\_-ava2f-\_' For example: document/Code becomes document_-ava2f-_Code
     * * Replace '+' with '\_-ava2b-\_' For example: document+Code becomes document_-ava2b-_Code
     * * Replace '?' with '\_-ava3f-\_' For example: document?Code becomes document_-ava3f-_Code
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param string companyCode The company code of the company that recorded this transaction
     * @param string transactionCode The transaction code to Uncommit
     * @param string documentType (Optional): The document type of the transaction to Uncommit. If not provided, the default is SalesInvoice. (See DocumentType::* for a list of allowable values)
     * @param string include Specifies objects to include in this fetch call
   * @return object
   */},{key:'uncommitTransaction',value:function uncommitTransaction(){var _ref273=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyCode=_ref273.companyCode,transactionCode=_ref273.transactionCode,documentType=_ref273.documentType,include=_ref273.include;var path=this.buildUrl({url:'/api/v2/companies/'+companyCode+'/transactions/'+transactionCode+'/uncommit',parameters:{documentType:documentType,$include:include}});return this.restCall({url:path,verb:'post',payload:null});}/**
   * Unvoids a transaction
   *
   * Unvoids a voided transaction
     *  
     * You may specify one or more of the following values in the `$include` parameter to fetch additional nested data, using commas to separate multiple values:
     *  
     * * Lines
     * * Details (implies lines)
     * * Summary (implies details)
     * * Addresses
     * * SummaryOnly (omit lines and details - reduces API response size)
     * * LinesOnly (omit details - reduces API response size)
     * * TaxDetailsByTaxType - Includes the aggregated tax, exempt tax, taxable and non-taxable for each tax type returned in the transaction summary.
     *  
     * NOTE: If your companyCode or transactionCode contains any of these characters /, + or ? please use the following encoding before making a request:
     * * Replace '/' with '\_-ava2f-\_' For example: document/Code becomes document_-ava2f-_Code
     * * Replace '+' with '\_-ava2b-\_' For example: document+Code becomes document_-ava2b-_Code
     * * Replace '?' with '\_-ava3f-\_' For example: document?Code becomes document_-ava3f-_Code
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param string companyCode The company code of the company that recorded this transaction
     * @param string transactionCode The transaction code to commit
     * @param string documentType (Optional): The document type of the transaction to commit. If not provided, the default is SalesInvoice. (See DocumentType::* for a list of allowable values)
     * @param string include Specifies objects to include in this fetch call
   * @return object
   */},{key:'unvoidTransaction',value:function unvoidTransaction(){var _ref274=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyCode=_ref274.companyCode,transactionCode=_ref274.transactionCode,documentType=_ref274.documentType,include=_ref274.include;var path=this.buildUrl({url:'/api/v2/companies/'+companyCode+'/transactions/'+transactionCode+'/unvoid',parameters:{documentType:documentType,$include:include}});return this.restCall({url:path,verb:'post',payload:null});}/**
   * Verify a transaction
   *
   * Verifies that the transaction uniquely identified by this URL matches certain expected values.
     *  
     * If the transaction does not match these expected values, this API will return an error code indicating which value did not match.
     *  
     * If you have more than one document with the same `code`, specify the `documentType` parameter to choose between them.
     *  
     * A transaction represents a unique potentially taxable action that your company has recorded, and transactions include actions like
     * sales, purchases, inventory transfer, and returns (also called refunds).
     *  
     * You may specify one or more of the following values in the `$include` parameter to fetch additional nested data, using commas to separate multiple values:
     *  
     * * Lines
     * * Details (implies lines)
     * * Summary (implies details)
     * * Addresses
     * * SummaryOnly (omit lines and details - reduces API response size)
     * * LinesOnly (omit details - reduces API response size)
     * * TaxDetailsByTaxType - Includes the aggregated tax, exempt tax, taxable and non-taxable for each tax type returned in the transaction summary.
     *  
     * NOTE: If your companyCode or transactionCode contains any of these characters /, + or ? please use the following encoding before making a request:
     * * Replace '/' with '\_-ava2f-\_' For example: document/Code becomes document_-ava2f-_Code
     * * Replace '+' with '\_-ava2b-\_' For example: document+Code becomes document_-ava2b-_Code
     * * Replace '?' with '\_-ava3f-\_' For example: document?Code becomes document_-ava3f-_Code
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, CSPTester, ProStoresOperator, SSTAdmin, TechnicalSupportAdmin.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param string companyCode The company code of the company that recorded this transaction
     * @param string transactionCode The transaction code to settle
     * @param string documentType (Optional): The document type of the transaction to verify. If not provided, the default is SalesInvoice. (See DocumentType::* for a list of allowable values)
     * @param string include Specifies objects to include in this fetch call
     * @param object model The data from an external system to reconcile against AvaTax
   * @return object
   */},{key:'verifyTransaction',value:function verifyTransaction(){var _ref275=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyCode=_ref275.companyCode,transactionCode=_ref275.transactionCode,documentType=_ref275.documentType,include=_ref275.include,model=_ref275.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyCode+'/transactions/'+transactionCode+'/verify',parameters:{documentType:documentType,$include:include}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Void a transaction
   *
   * Voids the current transaction uniquely identified by this URL.
     *  
     * A transaction represents a unique potentially taxable action that your company has recorded, and transactions include actions like
     * sales, purchases, inventory transfer, and returns (also called refunds).
     *  
     * When you void a transaction, that transaction's status is recorded as `DocVoided`.
     *  
     * If you have more than one document with the same `code`, specify the `documentType` parameter to choose between them.
     *  
     * Transactions that have been previously reported to a tax authority by Avalara Managed Returns are no longer available to be voided.
     *  
     * You may specify one or more of the following values in the `$include` parameter to fetch additional nested data, using commas to separate multiple values:
     *  
     * * Lines
     * * Details (implies lines)
     * * Summary (implies details)
     * * Addresses
     * * SummaryOnly (omit lines and details - reduces API response size)
     * * LinesOnly (omit details - reduces API response size)
     * * TaxDetailsByTaxType - Includes the aggregated tax, exempt tax, taxable and non-taxable for each tax type returned in the transaction summary.
     *  
     * NOTE: If your companyCode or transactionCode contains any of these characters /, + or ? please use the following encoding before making a request:
     * * Replace '/' with '\_-ava2f-\_' For example: document/Code becomes document_-ava2f-_Code
     * * Replace '+' with '\_-ava2b-\_' For example: document+Code becomes document_-ava2b-_Code
     * * Replace '?' with '\_-ava3f-\_' For example: document?Code becomes document_-ava3f-_Code
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, CompanyAdmin, CSPTester, ProStoresOperator, SSTAdmin, TechnicalSupportAdmin.
     * * This API depends on the following active services<br />*Required* (all): AvaTaxPro.
   *
   * 
     * @param string companyCode The company code of the company that recorded this transaction
     * @param string transactionCode The transaction code to void
     * @param string documentType (Optional): The document type of the transaction to void. If not provided, the default is SalesInvoice. (See DocumentType::* for a list of allowable values)
     * @param string include Specifies objects to include in this fetch call
     * @param object model The void request you wish to execute. To void a transaction the code must be set to 'DocVoided'
   * @return object
   */},{key:'voidTransaction',value:function voidTransaction(){var _ref276=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyCode=_ref276.companyCode,transactionCode=_ref276.transactionCode,documentType=_ref276.documentType,include=_ref276.include,model=_ref276.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyCode+'/transactions/'+transactionCode+'/void',parameters:{documentType:documentType,$include:include}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Create a new UPC
   *
   * Create one or more new UPC objects attached to this company.
     * A UPC represents a single UPC code in your catalog and matches this product to the tax code identified by this UPC.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin.
     * * This API depends on the following active services<br />*Required* (all): AvaUpc.
   *
   * 
     * @param int companyId The ID of the company that owns this UPC.
     * @param object[] model The UPC you wish to create.
   * @return object[]
   */},{key:'createUPCs',value:function createUPCs(){var _ref277=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref277.companyId,model=_ref277.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/upcs',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Delete a single UPC
   *
   * Marks the UPC object identified by this URL as deleted.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin.
     * * This API depends on the following active services<br />*Required* (all): AvaUpc.
   *
   * 
     * @param int companyId The ID of the company that owns this UPC.
     * @param int id The ID of the UPC you wish to delete.
   * @return object[]
   */},{key:'deleteUPC',value:function deleteUPC(){var _ref278=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref278.companyId,id=_ref278.id;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/upcs/'+id,parameters:{}});return this.restCall({url:path,verb:'delete',payload:null});}/**
   * Retrieve a single UPC
   *
   * Get the UPC object identified by this URL.
     * A UPC represents a single UPC code in your catalog and matches this product to the tax code identified by this UPC.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaUpc.
   *
   * 
     * @param int companyId The ID of the company that owns this UPC
     * @param int id The primary key of this UPC
   * @return object
   */},{key:'getUPC',value:function getUPC(){var _ref279=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref279.companyId,id=_ref279.id;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/upcs/'+id,parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve UPCs for this company
   *
   * List all UPC objects attached to this company.
     * A UPC represents a single UPC code in your catalog and matches this product to the tax code identified by this UPC.
     *  
     * Search for specific objects using the criteria in the `$filter` parameter; full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .
     * Paginate your results using the `$top`, `$skip`, and `$orderby` parameters.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaUpc.
   *
   * 
     * @param int companyId The ID of the company that owns these UPCs
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).
     * @param string include A comma separated list of additional data to retrieve.
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listUPCsByCompany',value:function listUPCsByCompany(){var _ref280=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref280.companyId,filter=_ref280.filter,include=_ref280.include,top=_ref280.top,skip=_ref280.skip,orderBy=_ref280.orderBy;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/upcs',parameters:{$filter:filter,$include:include,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve all UPCs
   *
   * Get multiple UPC objects across all companies.
     * A UPC represents a single UPC code in your catalog and matches this product to the tax code identified by this UPC.
     *  
     * Search for specific objects using the criteria in the `$filter` parameter; full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .
     * Paginate your results using the `$top`, `$skip`, and `$orderby` parameters.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, CSPAdmin, CSPTester, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser.
     * * This API depends on the following active services<br />*Required* (all): AvaUpc.
   *
   * 
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).
     * @param string include A comma separated list of additional data to retrieve.
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'queryUPCs',value:function queryUPCs(){var _ref281=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},filter=_ref281.filter,include=_ref281.include,top=_ref281.top,skip=_ref281.skip,orderBy=_ref281.orderBy;var path=this.buildUrl({url:'/api/v2/upcs',parameters:{$filter:filter,$include:include,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Update a single UPC
   *
   * Replace the existing UPC object at this URL with an updated object.
     * A UPC represents a single UPC code in your catalog and matches this product to the tax code identified by this UPC.
     * All data from the existing object will be replaced with data in the object you PUT.
     * To set a field's value to null, you may either set its value to null or omit that field from the object you post.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, CSPTester, SSTAdmin, TechnicalSupportAdmin.
     * * This API depends on the following active services<br />*Required* (all): AvaUpc.
   *
   * 
     * @param int companyId The ID of the company that this UPC belongs to.
     * @param int id The ID of the UPC you wish to update
     * @param object model The UPC you wish to update.
   * @return object
   */},{key:'updateUPC',value:function updateUPC(){var _ref282=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},companyId=_ref282.companyId,id=_ref282.id,model=_ref282.model;var path=this.buildUrl({url:'/api/v2/companies/'+companyId+'/upcs/'+id,parameters:{}});return this.restCall({url:path,verb:'put',payload:model});}/**
   * Change Password
   *
   * Allows a user to change their password via an API call.
     *  
     * This API allows an authenticated user to change their password via an API call. This feature is only available
     * for accounts that do not use SAML integrated password validation.
     *  
     * This API only allows the currently authenticated user to change their password; it cannot be used to apply to a
     * different user than the one authenticating the current API call.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPTester, FirmAdmin, FirmUser, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param object model An object containing your current password and the new password.
   * @return string
   */},{key:'changePassword',value:function changePassword(){var _ref283=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},model=_ref283.model;var path=this.buildUrl({url:'/api/v2/passwords',parameters:{}});return this.restCall({url:path,verb:'put',payload:model});}/**
   * Create new users
   *
   * Create one or more new user objects attached to this account.
     *  
     * A user represents one person with access privileges to make API calls and work with a specific account.
     *  
     * Users who are account administrators or company users are permitted to create user records to invite
     * additional team members to work with AvaTax.
     *  
     * A newly created user will receive an email inviting them to create their password. This means that you
     * must provide a valid email address for all user accounts created.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPTester, FirmAdmin, FirmUser, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param int accountId The unique ID number of the account where these users will be created.
     * @param object[] model The user or array of users you wish to create.
   * @return object[]
   */},{key:'createUsers',value:function createUsers(){var _ref284=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},accountId=_ref284.accountId,model=_ref284.model;var path=this.buildUrl({url:'/api/v2/accounts/'+accountId+'/users',parameters:{}});return this.restCall({url:path,verb:'post',payload:model});}/**
   * Delete a single user
   *
   * Mark the user object identified by this URL as deleted.
     *  
     * This API is available for use by account and company administrators only.
     *  
     * Account and company administrators may only delete users within the appropriate organizations
     * they control.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, CompanyAdmin, Compliance Root User, CSPTester, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TreasuryAdmin.
   *
   * 
     * @param int id The ID of the user you wish to delete.
     * @param int accountId The accountID of the user you wish to delete.
   * @return object[]
   */},{key:'deleteUser',value:function deleteUser(){var _ref285=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref285.id,accountId=_ref285.accountId;var path=this.buildUrl({url:'/api/v2/accounts/'+accountId+'/users/'+id,parameters:{}});return this.restCall({url:path,verb:'delete',payload:null});}/**
   * Retrieve a single user
   *
   * Get the user object identified by this URL.
     * A user represents one person with access privileges to make API calls and work with a specific account.
     *  
     *  You may specify one or more of the following values in the `$include` parameter to fetch additional nested data, using commas to separate multiple values:
     *  
     * * FetchDeleted
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, ProStoresOperator, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, SystemOperator, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param int id The ID of the user to retrieve.
     * @param int accountId The accountID of the user you wish to get.
     * @param string include Optional fetch commands.
   * @return object
   */},{key:'getUser',value:function getUser(){var _ref286=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref286.id,accountId=_ref286.accountId,include=_ref286.include;var path=this.buildUrl({url:'/api/v2/accounts/'+accountId+'/users/'+id,parameters:{$include:include}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve all entitlements for a single user
   *
   * Return a list of all entitlements to which this user has rights to access.
     * Entitlements are a list of specified API calls the user is permitted to make, a list of identifier numbers for companies the user is
     * allowed to use, and an access level identifier that indicates what types of access roles the user is allowed to use.
     * This API call is intended to provide a validation endpoint to determine, before making an API call, whether this call is likely to succeed.
     * For example, if user 567 within account 999 is attempting to create a new child company underneath company 12345, you could preview the user's
     * entitlements and predict whether this call would succeed:
     *  
     * * Retrieve entitlements by calling '/api/v2/accounts/999/users/567/entitlements' . If the call fails, you do not have accurate
     *  credentials for this user.
     * * If the 'accessLevel' field within entitlements is 'None', the call will fail.
     * * If the 'accessLevel' field within entitlements is 'SingleCompany' or 'SingleAccount', the call will fail if the companies
     *  table does not contain the ID number 12345.
     * * If the 'permissions' array within entitlements does not contain 'AccountSvc.CompanySave', the call will fail.
     *  
     * For a full list of defined permissions, please use '/api/v2/definitions/permissions' .
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, ProStoresOperator, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, SystemOperator, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param int id The ID of the user to retrieve.
     * @param int accountId The accountID of the user you wish to get.
   * @return object
   */},{key:'getUserEntitlements',value:function getUserEntitlements(){var _ref287=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref287.id,accountId=_ref287.accountId;var path=this.buildUrl({url:'/api/v2/accounts/'+accountId+'/users/'+id+'/entitlements',parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve users for this account
   *
   * List all user objects attached to this account.
     * A user represents one person with access privileges to make API calls and work with a specific account.
     *  
     * When an API is called using a legacy AvaTax License Key, the API log entry is recorded as being performed by a special user attached to that license key.
     * By default, this API will not return a listing of license key users. Users with registrar-level security may call this API to list license key users.
     *  
     * Search for specific objects using the criteria in the `$filter` parameter; full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .
     * Paginate your results using the `$top`, `$skip`, and `$orderby` parameters.
     *  
     * You may specify one or more of the following values in the `$include` parameter to fetch additional nested data, using commas to separate multiple values:
     *  
     * * FetchDeleted
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, ProStoresOperator, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, SystemOperator, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param int accountId The accountID of the user you wish to list.
     * @param string include Optional fetch commands.
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'listUsersByAccount',value:function listUsersByAccount(){var _ref288=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},accountId=_ref288.accountId,include=_ref288.include,filter=_ref288.filter,top=_ref288.top,skip=_ref288.skip,orderBy=_ref288.orderBy;var path=this.buildUrl({url:'/api/v2/accounts/'+accountId+'/users',parameters:{$include:include,$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Retrieve all users
   *
   * Get multiple user objects across all accounts.
     *  
     * A user represents one person or set of credentials with access privileges to make API calls and work with a specific account. A user can be authenticated
     * via either username / password authentication, an OpenID / OAuth Bearer Token, or a legacy AvaTax License Key.
     *  
     * When an API is called using a legacy AvaTax License Key, the API log entry is recorded as being performed by a special user attached to that license key.
     * By default, this API will not return a listing of license key users. Users with registrar-level security may call this API to list license key users.
     *  
     * Search for specific objects using the criteria in the `$filter` parameter; full documentation is available on [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/) .
     * Paginate your results using the `$top`, `$skip`, and `$orderby` parameters.
     *  
     * You may specify one or more of the following values in the `$include` parameter to fetch additional nested data, using commas to separate multiple values:
     *  
     * * FetchDeleted
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountOperator, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPAdmin, CSPTester, FirmAdmin, FirmUser, ProStoresOperator, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, SystemOperator, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param string include Optional fetch commands.
     * @param string filter A filter statement to identify specific records to retrieve. For more information on filtering, see [Filtering in REST](http://developer.avalara.com/avatax/filtering-in-rest/).
     * @param int top If nonzero, return no more than this number of results. Used with `$skip` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 1,000 records.
     * @param int skip If nonzero, skip this number of results before returning data. Used with `$top` to provide pagination for large datasets.
     * @param string orderBy A comma separated list of sort statements in the format `(fieldname) [ASC|DESC]`, for example `id ASC`.
   * @return FetchResult
   */},{key:'queryUsers',value:function queryUsers(){var _ref289=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},include=_ref289.include,filter=_ref289.filter,top=_ref289.top,skip=_ref289.skip,orderBy=_ref289.orderBy;var path=this.buildUrl({url:'/api/v2/users',parameters:{$include:include,$filter:filter,$top:top,$skip:skip,$orderBy:orderBy}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Update a single user
   *
   * Replace the existing user object at this URL with an updated object.
     * A user represents one person with access privileges to make API calls and work with a specific account.
     * All data from the existing object will be replaced with data in the object you PUT.
     * To set a field's value to null, you may either set its value to null or omit that field from the object you post.
     * 
     * ### Security Policies
     * 
     * * This API requires one of the following user roles: AccountAdmin, AccountUser, CompanyAdmin, CompanyUser, Compliance Root User, ComplianceAdmin, ComplianceUser, CSPTester, FirmAdmin, FirmUser, Registrar, SiteAdmin, SSTAdmin, SystemAdmin, TechnicalSupportAdmin, TechnicalSupportUser, TreasuryAdmin, TreasuryUser.
   *
   * 
     * @param int id The ID of the user you wish to update.
     * @param int accountId The accountID of the user you wish to update.
     * @param object model The user object you wish to update.
   * @return object
   */},{key:'updateUser',value:function updateUser(){var _ref290=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},id=_ref290.id,accountId=_ref290.accountId,model=_ref290.model;var path=this.buildUrl({url:'/api/v2/accounts/'+accountId+'/users/'+id,parameters:{}});return this.restCall({url:path,verb:'put',payload:model});}/**
   * Checks if the current user is subscribed to a specific service
   *
   * Returns a subscription object for the current account, or 404 Not Found if this subscription is not enabled for this account.
     *  
     * This API will return an error if it is called with invalid authentication credentials.
     *  
     * This API is intended to help you determine whether you have the necessary subscription to use certain API calls
     * within AvaTax. You can examine the subscriptions returned from this API call to look for a particular product
     * or subscription to provide useful information to the current user as to whether they are entitled to use
     * specific features of AvaTax.
   *
   * 
     * @param string serviceTypeId The service to check
   * @return object
   */},{key:'getMySubscription',value:function getMySubscription(){var _ref291=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},serviceTypeId=_ref291.serviceTypeId;var path=this.buildUrl({url:'/api/v2/utilities/subscriptions/'+serviceTypeId,parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * List all services to which the current user is subscribed
   *
   * Returns the list of all subscriptions enabled for the currently logged in user.
     *  
     * This API will return an error if it is called with invalid authentication credentials.
     *  
     * This API is intended to help you determine whether you have the necessary subscription to use certain API calls
     * within AvaTax. You can examine the subscriptions returned from this API call to look for a particular product
     * or subscription to provide useful information to the current user as to whether they are entitled to use
     * specific features of AvaTax.
   *
   * 
   * @return FetchResult
   */},{key:'listMySubscriptions',value:function listMySubscriptions(){var _ref292=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_objectDestructuringEmpty(_ref292);var path=this.buildUrl({url:'/api/v2/utilities/subscriptions',parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}/**
   * Tests connectivity and version of the service
   *
   * Check connectivity to AvaTax and return information about the AvaTax API server.
     *  
     * This API is intended to help you verify that your connection is working. This API will always succeed and will
     * never return a error. It provides basic information about the server you connect to:
     *  
     * * `version` - The version number of the AvaTax API server that responded to your request. The AvaTax API version number is updated once per month during Avalara's update process.
     * * `authenticated` - A boolean flag indicating whether or not you sent valid credentials with your API request.
     * * `authenticationType` - If you provided valid credentials to the API, this field will tell you whether you used Bearer, Username, or LicenseKey authentication.
     * * `authenticatedUserName` - If you provided valid credentials to the API, this field will tell you the username of the currently logged in user.
     * * `authenticatedUserId` - If you provided valid credentials to the API, this field will tell you the user ID of the currently logged in user.
     * * `authenticatedAccountId` - If you provided valid credentials to the API, this field will contain the account ID of the currently logged in user.
     *  
     * This API helps diagnose connectivity problems between your application and AvaTax; you may call this API even
     * if you do not have verified connection credentials. If this API fails, either your computer is not connected to
     * the internet, or there is a routing problem between your office and Avalara, or the Avalara server is not available.
     * For more information on the uptime of AvaTax, please see [Avalara's AvaTax Status Page](https://status.avalara.com/).
     * 
     * ### Security Policies
     * 
     * * This API may be called without providing authentication credentials.
   *
   * 
   * @return object
   */},{key:'ping',value:function ping(){var _ref293=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_objectDestructuringEmpty(_ref293);var path=this.buildUrl({url:'/api/v2/utilities/ping',parameters:{}});return this.restCall({url:path,verb:'get',payload:null});}}]);return AvaTaxClient;}();exports.default=AvaTaxClient;